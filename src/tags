!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A0	rand.c	57;"	d	file:
A1	rand.c	58;"	d	file:
A2	rand.c	59;"	d	file:
ADDEQU	rand.c	53;"	d	file:
ANET_CONNECT_BE_BINDING	anet.c	267;"	d	file:
ANET_CONNECT_NONBLOCK	anet.c	266;"	d	file:
ANET_CONNECT_NONE	anet.c	265;"	d	file:
AOF_RW_BUF_BLOCK_SIZE	aof.c	59;"	d	file:
AOF_WRITE_LOG_ERROR_RATE	aof.c	272;"	d	file:
BITOP_AND	bitops.c	206;"	d	file:
BITOP_NOT	bitops.c	209;"	d	file:
BITOP_OR	bitops.c	207;"	d	file:
BITOP_XOR	bitops.c	208;"	d	file:
C	rand.c	60;"	d	file:
CARRY	rand.c	52;"	d	file:
CLIENTS_CRON_MIN_ITERATIONS	gateway.c	967;"	d	file:
CLIENTS_CRON_MIN_ITERATIONS	redis-gateway.c	967;"	d	file:
CLIENTS_CRON_MIN_ITERATIONS	redis.c	967;"	d	file:
CLI_HELP_COMMAND	gateway-back.c	190;"	d	file:
CLI_HELP_COMMAND	gateway-lib.c	190;"	d	file:
CLI_HELP_COMMAND	redis-cli.c	186;"	d	file:
CLI_HELP_COMMAND	redis-cli2.c	216;"	d	file:
CLI_HELP_COMMAND	redis-gateway2.c	186;"	d	file:
CLI_HELP_GROUP	gateway-back.c	191;"	d	file:
CLI_HELP_GROUP	gateway-lib.c	191;"	d	file:
CLI_HELP_GROUP	redis-cli.c	187;"	d	file:
CLI_HELP_GROUP	redis-cli2.c	217;"	d	file:
CLI_HELP_GROUP	redis-gateway2.c	187;"	d	file:
CLUSTER_BROADCAST_ALL	cluster.c	2298;"	d	file:
CLUSTER_BROADCAST_LOCAL_SLAVES	cluster.c	2299;"	d	file:
CURR_OFFSET	redis-check-dump.c	113;"	d	file:
ERROR	redis-check-aof.c	39;"	d	file:
ERROR	redis-check-dump.c	98;"	d	file:
EVICTION_SAMPLES_ARRAY_SIZE	gateway.c	3141;"	d	file:
EVICTION_SAMPLES_ARRAY_SIZE	redis-gateway.c	3141;"	d	file:
EVICTION_SAMPLES_ARRAY_SIZE	redis.c	3141;"	d	file:
FRST	lzf_c.c	48;"	d	file:
HAVE_SETPROCTITLE	setproctitle.c	42;"	d	file:
HIGH	rand.c	49;"	d	file:
HI_BIT	rand.c	66;"	d	file:
HLL_BITS	hyperloglog.c	197;"	d	file:
HLL_DENSE	hyperloglog.c	201;"	d	file:
HLL_DENSE_GET_REGISTER	hyperloglog.c	337;"	d	file:
HLL_DENSE_SET_REGISTER	hyperloglog.c	349;"	d	file:
HLL_DENSE_SIZE	hyperloglog.c	200;"	d	file:
HLL_HDR_SIZE	hyperloglog.c	199;"	d	file:
HLL_INVALIDATE_CACHE	hyperloglog.c	191;"	d	file:
HLL_MAX_ENCODING	hyperloglog.c	204;"	d	file:
HLL_P	hyperloglog.c	194;"	d	file:
HLL_P_MASK	hyperloglog.c	196;"	d	file:
HLL_RAW	hyperloglog.c	203;"	d	file:
HLL_REGISTERS	hyperloglog.c	195;"	d	file:
HLL_REGISTER_MAX	hyperloglog.c	198;"	d	file:
HLL_SPARSE	hyperloglog.c	202;"	d	file:
HLL_SPARSE_IS_VAL	hyperloglog.c	367;"	d	file:
HLL_SPARSE_IS_XZERO	hyperloglog.c	366;"	d	file:
HLL_SPARSE_IS_ZERO	hyperloglog.c	365;"	d	file:
HLL_SPARSE_VAL_BIT	hyperloglog.c	364;"	d	file:
HLL_SPARSE_VAL_LEN	hyperloglog.c	371;"	d	file:
HLL_SPARSE_VAL_MAX_LEN	hyperloglog.c	373;"	d	file:
HLL_SPARSE_VAL_MAX_VALUE	hyperloglog.c	372;"	d	file:
HLL_SPARSE_VAL_SET	hyperloglog.c	376;"	d	file:
HLL_SPARSE_VAL_VALUE	hyperloglog.c	370;"	d	file:
HLL_SPARSE_XZERO_BIT	hyperloglog.c	363;"	d	file:
HLL_SPARSE_XZERO_LEN	hyperloglog.c	369;"	d	file:
HLL_SPARSE_XZERO_MAX_LEN	hyperloglog.c	375;"	d	file:
HLL_SPARSE_XZERO_SET	hyperloglog.c	382;"	d	file:
HLL_SPARSE_ZERO_LEN	hyperloglog.c	368;"	d	file:
HLL_SPARSE_ZERO_MAX_LEN	hyperloglog.c	374;"	d	file:
HLL_SPARSE_ZERO_SET	hyperloglog.c	379;"	d	file:
HLL_TEST_CYCLES	hyperloglog.c	1350;"	d	file:
HLL_VALID_CACHE	hyperloglog.c	192;"	d	file:
HSIZE	lzf_c.c	39;"	d	file:
IDX	lzf_c.c	51;"	d	file:
IDX	lzf_c.c	53;"	d	file:
IDX	lzf_c.c	55;"	d	file:
INT24_MAX	ziplist.c	135;"	d	file:
INT24_MIN	ziplist.c	136;"	d	file:
INTSET_ENC_INT16	intset.c	40;"	d	file:
INTSET_ENC_INT32	intset.c	41;"	d	file:
INTSET_ENC_INT64	intset.c	42;"	d	file:
LATENCY_DIST_DEFAULT_INTERVAL	gateway-back.c	1219;"	d	file:
LATENCY_DIST_DEFAULT_INTERVAL	gateway-lib.c	1219;"	d	file:
LATENCY_DIST_DEFAULT_INTERVAL	redis-cli.c	1142;"	d	file:
LATENCY_DIST_DEFAULT_INTERVAL	redis-cli2.c	1473;"	d	file:
LATENCY_DIST_DEFAULT_INTERVAL	redis-gateway2.c	1142;"	d	file:
LATENCY_GRAPH_COLS	latency.c	515;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	gateway-back.c	1172;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	gateway-lib.c	1172;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	redis-cli.c	1095;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	redis-cli2.c	1426;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	redis-gateway2.c	1095;"	d	file:
LATENCY_SAMPLE_RATE	gateway-back.c	1171;"	d	file:
LATENCY_SAMPLE_RATE	gateway-lib.c	1171;"	d	file:
LATENCY_SAMPLE_RATE	redis-cli.c	1094;"	d	file:
LATENCY_SAMPLE_RATE	redis-cli2.c	1425;"	d	file:
LATENCY_SAMPLE_RATE	redis-gateway2.c	1094;"	d	file:
LOW	rand.c	48;"	d	file:
LRUTestGenKey	gateway-back.c	/^void LRUTestGenKey(char *buf, size_t buflen, int sn) {$/;"	f
LRUTestGenKey	gateway-lib.c	/^void LRUTestGenKey(char *buf, size_t buflen, int sn) {$/;"	f
LRUTestGenKey	redis-cli.c	/^void LRUTestGenKey(char *buf, size_t buflen) {$/;"	f
LRUTestGenKey	redis-cli2.c	/^void LRUTestGenKey(char *buf, size_t buflen) {$/;"	f
LRUTestGenKey	redis-gateway2.c	/^void LRUTestGenKey(char *buf, size_t buflen) {$/;"	f
LRUTestMode	gateway-back.c	/^static void LRUTestMode(int sn) {$/;"	f	file:
LRUTestMode	gateway-lib.c	/^static void LRUTestMode(int sn) {$/;"	f	file:
LRUTestMode	redis-cli.c	/^static void LRUTestMode(void) {$/;"	f	file:
LRUTestMode	redis-cli2.c	/^static void LRUTestMode(void) {$/;"	f	file:
LRUTestMode	redis-gateway2.c	/^static void LRUTestMode(void) {$/;"	f	file:
LRU_CYCLE_PERIOD	gateway-back.c	2119;"	d	file:
LRU_CYCLE_PERIOD	gateway-lib.c	2119;"	d	file:
LRU_CYCLE_PERIOD	redis-cli.c	2042;"	d	file:
LRU_CYCLE_PERIOD	redis-cli2.c	2373;"	d	file:
LRU_CYCLE_PERIOD	redis-gateway2.c	2042;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	gateway-back.c	2120;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	gateway-lib.c	2120;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	redis-cli.c	2043;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	redis-cli2.c	2374;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	redis-gateway2.c	2043;"	d	file:
LUA_CMD_OBJCACHE_MAX_LEN	scripting.c	205;"	d	file:
LUA_CMD_OBJCACHE_SIZE	scripting.c	204;"	d	file:
LUA_GC_CYCLE_PERIOD	scripting.c	1048;"	d	file:
MASK	rand.c	47;"	d	file:
MAX_ACCEPTS_PER_CALL	networking.c	584;"	d	file:
MAX_CLUSTER_ACCEPTS_PER_CALL	cluster.c	572;"	d	file:
MAX_EVENT_BATCHSZ	ae_evport.c	66;"	d	file:
MAX_LIT	lzf_c.c	74;"	d	file:
MAX_OFF	lzf_c.c	75;"	d	file:
MAX_REF	lzf_c.c	76;"	d	file:
MAX_TYPES_NUM	redis-check-dump.c	141;"	d	file:
MAX_TYPE_NAME_LEN	redis-check-dump.c	142;"	d	file:
MEMTEST_32BIT	memtest.c	44;"	d	file:
MEMTEST_64BIT	memtest.c	46;"	d	file:
MEMTEST_MAX_REGIONS	debug.c	725;"	d	file:
MIGRATE_SOCKET_CACHE_ITEMS	cluster.c	4487;"	d	file:
MIGRATE_SOCKET_CACHE_TTL	cluster.c	4488;"	d	file:
MUL	rand.c	50;"	d	file:
MurmurHash64A	hyperloglog.c	/^uint64_t MurmurHash64A (const void * key, int len, unsigned int seed) {$/;"	f
N	rand.c	46;"	d	file:
NEXT	lzf_c.c	49;"	d	file:
OPVAL_DIRTY_LL	t_zset.c	1597;"	d	file:
OPVAL_DIRTY_ROBJ	t_zset.c	1596;"	d	file:
OPVAL_VALID_LL	t_zset.c	1598;"	d	file:
OUTPUT_CSV	gateway-back.c	63;"	d	file:
OUTPUT_CSV	gateway-lib.c	63;"	d	file:
OUTPUT_CSV	redis-cli.c	61;"	d	file:
OUTPUT_CSV	redis-cli2.c	61;"	d	file:
OUTPUT_CSV	redis-gateway2.c	61;"	d	file:
OUTPUT_RAW	gateway-back.c	62;"	d	file:
OUTPUT_RAW	gateway-lib.c	62;"	d	file:
OUTPUT_RAW	redis-cli.c	60;"	d	file:
OUTPUT_RAW	redis-cli2.c	60;"	d	file:
OUTPUT_RAW	redis-gateway2.c	60;"	d	file:
OUTPUT_STANDARD	gateway-back.c	61;"	d	file:
OUTPUT_STANDARD	gateway-lib.c	61;"	d	file:
OUTPUT_STANDARD	redis-cli.c	59;"	d	file:
OUTPUT_STANDARD	redis-cli2.c	59;"	d	file:
OUTPUT_STANDARD	redis-gateway2.c	59;"	d	file:
PIPEMODE_WRITE_LOOP_MAX_BYTES	gateway-back.c	1477;"	d	file:
PIPEMODE_WRITE_LOOP_MAX_BYTES	gateway-lib.c	1477;"	d	file:
PIPEMODE_WRITE_LOOP_MAX_BYTES	redis-cli.c	1400;"	d	file:
PIPEMODE_WRITE_LOOP_MAX_BYTES	redis-cli2.c	1731;"	d	file:
PIPEMODE_WRITE_LOOP_MAX_BYTES	redis-gateway2.c	1400;"	d	file:
PREFIX_SIZE	zmalloc.c	48;"	d	file:
PREFIX_SIZE	zmalloc.c	51;"	d	file:
PREFIX_SIZE	zmalloc.c	53;"	d	file:
PSYNC_CONTINUE	replication.c	1261;"	d	file:
PSYNC_FULLRESYNC	replication.c	1262;"	d	file:
PSYNC_NOT_SUPPORTED	replication.c	1263;"	d	file:
PSYNC_WAIT_REPLY	replication.c	1260;"	d	file:
PSYNC_WRITE_ERROR	replication.c	1259;"	d	file:
R0	sha1.c	47;"	d	file:
R1	sha1.c	48;"	d	file:
R2	sha1.c	49;"	d	file:
R3	sha1.c	50;"	d	file:
R4	sha1.c	51;"	d	file:
RANDPTR_INITIAL_SIZE	redis-benchmark.c	50;"	d	file:
REDIS_AGGR_MAX	t_zset.c	1885;"	d	file:
REDIS_AGGR_MIN	t_zset.c	1884;"	d	file:
REDIS_AGGR_SUM	t_zset.c	1883;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	gateway-back.c	65;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	gateway-lib.c	65;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	redis-cli.c	63;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	redis-cli2.c	63;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	redis-gateway2.c	63;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	gateway-back.c	67;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	gateway-lib.c	67;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	redis-cli.c	65;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	redis-cli2.c	65;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	redis-gateway2.c	65;"	d	file:
REDIS_CLI_HISTFILE_ENV	gateway-back.c	66;"	d	file:
REDIS_CLI_HISTFILE_ENV	gateway-lib.c	66;"	d	file:
REDIS_CLI_HISTFILE_ENV	redis-cli.c	64;"	d	file:
REDIS_CLI_HISTFILE_ENV	redis-cli2.c	64;"	d	file:
REDIS_CLI_HISTFILE_ENV	redis-gateway2.c	64;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	gateway-back.c	64;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	gateway-lib.c	64;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	redis-cli.c	62;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	redis-cli2.c	62;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	redis-gateway2.c	62;"	d	file:
REDIS_CLUSTER_BLACKLIST_TTL	cluster.c	1073;"	d	file:
REDIS_CLUSTER_MAX_REJOIN_DELAY	cluster.c	3423;"	d	file:
REDIS_CLUSTER_MIN_REJOIN_DELAY	cluster.c	3424;"	d	file:
REDIS_CLUSTER_WRITABLE_DELAY	cluster.c	3425;"	d	file:
REDIS_COMPARE_BINARY	object.c	471;"	d	file:
REDIS_COMPARE_COLL	object.c	472;"	d	file:
REDIS_CONFIG_REWRITE_SIGNATURE	config.c	1240;"	d	file:
REDIS_ENCODING_EMBSTR_SIZE_LIMIT	object.c	87;"	d	file:
REDIS_ENCODING_HT	redis-check-dump.c	63;"	d	file:
REDIS_ENCODING_INT	redis-check-dump.c	61;"	d	file:
REDIS_ENCODING_RAW	redis-check-dump.c	60;"	d	file:
REDIS_ENCODING_ZIPMAP	redis-check-dump.c	62;"	d	file:
REDIS_EOF	redis-check-dump.c	69;"	d	file:
REDIS_EXPIRETIME	redis-check-dump.c	67;"	d	file:
REDIS_EXPIRETIME_MS	redis-check-dump.c	66;"	d	file:
REDIS_HASH	redis-check-dump.c	50;"	d	file:
REDIS_HASH_ZIPLIST	redis-check-dump.c	55;"	d	file:
REDIS_HASH_ZIPMAP	redis-check-dump.c	51;"	d	file:
REDIS_LIST	redis-check-dump.c	47;"	d	file:
REDIS_LIST_ZIPLIST	redis-check-dump.c	52;"	d	file:
REDIS_NOTUSED	gateway-back.c	59;"	d	file:
REDIS_NOTUSED	gateway-lib.c	59;"	d	file:
REDIS_NOTUSED	redis-benchmark.c	49;"	d	file:
REDIS_NOTUSED	redis-cli.c	57;"	d	file:
REDIS_NOTUSED	redis-cli2.c	57;"	d	file:
REDIS_NOTUSED	redis-gateway2.c	57;"	d	file:
REDIS_OP_DIFF	t_set.c	734;"	d	file:
REDIS_OP_INTER	t_set.c	735;"	d	file:
REDIS_OP_UNION	t_set.c	733;"	d	file:
REDIS_RDB_14BITLEN	redis-check-dump.c	85;"	d	file:
REDIS_RDB_32BITLEN	redis-check-dump.c	86;"	d	file:
REDIS_RDB_6BITLEN	redis-check-dump.c	84;"	d	file:
REDIS_RDB_ENCVAL	redis-check-dump.c	87;"	d	file:
REDIS_RDB_ENC_INT16	redis-check-dump.c	94;"	d	file:
REDIS_RDB_ENC_INT32	redis-check-dump.c	95;"	d	file:
REDIS_RDB_ENC_INT8	redis-check-dump.c	93;"	d	file:
REDIS_RDB_ENC_LZF	redis-check-dump.c	96;"	d	file:
REDIS_RDB_LENERR	redis-check-dump.c	88;"	d	file:
REDIS_SELECTDB	redis-check-dump.c	68;"	d	file:
REDIS_SENTINEL_PORT	sentinel.c	43;"	d	file:
REDIS_SET	redis-check-dump.c	48;"	d	file:
REDIS_SET_INTSET	redis-check-dump.c	53;"	d	file:
REDIS_SET_NO_FLAGS	gateway-front.c	63;"	d	file:
REDIS_SET_NO_FLAGS	t_string.c	61;"	d	file:
REDIS_SET_NX	gateway-front.c	64;"	d	file:
REDIS_SET_NX	t_string.c	62;"	d	file:
REDIS_SET_XX	gateway-front.c	65;"	d	file:
REDIS_SET_XX	t_string.c	63;"	d	file:
REDIS_STRING	redis-check-dump.c	46;"	d	file:
REDIS_SYNCIO_RESOLUTION	syncio.c	43;"	d	file:
REDIS_THREAD_STACK_SIZE	bio.c	89;"	d	file:
REDIS_ZSET	redis-check-dump.c	49;"	d	file:
REDIS_ZSET_ZIPLIST	redis-check-dump.c	54;"	d	file:
REPL_MAX_WRITTEN_BEFORE_FSYNC	replication.c	957;"	d	file:
REST	rand.c	64;"	d	file:
R_Nan	gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Nan	redis-check-dump.c	/^static double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	file:
R_Nan	redis-gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Nan	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	redis-check-dump.c	/^static double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	file:
R_NegInf	redis-gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	redis-check-dump.c	/^static double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	file:
R_PosInf	redis-gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	redis-check-dump.c	/^static double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	file:
R_Zero	redis-gateway.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
SA_ONSTACK	debug.c	46;"	d	file:
SDS_LLSTR_SIZE	sds.c	300;"	d	file:
SEED	rand.c	63;"	d	file:
SENTINEL_ASK_FORCED	sentinel.c	3183;"	d	file:
SENTINEL_ASK_PERIOD	sentinel.c	74;"	d	file:
SENTINEL_DEFAULT_DOWN_AFTER	sentinel.c	76;"	d	file:
SENTINEL_DEFAULT_FAILOVER_TIMEOUT	sentinel.c	84;"	d	file:
SENTINEL_DEFAULT_PARALLEL_SYNCS	sentinel.c	82;"	d	file:
SENTINEL_DEFAULT_SLAVE_PRIORITY	sentinel.c	80;"	d	file:
SENTINEL_ELECTION_TIMEOUT	sentinel.c	86;"	d	file:
SENTINEL_FAILOVER_STATE_NONE	sentinel.c	90;"	d	file:
SENTINEL_FAILOVER_STATE_RECONF_SLAVES	sentinel.c	95;"	d	file:
SENTINEL_FAILOVER_STATE_SELECT_SLAVE	sentinel.c	92;"	d	file:
SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE	sentinel.c	93;"	d	file:
SENTINEL_FAILOVER_STATE_UPDATE_CONFIG	sentinel.c	96;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_PROMOTION	sentinel.c	94;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_START	sentinel.c	91;"	d	file:
SENTINEL_GENERATE_EVENT	sentinel.c	105;"	d	file:
SENTINEL_HELLO_CHANNEL	sentinel.c	77;"	d	file:
SENTINEL_INFO_PERIOD	sentinel.c	72;"	d	file:
SENTINEL_ISQR_NOAUTH	sentinel.c	2621;"	d	file:
SENTINEL_ISQR_NOQUORUM	sentinel.c	2620;"	d	file:
SENTINEL_ISQR_OK	sentinel.c	2619;"	d	file:
SENTINEL_LEADER	sentinel.c	106;"	d	file:
SENTINEL_MASTER_LINK_STATUS_DOWN	sentinel.c	99;"	d	file:
SENTINEL_MASTER_LINK_STATUS_UP	sentinel.c	98;"	d	file:
SENTINEL_MAX_DESYNC	sentinel.c	87;"	d	file:
SENTINEL_MAX_PENDING_COMMANDS	sentinel.c	85;"	d	file:
SENTINEL_MIN_LINK_RECONNECT_PERIOD	sentinel.c	83;"	d	file:
SENTINEL_NO_FLAGS	sentinel.c	104;"	d	file:
SENTINEL_OBSERVER	sentinel.c	107;"	d	file:
SENTINEL_PING_PERIOD	sentinel.c	73;"	d	file:
SENTINEL_PUBLISH_PERIOD	sentinel.c	75;"	d	file:
SENTINEL_RESET_NO_SENTINELS	sentinel.c	1167;"	d	file:
SENTINEL_SCRIPT_MAX_ARGS	sentinel.c	614;"	d	file:
SENTINEL_SCRIPT_MAX_QUEUE	sentinel.c	112;"	d	file:
SENTINEL_SCRIPT_MAX_RETRY	sentinel.c	115;"	d	file:
SENTINEL_SCRIPT_MAX_RUNNING	sentinel.c	113;"	d	file:
SENTINEL_SCRIPT_MAX_RUNTIME	sentinel.c	114;"	d	file:
SENTINEL_SCRIPT_NONE	sentinel.c	110;"	d	file:
SENTINEL_SCRIPT_RETRY_DELAY	sentinel.c	116;"	d	file:
SENTINEL_SCRIPT_RUNNING	sentinel.c	111;"	d	file:
SENTINEL_SLAVE_RECONF_TIMEOUT	sentinel.c	81;"	d	file:
SENTINEL_TILT_PERIOD	sentinel.c	79;"	d	file:
SENTINEL_TILT_TRIGGER	sentinel.c	78;"	d	file:
SET3	rand.c	61;"	d	file:
SETLOW	rand.c	62;"	d	file:
SET_ERRNO	lzf_d.c	40;"	d	file:
SET_ERRNO	lzf_d.c	43;"	d	file:
SHA1Final	sha1.c	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context)$/;"	f
SHA1HANDSOFF	sha1.c	22;"	d	file:
SHA1Init	sha1.c	/^void SHA1Init(SHA1_CTX* context)$/;"	f
SHA1Transform	sha1.c	/^void SHA1Transform(uint32_t state[5], const unsigned char buffer[64])$/;"	f
SHA1Update	sha1.c	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, uint32_t len)$/;"	f
SHIFT_ERROR	redis-check-dump.c	123;"	d	file:
SPT	setproctitle.c	/^} SPT;$/;"	v	typeref:struct:__anon10	file:
SPT_MAXTITLE	setproctitle.c	213;"	d	file:
SPT_MIN	setproctitle.c	67;"	d	file:
SRANDMEMBER_SUB_STRATEGY_MUL	t_set.c	419;"	d	file:
SRI_DISCONNECTED	sentinel.c	57;"	d	file:
SRI_FAILOVER_IN_PROGRESS	sentinel.c	62;"	d	file:
SRI_FORCE_FAILOVER	sentinel.c	68;"	d	file:
SRI_MASTER	sentinel.c	54;"	d	file:
SRI_MASTER_DOWN	sentinel.c	60;"	d	file:
SRI_O_DOWN	sentinel.c	59;"	d	file:
SRI_PROMOTED	sentinel.c	64;"	d	file:
SRI_RECONF_DONE	sentinel.c	67;"	d	file:
SRI_RECONF_INPROG	sentinel.c	66;"	d	file:
SRI_RECONF_SENT	sentinel.c	65;"	d	file:
SRI_SCRIPT_KILL_SENT	sentinel.c	69;"	d	file:
SRI_SENTINEL	sentinel.c	56;"	d	file:
SRI_SLAVE	sentinel.c	55;"	d	file:
SRI_S_DOWN	sentinel.c	58;"	d	file:
SWAPINIT	pqsort.c	65;"	d	file:
SYNC_CMD_FULL	replication.c	1164;"	d	file:
SYNC_CMD_READ	replication.c	1162;"	d	file:
SYNC_CMD_WRITE	replication.c	1163;"	d	file:
THPGetAnonHugePagesSize	latency.c	/^int THPGetAnonHugePagesSize(void) {$/;"	f
THPIsEnabled	latency.c	/^int THPIsEnabled(void) {$/;"	f
TYPE_HASH	gateway-back.c	1640;"	d	file:
TYPE_HASH	gateway-lib.c	1640;"	d	file:
TYPE_HASH	redis-cli.c	1563;"	d	file:
TYPE_HASH	redis-cli2.c	1894;"	d	file:
TYPE_HASH	redis-gateway2.c	1563;"	d	file:
TYPE_LIST	gateway-back.c	1638;"	d	file:
TYPE_LIST	gateway-lib.c	1638;"	d	file:
TYPE_LIST	redis-cli.c	1561;"	d	file:
TYPE_LIST	redis-cli2.c	1892;"	d	file:
TYPE_LIST	redis-gateway2.c	1561;"	d	file:
TYPE_NONE	gateway-back.c	1642;"	d	file:
TYPE_NONE	gateway-lib.c	1642;"	d	file:
TYPE_NONE	redis-cli.c	1565;"	d	file:
TYPE_NONE	redis-cli2.c	1896;"	d	file:
TYPE_NONE	redis-gateway2.c	1565;"	d	file:
TYPE_SET	gateway-back.c	1639;"	d	file:
TYPE_SET	gateway-lib.c	1639;"	d	file:
TYPE_SET	redis-cli.c	1562;"	d	file:
TYPE_SET	redis-cli2.c	1893;"	d	file:
TYPE_SET	redis-gateway2.c	1562;"	d	file:
TYPE_STRING	gateway-back.c	1637;"	d	file:
TYPE_STRING	gateway-lib.c	1637;"	d	file:
TYPE_STRING	redis-cli.c	1560;"	d	file:
TYPE_STRING	redis-cli2.c	1891;"	d	file:
TYPE_STRING	redis-gateway2.c	1560;"	d	file:
TYPE_ZSET	gateway-back.c	1641;"	d	file:
TYPE_ZSET	gateway-lib.c	1641;"	d	file:
TYPE_ZSET	redis-cli.c	1564;"	d	file:
TYPE_ZSET	redis-cli2.c	1895;"	d	file:
TYPE_ZSET	redis-gateway2.c	1564;"	d	file:
ULONG_ONEZERO	memtest.c	52;"	d	file:
ULONG_ONEZERO	memtest.c	55;"	d	file:
ULONG_ZEROONE	memtest.c	53;"	d	file:
ULONG_ZEROONE	memtest.c	56;"	d	file:
X0	rand.c	54;"	d	file:
X1	rand.c	55;"	d	file:
X2	rand.c	56;"	d	file:
ZADD_CH	t_zset.c	1178;"	d	file:
ZADD_INCR	t_zset.c	1175;"	d	file:
ZADD_NONE	t_zset.c	1174;"	d	file:
ZADD_NX	t_zset.c	1176;"	d	file:
ZADD_XX	t_zset.c	1177;"	d	file:
ZIPLIST_BYTES	ziplist.c	142;"	d	file:
ZIPLIST_ENTRY_END	ziplist.c	148;"	d	file:
ZIPLIST_ENTRY_HEAD	ziplist.c	146;"	d	file:
ZIPLIST_ENTRY_TAIL	ziplist.c	147;"	d	file:
ZIPLIST_HEADER_SIZE	ziplist.c	145;"	d	file:
ZIPLIST_INCR_LENGTH	ziplist.c	152;"	d	file:
ZIPLIST_LENGTH	ziplist.c	144;"	d	file:
ZIPLIST_TAIL_OFFSET	ziplist.c	143;"	d	file:
ZIPMAP_BIGLEN	zipmap.c	83;"	d	file:
ZIPMAP_END	zipmap.c	84;"	d	file:
ZIPMAP_LEN_BYTES	zipmap.c	93;"	d	file:
ZIPMAP_VALUE_MAX_FREE	zipmap.c	88;"	d	file:
ZIP_BIGLEN	ziplist.c	116;"	d	file:
ZIP_DECODE_LENGTH	ziplist.c	226;"	d	file:
ZIP_DECODE_PREVLEN	ziplist.c	289;"	d	file:
ZIP_DECODE_PREVLENSIZE	ziplist.c	279;"	d	file:
ZIP_END	ziplist.c	115;"	d	file:
ZIP_ENTRY_ENCODING	ziplist.c	167;"	d	file:
ZIP_INT_16B	ziplist.c	124;"	d	file:
ZIP_INT_24B	ziplist.c	127;"	d	file:
ZIP_INT_32B	ziplist.c	125;"	d	file:
ZIP_INT_64B	ziplist.c	126;"	d	file:
ZIP_INT_8B	ziplist.c	128;"	d	file:
ZIP_INT_IMM_MASK	ziplist.c	130;"	d	file:
ZIP_INT_IMM_MAX	ziplist.c	132;"	d	file:
ZIP_INT_IMM_MIN	ziplist.c	131;"	d	file:
ZIP_INT_IMM_VAL	ziplist.c	133;"	d	file:
ZIP_INT_MASK	ziplist.c	120;"	d	file:
ZIP_IS_STR	ziplist.c	139;"	d	file:
ZIP_STR_06B	ziplist.c	121;"	d	file:
ZIP_STR_14B	ziplist.c	122;"	d	file:
ZIP_STR_32B	ziplist.c	123;"	d	file:
ZIP_STR_MASK	ziplist.c	119;"	d	file:
ZRANGE_LEX	t_zset.c	1442;"	d	file:
ZRANGE_RANK	t_zset.c	1440;"	d	file:
ZRANGE_SCORE	t_zset.c	1441;"	d	file:
_GNU_SOURCE	setproctitle.c	29;"	d	file:
__ziplistCascadeUpdate	ziplist.c	/^static unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f	file:
__ziplistDelete	ziplist.c	/^static unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f	file:
__ziplistInsert	ziplist.c	/^static unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f	file:
_addReplyObjectToList	networking.c	/^void _addReplyObjectToList(redisClient *c, robj *o) {$/;"	f
_addReplySdsToList	networking.c	/^void _addReplySdsToList(redisClient *c, sds s) {$/;"	f
_addReplyStringToList	networking.c	/^void _addReplyStringToList(redisClient *c, char *s, size_t len) {$/;"	f
_addReplyToBuffer	networking.c	/^int _addReplyToBuffer(redisClient *c, char *s, size_t len) {$/;"	f
_anetTcpServer	anet.c	/^static int _anetTcpServer(char *err, int port, char *bindaddr, int af, int backlog)$/;"	f	file:
_assert	intset.c	/^void _assert(char *estr, char *file, int line) {$/;"	f
_buf	t_zset.c	/^    unsigned char _buf[32]; \/* Private buffer. *\/$/;"	m	struct:__anon17	file:
_client	redis-benchmark.c	/^typedef struct _client {$/;"	s	file:
_dictClear	dict.c	/^int _dictClear(dict *d, dictht *ht, void(callback)(void *)) {$/;"	f
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictInit	dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictRehashStep	dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
_intsetGet	intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:
_intsetGetEncoded	intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:
_intsetSet	intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:
_intsetValueEncoding	intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:
_iterset	t_zset.c	/^        union _iterset {$/;"	u	union:__anon11::__anon12	file:
_iterzset	t_zset.c	/^        union _iterzset {$/;"	u	union:__anon11::__anon12	file:
_pqsort	pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	file:
_redisAssert	debug.c	/^void _redisAssert(char *estr, char *file, int line) {$/;"	f
_redisAssertPrintClientInfo	debug.c	/^void _redisAssertPrintClientInfo(redisClient *c) {$/;"	f
_redisAssertPrintObject	debug.c	/^void _redisAssertPrintObject(robj *o) {$/;"	f
_redisAssertWithInfo	debug.c	/^void _redisAssertWithInfo(redisClient *c, robj *o, char *estr, char *file, int line) {$/;"	f
_redisPanic	debug.c	/^void _redisPanic(char *msg, char *file, int line) {$/;"	f
_rfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
_wfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
a	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
acceptCommonHandler	networking.c	/^static void acceptCommonHandler(int fd, int flags) {$/;"	f	file:
acceptTcpHandler	networking.c	/^void acceptTcpHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
acceptUnixHandler	networking.c	/^void acceptUnixHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
activeExpireCycle	gateway.c	/^void activeExpireCycle(int type) {$/;"	f
activeExpireCycle	redis-gateway.c	/^void activeExpireCycle(int type) {$/;"	f
activeExpireCycle	redis.c	/^void activeExpireCycle(int type) {$/;"	f
activeExpireCycleTryExpire	gateway.c	/^int activeExpireCycleTryExpire(redisDb *db, dictEntry *de, long long now) {$/;"	f
activeExpireCycleTryExpire	redis-gateway.c	/^int activeExpireCycleTryExpire(redisDb *db, dictEntry *de, long long now) {$/;"	f
activeExpireCycleTryExpire	redis.c	/^int activeExpireCycleTryExpire(redisDb *db, dictEntry *de, long long now) {$/;"	f
addDeferredMultiBulkLength	networking.c	/^void *addDeferredMultiBulkLength(redisClient *c) {$/;"	f
addHashFieldToReply	t_hash.c	/^static void addHashFieldToReply(redisClient *c, robj *o, robj *field) {$/;"	f	file:
addHashIteratorCursorToReply	t_hash.c	/^static void addHashIteratorCursorToReply(redisClient *c, hashTypeIterator *hi, int what) {$/;"	f	file:
addReply	networking.c	/^void addReply(redisClient *c, robj *obj) {$/;"	f
addReplyBulk	networking.c	/^void addReplyBulk(redisClient *c, robj *obj) {$/;"	f
addReplyBulkCBuffer	networking.c	/^void addReplyBulkCBuffer(redisClient *c, void *p, size_t len) {$/;"	f
addReplyBulkCString	networking.c	/^void addReplyBulkCString(redisClient *c, char *s) {$/;"	f
addReplyBulkLen	networking.c	/^void addReplyBulkLen(redisClient *c, robj *obj) {$/;"	f
addReplyBulkLongLong	networking.c	/^void addReplyBulkLongLong(redisClient *c, long long ll) {$/;"	f
addReplyCommand	gateway.c	/^void addReplyCommand(redisClient *c, struct redisCommand *cmd) {$/;"	f
addReplyCommand	redis-gateway.c	/^void addReplyCommand(redisClient *c, struct redisCommand *cmd) {$/;"	f
addReplyCommand	redis.c	/^void addReplyCommand(redisClient *c, struct redisCommand *cmd) {$/;"	f
addReplyCommandFlag	gateway.c	/^int addReplyCommandFlag(redisClient *c, struct redisCommand *cmd, int f, char *reply) {$/;"	f
addReplyCommandFlag	redis-gateway.c	/^int addReplyCommandFlag(redisClient *c, struct redisCommand *cmd, int f, char *reply) {$/;"	f
addReplyCommandFlag	redis.c	/^int addReplyCommandFlag(redisClient *c, struct redisCommand *cmd, int f, char *reply) {$/;"	f
addReplyDictOfRedisInstances	sentinel.c	/^void addReplyDictOfRedisInstances(redisClient *c, dict *instances) {$/;"	f
addReplyDouble	networking.c	/^void addReplyDouble(redisClient *c, double d) {$/;"	f
addReplyError	networking.c	/^void addReplyError(redisClient *c, char *err) {$/;"	f
addReplyErrorFormat	networking.c	/^void addReplyErrorFormat(redisClient *c, const char *fmt, ...) {$/;"	f
addReplyErrorLength	networking.c	/^void addReplyErrorLength(redisClient *c, char *s, size_t len) {$/;"	f
addReplyLongLong	networking.c	/^void addReplyLongLong(redisClient *c, long long ll) {$/;"	f
addReplyLongLongWithPrefix	networking.c	/^void addReplyLongLongWithPrefix(redisClient *c, long long ll, char prefix) {$/;"	f
addReplyMultiBulkLen	networking.c	/^void addReplyMultiBulkLen(redisClient *c, long length) {$/;"	f
addReplyReplicationBacklog	replication.c	/^long long addReplyReplicationBacklog(redisClient *c, long long offset) {$/;"	f
addReplySds	networking.c	/^void addReplySds(redisClient *c, sds s) {$/;"	f
addReplySentinelRedisInstance	sentinel.c	/^void addReplySentinelRedisInstance(redisClient *c, sentinelRedisInstance *ri) {$/;"	f
addReplyStatus	networking.c	/^void addReplyStatus(redisClient *c, char *status) {$/;"	f
addReplyStatusFormat	networking.c	/^void addReplyStatusFormat(redisClient *c, const char *fmt, ...) {$/;"	f
addReplyStatusLength	networking.c	/^void addReplyStatusLength(redisClient *c, char *s, size_t len) {$/;"	f
addReplyString	networking.c	/^void addReplyString(redisClient *c, char *s, size_t len) {$/;"	f
addr	sentinel.c	/^    sentinelAddr *addr; \/* Master host. *\/$/;"	m	struct:sentinelRedisInstance	file:
adjustOpenFilesLimit	gateway.c	/^void adjustOpenFilesLimit(void) {$/;"	f
adjustOpenFilesLimit	redis-gateway.c	/^void adjustOpenFilesLimit(void) {$/;"	f
adjustOpenFilesLimit	redis.c	/^void adjustOpenFilesLimit(void) {$/;"	f
aeAddMillisecondsToNow	ae.c	/^static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {$/;"	f	file:
aeApiAddEvent	ae_epoll.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	ae_evport.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	ae_kqueue.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	ae_select.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAssociate	ae_evport.c	/^static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {$/;"	f	file:
aeApiCreate	ae_epoll.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	ae_evport.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	ae_kqueue.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	ae_select.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiDelEvent	ae_epoll.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {$/;"	f	file:
aeApiDelEvent	ae_evport.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiDelEvent	ae_kqueue.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiDelEvent	ae_select.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiFree	ae_epoll.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	ae_evport.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	ae_kqueue.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	ae_select.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiLookupPending	ae_evport.c	/^static int aeApiLookupPending(aeApiState *state, int fd) {$/;"	f	file:
aeApiName	ae_epoll.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	ae_evport.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	ae_kqueue.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	ae_select.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiPoll	ae_epoll.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	ae_evport.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	ae_kqueue.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	ae_select.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiResize	ae_epoll.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiResize	ae_evport.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiResize	ae_kqueue.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiResize	ae_select.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiState	ae_epoll.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_epoll.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	ae_evport.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_evport.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	ae_kqueue.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_kqueue.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	ae_select.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_select.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeCreateEventLoop	ae.c	/^aeEventLoop *aeCreateEventLoop(int setsize) {$/;"	f
aeCreateFileEvent	ae.c	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	f
aeCreateTimeEvent	ae.c	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	f
aeDeleteEventLoop	ae.c	/^void aeDeleteEventLoop(aeEventLoop *eventLoop) {$/;"	f
aeDeleteFileEvent	ae.c	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)$/;"	f
aeDeleteTimeEvent	ae.c	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)$/;"	f
aeGetApiName	ae.c	/^char *aeGetApiName(void) {$/;"	f
aeGetFileEvents	ae.c	/^int aeGetFileEvents(aeEventLoop *eventLoop, int fd) {$/;"	f
aeGetSetSize	ae.c	/^int aeGetSetSize(aeEventLoop *eventLoop) {$/;"	f
aeGetTime	ae.c	/^static void aeGetTime(long *seconds, long *milliseconds)$/;"	f	file:
aeMain	ae.c	/^void aeMain(aeEventLoop *eventLoop) {$/;"	f
aeProcessEvents	ae.c	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags)$/;"	f
aeResizeSetSize	ae.c	/^int aeResizeSetSize(aeEventLoop *eventLoop, int setsize) {$/;"	f
aeSearchNearestTimer	ae.c	/^static aeTimeEvent *aeSearchNearestTimer(aeEventLoop *eventLoop)$/;"	f	file:
aeSetBeforeSleepProc	ae.c	/^void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep) {$/;"	f
aeStop	ae.c	/^void aeStop(aeEventLoop *eventLoop) {$/;"	f
aeWait	ae.c	/^int aeWait(int fd, int mask, long long milliseconds) {$/;"	f
alsoPropagate	gateway.c	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
alsoPropagate	redis-gateway.c	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
alsoPropagate	redis.c	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
analyzeLatencyForEvent	latency.c	/^void analyzeLatencyForEvent(char *event, struct latencyStats *ls) {$/;"	f
anetBlock	anet.c	/^int anetBlock(char *err, int fd) {$/;"	f
anetCreateSocket	anet.c	/^static int anetCreateSocket(char *err, int domain) {$/;"	f	file:
anetDisableTcpNoDelay	anet.c	/^int anetDisableTcpNoDelay(char *err, int fd)$/;"	f
anetEnableTcpNoDelay	anet.c	/^int anetEnableTcpNoDelay(char *err, int fd)$/;"	f
anetGenericAccept	anet.c	/^static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {$/;"	f	file:
anetGenericResolve	anet.c	/^int anetGenericResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len,$/;"	f
anetKeepAlive	anet.c	/^int anetKeepAlive(char *err, int fd, int interval)$/;"	f
anetListen	anet.c	/^static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {$/;"	f	file:
anetNonBlock	anet.c	/^int anetNonBlock(char *err, int fd) {$/;"	f
anetPeerToString	anet.c	/^int anetPeerToString(int fd, char *ip, size_t ip_len, int *port) {$/;"	f
anetRead	anet.c	/^int anetRead(int fd, char *buf, int count)$/;"	f
anetResolve	anet.c	/^int anetResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f
anetResolveIP	anet.c	/^int anetResolveIP(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f
anetSendTimeout	anet.c	/^int anetSendTimeout(char *err, int fd, long long ms) {$/;"	f
anetSetBlock	anet.c	/^int anetSetBlock(char *err, int fd, int non_block) {$/;"	f
anetSetError	anet.c	/^static void anetSetError(char *err, const char *fmt, ...)$/;"	f	file:
anetSetReuseAddr	anet.c	/^static int anetSetReuseAddr(char *err, int fd) {$/;"	f	file:
anetSetSendBuffer	anet.c	/^int anetSetSendBuffer(char *err, int fd, int buffsize)$/;"	f
anetSetTcpNoDelay	anet.c	/^static int anetSetTcpNoDelay(char *err, int fd, int val)$/;"	f	file:
anetSockName	anet.c	/^int anetSockName(int fd, char *ip, size_t ip_len, int *port) {$/;"	f
anetTcp6Server	anet.c	/^int anetTcp6Server(char *err, int port, char *bindaddr, int backlog)$/;"	f
anetTcpAccept	anet.c	/^int anetTcpAccept(char *err, int s, char *ip, size_t ip_len, int *port) {$/;"	f
anetTcpConnect	anet.c	/^int anetTcpConnect(char *err, char *addr, int port)$/;"	f
anetTcpGenericConnect	anet.c	/^static int anetTcpGenericConnect(char *err, char *addr, int port,$/;"	f	file:
anetTcpKeepAlive	anet.c	/^int anetTcpKeepAlive(char *err, int fd)$/;"	f
anetTcpNonBlockBestEffortBindConnect	anet.c	/^int anetTcpNonBlockBestEffortBindConnect(char *err, char *addr, int port,$/;"	f
anetTcpNonBlockBindConnect	anet.c	/^int anetTcpNonBlockBindConnect(char *err, char *addr, int port,$/;"	f
anetTcpNonBlockConnect	anet.c	/^int anetTcpNonBlockConnect(char *err, char *addr, int port)$/;"	f
anetTcpServer	anet.c	/^int anetTcpServer(char *err, int port, char *bindaddr, int backlog)$/;"	f
anetUnixAccept	anet.c	/^int anetUnixAccept(char *err, int s) {$/;"	f
anetUnixConnect	anet.c	/^int anetUnixConnect(char *err, char *path)$/;"	f
anetUnixGenericConnect	anet.c	/^int anetUnixGenericConnect(char *err, char *path, int flags)$/;"	f
anetUnixNonBlockConnect	anet.c	/^int anetUnixNonBlockConnect(char *err, char *path)$/;"	f
anetUnixServer	anet.c	/^int anetUnixServer(char *err, char *path, mode_t perm, int backlog)$/;"	f
anetV6Only	anet.c	/^static int anetV6Only(char *err, int s) {$/;"	f	file:
anetWrite	anet.c	/^int anetWrite(int fd, char *buf, int count)$/;"	f
announce_ip	sentinel.c	/^    char *announce_ip;      \/* IP addr that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:
announce_port	sentinel.c	/^    int announce_port;      \/* Port that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:
aofChildPipeReadable	aof.c	/^void aofChildPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
aofChildWriteDiffData	aof.c	/^void aofChildWriteDiffData(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
aofClosePipes	aof.c	/^void aofClosePipes(void) {$/;"	f
aofCreatePipes	aof.c	/^int aofCreatePipes(void) {$/;"	f
aofReadDiffFromParent	aof.c	/^ssize_t aofReadDiffFromParent(void) {$/;"	f
aofRemoveTempFile	aof.c	/^void aofRemoveTempFile(pid_t childpid) {$/;"	f
aofRewriteBufferAppend	aof.c	/^void aofRewriteBufferAppend(unsigned char *s, unsigned long len) {$/;"	f
aofRewriteBufferReset	aof.c	/^void aofRewriteBufferReset(void) {$/;"	f
aofRewriteBufferSize	aof.c	/^unsigned long aofRewriteBufferSize(void) {$/;"	f
aofRewriteBufferWrite	aof.c	/^ssize_t aofRewriteBufferWrite(int fd) {$/;"	f
aofUpdateCurrentSize	aof.c	/^void aofUpdateCurrentSize(void) {$/;"	f
aof_background_fsync	aof.c	/^void aof_background_fsync(int fd) {$/;"	f
aofrwblock	aof.c	/^typedef struct aofrwblock {$/;"	s	file:
aofrwblock	aof.c	/^} aofrwblock;$/;"	t	typeref:struct:aofrwblock	file:
appendCommand	gateway-front.c	/^void appendCommand(redisClient *c) {$/;"	f
appendCommand	t_string.c	/^void appendCommand(redisClient *c) {$/;"	f
appendServerSaveParams	config.c	/^void appendServerSaveParams(time_t seconds, int changes) {$/;"	f
arg0	setproctitle.c	/^	const char *arg0;$/;"	m	struct:__anon10	file:
arg1	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:
arg2	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:
arg3	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:
argc	gateway-back.c	/^    int argc;$/;"	m	struct:__anon2	file:
argc	gateway-lib.c	/^    int argc;$/;"	m	struct:__anon3	file:
argc	redis-cli.c	/^    int argc;$/;"	m	struct:__anon8	file:
argc	redis-cli2.c	/^    int argc;$/;"	m	struct:__anon7	file:
argc	redis-gateway2.c	/^    int argc;$/;"	m	struct:__anon9	file:
argv	gateway-back.c	/^    sds *argv;$/;"	m	struct:__anon2	file:
argv	gateway-lib.c	/^    sds *argv;$/;"	m	struct:__anon3	file:
argv	redis-cli.c	/^    sds *argv;$/;"	m	struct:__anon8	file:
argv	redis-cli2.c	/^    sds *argv;$/;"	m	struct:__anon7	file:
argv	redis-gateway2.c	/^    sds *argv;$/;"	m	struct:__anon9	file:
argv	sentinel.c	/^    char **argv;            \/* Arguments to call the script. *\/$/;"	m	struct:sentinelScriptJob	file:
askingCommand	cluster.c	/^void askingCommand(redisClient *c) {$/;"	f
assert	intset.c	310;"	d	file:
asyncCloseClientOnOutputBufferLimitReached	networking.c	/^void asyncCloseClientOnOutputBufferLimitReached(redisClient *c) {$/;"	f
auth	gateway-back.c	/^    char *auth;$/;"	m	struct:config	file:
auth	gateway-lib.c	/^    char *auth;$/;"	m	struct:config	file:
auth	redis-benchmark.c	/^    char *auth;$/;"	m	struct:config	file:
auth	redis-cli.c	/^    char *auth;$/;"	m	struct:config	file:
auth	redis-cli2.c	/^    char *auth;$/;"	m	struct:config	file:
auth	redis-gateway2.c	/^    char *auth;$/;"	m	struct:config	file:
authCommand	gateway.c	/^void authCommand(redisClient *c) {$/;"	f
authCommand	redis-gateway.c	/^void authCommand(redisClient *c) {$/;"	f
authCommand	redis.c	/^void authCommand(redisClient *c) {$/;"	f
auth_pass	sentinel.c	/^    char *auth_pass;    \/* Password to use for AUTH against master & slaves. *\/$/;"	m	struct:sentinelRedisInstance	file:
backgroundRewriteDoneHandler	aof.c	/^void backgroundRewriteDoneHandler(int exitcode, int bysignal) {$/;"	f
backgroundSaveDoneHandler	rdb.c	/^void backgroundSaveDoneHandler(int exitcode, int bysignal) {$/;"	f
backgroundSaveDoneHandlerDisk	rdb.c	/^void backgroundSaveDoneHandlerDisk(int exitcode, int bysignal) {$/;"	f
backgroundSaveDoneHandlerSocket	rdb.c	/^void backgroundSaveDoneHandlerSocket(int exitcode, int bysignal) {$/;"	f
base	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon10	file:
beforeSleep	gateway.c	/^void beforeSleep(struct aeEventLoop *eventLoop) {$/;"	f
beforeSleep	redis-gateway.c	/^void beforeSleep(struct aeEventLoop *eventLoop) {$/;"	f
beforeSleep	redis.c	/^void beforeSleep(struct aeEventLoop *eventLoop) {$/;"	f
benchmark	redis-benchmark.c	/^static void benchmark(char *title, char *cmd, int len) {$/;"	f	file:
bgrewriteaofCommand	aof.c	/^void bgrewriteaofCommand(redisClient *c) {$/;"	f
bgsaveCommand	rdb.c	/^void bgsaveCommand(redisClient *c) {$/;"	f
bigkeys	gateway-back.c	/^    int bigkeys;$/;"	m	struct:config	file:
bigkeys	gateway-lib.c	/^    int bigkeys;$/;"	m	struct:config	file:
bigkeys	redis-cli.c	/^    int bigkeys;$/;"	m	struct:config	file:
bigkeys	redis-cli2.c	/^    int bigkeys;$/;"	m	struct:config	file:
bigkeys	redis-gateway2.c	/^    int bigkeys;$/;"	m	struct:config	file:
bioCreateBackgroundJob	bio.c	/^void bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3) {$/;"	f
bioInit	bio.c	/^void bioInit(void) {$/;"	f
bioKillThreads	bio.c	/^void bioKillThreads(void) {$/;"	f
bioPendingJobsOfType	bio.c	/^unsigned long long bioPendingJobsOfType(int type) {$/;"	f
bioProcessBackgroundJobs	bio.c	/^void *bioProcessBackgroundJobs(void *arg) {$/;"	f
bio_condvar	bio.c	/^static pthread_cond_t bio_condvar[REDIS_BIO_NUM_OPS];$/;"	v	file:
bio_job	bio.c	/^struct bio_job {$/;"	s	file:
bio_jobs	bio.c	/^static list *bio_jobs[REDIS_BIO_NUM_OPS];$/;"	v	file:
bio_mutex	bio.c	/^static pthread_mutex_t bio_mutex[REDIS_BIO_NUM_OPS];$/;"	v	file:
bio_pending	bio.c	/^static unsigned long long bio_pending[REDIS_BIO_NUM_OPS];$/;"	v	file:
bio_threads	bio.c	/^static pthread_t bio_threads[REDIS_BIO_NUM_OPS];$/;"	v	file:
bitcountCommand	bitops.c	/^void bitcountCommand(redisClient *c) {$/;"	f
bitmapClearBit	cluster.c	/^void bitmapClearBit(unsigned char *bitmap, int pos) {$/;"	f
bitmapSetBit	cluster.c	/^void bitmapSetBit(unsigned char *bitmap, int pos) {$/;"	f
bitmapTestBit	cluster.c	/^int bitmapTestBit(unsigned char *bitmap, int pos) {$/;"	f
bitopCommand	bitops.c	/^void bitopCommand(redisClient *c) {$/;"	f
bitposCommand	bitops.c	/^void bitposCommand(redisClient *c) {$/;"	f
blk	sha1.c	43;"	d	file:
blk0	sha1.c	36;"	d	file:
blk0	sha1.c	39;"	d	file:
blockClient	blocked.c	/^void blockClient(redisClient *c, int btype) {$/;"	f
blockForKeys	t_list.c	/^void blockForKeys(redisClient *c, robj **keys, int numkeys, mstime_t timeout, robj *target) {$/;"	f
blockingPopGenericCommand	t_list.c	/^void blockingPopGenericCommand(redisClient *c, int where) {$/;"	f
blpopCommand	t_list.c	/^void blpopCommand(redisClient *c) {$/;"	f
brpopCommand	t_list.c	/^void brpopCommand(redisClient *c) {$/;"	f
brpoplpushCommand	t_list.c	/^void brpoplpushCommand(redisClient *c) {$/;"	f
buf	aof.c	/^    char buf[AOF_RW_BUF_BLOCK_SIZE];$/;"	m	struct:aofrwblock	file:
bugReportStart	debug.c	/^void bugReportStart(void) {$/;"	f
bytesToHuman	gateway-back.c	/^void bytesToHuman(char *s, long long n) {$/;"	f
bytesToHuman	gateway-lib.c	/^void bytesToHuman(char *s, long long n) {$/;"	f
bytesToHuman	gateway.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f
bytesToHuman	redis-cli.c	/^void bytesToHuman(char *s, long long n) {$/;"	f
bytesToHuman	redis-cli2.c	/^void bytesToHuman(char *s, long long n) {$/;"	f
bytesToHuman	redis-gateway.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f
bytesToHuman	redis-gateway2.c	/^void bytesToHuman(char *s, long long n) {$/;"	f
bytesToHuman	redis.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f
c	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
call	gateway.c	/^void call(redisClient *c, int flags) {$/;"	f
call	redis-gateway.c	/^void call(redisClient *c, int flags) {$/;"	f
call	redis.c	/^void call(redisClient *c, int flags) {$/;"	f
calloc	zmalloc.c	60;"	d	file:
calloc	zmalloc.c	65;"	d	file:
cancelReplicationHandshake	replication.c	/^int cancelReplicationHandshake(void) {$/;"	f
card	hyperloglog.c	/^    uint8_t card[8];    \/* Cached cardinality, little endian. *\/$/;"	m	struct:hllhdr	file:
catAppendOnlyExpireAtCommand	aof.c	/^sds catAppendOnlyExpireAtCommand(sds buf, struct redisCommand *cmd, robj *key, robj *seconds) {$/;"	f
catAppendOnlyGenericCommand	aof.c	/^sds catAppendOnlyGenericCommand(sds dst, int argc, robj **argv) {$/;"	f
catClientInfoString	networking.c	/^sds catClientInfoString(sds s, redisClient *client) {$/;"	f
cc	sentinel.c	/^    redisAsyncContext *cc; \/* Hiredis context for commands. *\/$/;"	m	struct:sentinelRedisInstance	file:
cc_conn_time	sentinel.c	/^    mstime_t cc_conn_time; \/* cc connection time. *\/$/;"	m	struct:sentinelRedisInstance	file:
character	gateway-back.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:
character	gateway-lib.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:
character	redis-cli.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:
character	redis-cli2.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:
character	redis-gateway2.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:
charset	sparkline.c	/^static char charset[] = "_-`";$/;"	v	file:
charset_fill	sparkline.c	/^static char charset_fill[] = "_o#";$/;"	v	file:
charset_len	sparkline.c	/^static int charset_len = sizeof(charset)-1;$/;"	v	file:
checkClientOutputBufferLimits	networking.c	/^int checkClientOutputBufferLimits(redisClient *c) {$/;"	f
checkConsistency	intset.c	/^void checkConsistency(intset *is) {$/;"	f
checkForSentinelMode	gateway.c	/^int checkForSentinelMode(int argc, char **argv) {$/;"	f
checkForSentinelMode	redis-gateway.c	/^int checkForSentinelMode(int argc, char **argv) {$/;"	f
checkForSentinelMode	redis.c	/^int checkForSentinelMode(int argc, char **argv) {$/;"	f
checkStringLength	gateway-front.c	/^static int checkStringLength(redisClient *c, long long size) {$/;"	f	file:
checkStringLength	t_string.c	/^static int checkStringLength(redisClient *c, long long size) {$/;"	f	file:
checkTcpBacklogSettings	gateway.c	/^void checkTcpBacklogSettings(void) {$/;"	f
checkTcpBacklogSettings	redis-gateway.c	/^void checkTcpBacklogSettings(void) {$/;"	f
checkTcpBacklogSettings	redis.c	/^void checkTcpBacklogSettings(void) {$/;"	f
checkType	object.c	/^int checkType(redisClient *c, robj *o, int type) {$/;"	f
checkType	redis-check-dump.c	/^int checkType(unsigned char t) {$/;"	f
clearNodeFailureIfNeeded	cluster.c	/^void clearNodeFailureIfNeeded(clusterNode *node) {$/;"	f
cliAuth	gateway-back.c	/^static int cliAuth(int sn) {$/;"	f	file:
cliAuth	gateway-lib.c	/^static int cliAuth(int sn) {$/;"	f	file:
cliAuth	redis-cli.c	/^static int cliAuth(void) {$/;"	f	file:
cliAuth	redis-cli2.c	/^static int cliAuth(void) {$/;"	f	file:
cliAuth	redis-gateway2.c	/^static int cliAuth(void) {$/;"	f	file:
cliConnect	gateway-back.c	/^static int cliConnect(int force, int sn) {$/;"	f	file:
cliConnect	gateway-lib.c	/^static int cliConnect(int force, int sn) {$/;"	f	file:
cliConnect	redis-cli.c	/^static int cliConnect(int force) {$/;"	f	file:
cliConnect	redis-cli2.c	/^static int cliConnect(redisContext *c, int force, int sn) {$/;"	f	file:
cliConnect	redis-gateway2.c	/^static int cliConnect(int force) {$/;"	f	file:
cliFormatReplyCSV	gateway-back.c	/^static sds cliFormatReplyCSV(redisReply *r, int sn) {$/;"	f	file:
cliFormatReplyCSV	gateway-lib.c	/^static sds cliFormatReplyCSV(redisReply *r, int sn) {$/;"	f	file:
cliFormatReplyCSV	redis-cli.c	/^static sds cliFormatReplyCSV(redisReply *r) {$/;"	f	file:
cliFormatReplyCSV	redis-cli2.c	/^static sds cliFormatReplyCSV(redisReply *r) {$/;"	f	file:
cliFormatReplyCSV	redis-gateway2.c	/^static sds cliFormatReplyCSV(redisReply *r) {$/;"	f	file:
cliFormatReplyRaw	gateway-back.c	/^static sds cliFormatReplyRaw(redisReply *r, int sn) {$/;"	f	file:
cliFormatReplyRaw	gateway-lib.c	/^static sds cliFormatReplyRaw(redisReply *r, int sn) {$/;"	f	file:
cliFormatReplyRaw	redis-cli.c	/^static sds cliFormatReplyRaw(redisReply *r) {$/;"	f	file:
cliFormatReplyRaw	redis-cli2.c	/^static sds cliFormatReplyRaw(redisReply *r) {$/;"	f	file:
cliFormatReplyRaw	redis-gateway2.c	/^static sds cliFormatReplyRaw(redisReply *r) {$/;"	f	file:
cliFormatReplyTTY	gateway-back.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:
cliFormatReplyTTY	gateway-lib.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:
cliFormatReplyTTY	redis-cli.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:
cliFormatReplyTTY	redis-cli2.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:
cliFormatReplyTTY	redis-gateway2.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:
cliInitHelp	gateway-back.c	/^static void cliInitHelp() {$/;"	f	file:
cliInitHelp	gateway-lib.c	/^static void cliInitHelp() {$/;"	f	file:
cliInitHelp	redis-cli.c	/^static void cliInitHelp(void) {$/;"	f	file:
cliInitHelp	redis-cli2.c	/^static void cliInitHelp(void) {$/;"	f	file:
cliInitHelp	redis-gateway2.c	/^static void cliInitHelp(void) {$/;"	f	file:
cliOutputCommandHelp	gateway-back.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:
cliOutputCommandHelp	gateway-lib.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:
cliOutputCommandHelp	redis-cli.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:
cliOutputCommandHelp	redis-cli2.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:
cliOutputCommandHelp	redis-gateway2.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:
cliOutputGenericHelp	gateway-back.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:
cliOutputGenericHelp	gateway-lib.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:
cliOutputGenericHelp	redis-cli.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:
cliOutputGenericHelp	redis-cli2.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:
cliOutputGenericHelp	redis-gateway2.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:
cliOutputHelp	gateway-back.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:
cliOutputHelp	gateway-lib.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:
cliOutputHelp	redis-cli.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:
cliOutputHelp	redis-cli2.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:
cliOutputHelp	redis-gateway2.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:
cliPrintContextError	gateway-back.c	/^static void cliPrintContextError(int sn) {$/;"	f	file:
cliPrintContextError	gateway-lib.c	/^static void cliPrintContextError(int sn) {$/;"	f	file:
cliPrintContextError	redis-cli.c	/^static void cliPrintContextError(void) {$/;"	f	file:
cliPrintContextError	redis-cli2.c	/^static void cliPrintContextError(struct redisContext *c, int sn) {$/;"	f	file:
cliPrintContextError	redis-gateway2.c	/^static void cliPrintContextError(void) {$/;"	f	file:
cliReadReply	gateway-back.c	/^static int cliReadReply(int output_raw_strings, int sn) {$/;"	f	file:
cliReadReply	gateway-lib.c	/^static int cliReadReply(int output_raw_strings, int sn) {$/;"	f	file:
cliReadReply	redis-cli.c	/^static int cliReadReply(int output_raw_strings) {$/;"	f	file:
cliReadReply	redis-cli2.c	/^static int cliReadReply(int output_raw_strings,int sn) {$/;"	f	file:
cliReadReply	redis-gateway2.c	/^static int cliReadReply(int output_raw_strings) {$/;"	f	file:
cliRefreshPrompt	gateway-back.c	/^static void cliRefreshPrompt(int sn) {$/;"	f	file:
cliRefreshPrompt	gateway-lib.c	/^static void cliRefreshPrompt(int sn) {$/;"	f	file:
cliRefreshPrompt	redis-cli.c	/^static void cliRefreshPrompt(void) {$/;"	f	file:
cliRefreshPrompt	redis-cli2.c	/^static void cliRefreshPrompt(int sn) {$/;"	f	file:
cliRefreshPrompt	redis-gateway2.c	/^static void cliRefreshPrompt(void) {$/;"	f	file:
cliSelect	gateway-back.c	/^static int cliSelect(int sn) {$/;"	f	file:
cliSelect	gateway-lib.c	/^static int cliSelect(int sn) {$/;"	f	file:
cliSelect	redis-cli.c	/^static int cliSelect(void) {$/;"	f	file:
cliSelect	redis-cli2.c	/^static int cliSelect(void) {$/;"	f	file:
cliSelect	redis-gateway2.c	/^static int cliSelect(void) {$/;"	f	file:
cliSendCommand	gateway-back.c	/^static int cliSendCommand(int argc, char **argv, int repeat, int sn) {$/;"	f	file:
cliSendCommand	gateway-lib.c	/^static int cliSendCommand(int argc, char **argv, int repeat, int sn) {$/;"	f	file:
cliSendCommand	redis-cli.c	/^static int cliSendCommand(int argc, char **argv, int repeat) {$/;"	f	file:
cliSendCommand	redis-cli2.c	/^static int cliSendCommand(int argc, char **argv, int repeat, int sn) {$/;"	f	file:
cliSendCommand	redis-gateway2.c	/^static int cliSendCommand(int argc, char **argv, int repeat) {$/;"	f	file:
cliVersion	gateway-back.c	/^static sds cliVersion(void) {$/;"	f	file:
cliVersion	gateway-lib.c	/^static sds cliVersion(void) {$/;"	f	file:
cliVersion	redis-cli.c	/^static sds cliVersion(void) {$/;"	f	file:
cliVersion	redis-cli2.c	/^static sds cliVersion(void) {$/;"	f	file:
cliVersion	redis-gateway2.c	/^static sds cliVersion(void) {$/;"	f	file:
client	redis-benchmark.c	/^} *client;$/;"	t	typeref:struct:_client	file:
clientBufferLimitsDefaults	config.c	/^clientBufferLimitsConfig clientBufferLimitsDefaults[REDIS_CLIENT_TYPE_COUNT] = {$/;"	v
clientCommand	networking.c	/^void clientCommand(redisClient *c) {$/;"	f
clientDone	redis-benchmark.c	/^static void clientDone(client c) {$/;"	f	file:
clientSubscriptionsCount	pubsub.c	/^int clientSubscriptionsCount(redisClient *c) {$/;"	f
client_reconfig_script	sentinel.c	/^    char *client_reconfig_script;$/;"	m	struct:sentinelRedisInstance	file:
clients	redis-benchmark.c	/^    list *clients;$/;"	m	struct:config	file:
clientsArePaused	networking.c	/^int clientsArePaused(void) {$/;"	f
clientsCron	gateway.c	/^void clientsCron(void) {$/;"	f
clientsCron	redis-gateway.c	/^void clientsCron(void) {$/;"	f
clientsCron	redis.c	/^void clientsCron(void) {$/;"	f
clientsCronHandleTimeout	gateway.c	/^int clientsCronHandleTimeout(redisClient *c, mstime_t now_ms) {$/;"	f
clientsCronHandleTimeout	redis-gateway.c	/^int clientsCronHandleTimeout(redisClient *c, mstime_t now_ms) {$/;"	f
clientsCronHandleTimeout	redis.c	/^int clientsCronHandleTimeout(redisClient *c, mstime_t now_ms) {$/;"	f
clientsCronResizeQueryBuffer	gateway.c	/^int clientsCronResizeQueryBuffer(redisClient *c) {$/;"	f
clientsCronResizeQueryBuffer	redis-gateway.c	/^int clientsCronResizeQueryBuffer(redisClient *c) {$/;"	f
clientsCronResizeQueryBuffer	redis.c	/^int clientsCronResizeQueryBuffer(redisClient *c) {$/;"	f
closeListeningSockets	gateway.c	/^void closeListeningSockets(int unlink_unix_socket) {$/;"	f
closeListeningSockets	redis-gateway.c	/^void closeListeningSockets(int unlink_unix_socket) {$/;"	f
closeListeningSockets	redis.c	/^void closeListeningSockets(int unlink_unix_socket) {$/;"	f
clusterAcceptHandler	cluster.c	/^void clusterAcceptHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
clusterAddNode	cluster.c	/^int clusterAddNode(clusterNode *node) {$/;"	f
clusterAddSlot	cluster.c	/^int clusterAddSlot(clusterNode *n, int slot) {$/;"	f
clusterBeforeSleep	cluster.c	/^void clusterBeforeSleep(void) {$/;"	f
clusterBlacklistAddNode	cluster.c	/^void clusterBlacklistAddNode(clusterNode *node) {$/;"	f
clusterBlacklistCleanup	cluster.c	/^void clusterBlacklistCleanup(void) {$/;"	f
clusterBlacklistExists	cluster.c	/^int clusterBlacklistExists(char *nodeid) {$/;"	f
clusterBroadcastMessage	cluster.c	/^void clusterBroadcastMessage(void *buf, size_t len) {$/;"	f
clusterBroadcastPong	cluster.c	/^void clusterBroadcastPong(int target) {$/;"	f
clusterBuildMessageHdr	cluster.c	/^void clusterBuildMessageHdr(clusterMsg *hdr, int type) {$/;"	f
clusterBumpConfigEpochWithoutConsensus	cluster.c	/^int clusterBumpConfigEpochWithoutConsensus(void) {$/;"	f
clusterCloseAllSlots	cluster.c	/^void clusterCloseAllSlots(void) {$/;"	f
clusterCommand	cluster.c	/^void clusterCommand(redisClient *c) {$/;"	f
clusterCountNonFailingSlaves	cluster.c	/^int clusterCountNonFailingSlaves(clusterNode *n) {$/;"	f
clusterCron	cluster.c	/^void clusterCron(void) {$/;"	f
clusterDelNode	cluster.c	/^void clusterDelNode(clusterNode *delnode) {$/;"	f
clusterDelNodeSlots	cluster.c	/^int clusterDelNodeSlots(clusterNode *node) {$/;"	f
clusterDelSlot	cluster.c	/^int clusterDelSlot(int slot) {$/;"	f
clusterDoBeforeSleep	cluster.c	/^void clusterDoBeforeSleep(int flags) {$/;"	f
clusterFailoverReplaceYourMaster	cluster.c	/^void clusterFailoverReplaceYourMaster(void) {$/;"	f
clusterGenNodeDescription	cluster.c	/^sds clusterGenNodeDescription(clusterNode *node) {$/;"	f
clusterGenNodesDescription	cluster.c	/^sds clusterGenNodesDescription(int filter) {$/;"	f
clusterGetMaxEpoch	cluster.c	/^uint64_t clusterGetMaxEpoch(void) {$/;"	f
clusterGetSlaveRank	cluster.c	/^int clusterGetSlaveRank(void) {$/;"	f
clusterHandleConfigEpochCollision	cluster.c	/^void clusterHandleConfigEpochCollision(clusterNode *sender) {$/;"	f
clusterHandleManualFailover	cluster.c	/^void clusterHandleManualFailover(void) {$/;"	f
clusterHandleSlaveFailover	cluster.c	/^void clusterHandleSlaveFailover(void) {$/;"	f
clusterHandleSlaveMigration	cluster.c	/^void clusterHandleSlaveMigration(int max_slaves) {$/;"	f
clusterHandshakeInProgress	cluster.c	/^int clusterHandshakeInProgress(char *ip, int port) {$/;"	f
clusterInit	cluster.c	/^void clusterInit(void) {$/;"	f
clusterLoadConfig	cluster.c	/^int clusterLoadConfig(char *filename) {$/;"	f
clusterLockConfig	cluster.c	/^int clusterLockConfig(char *filename) {$/;"	f
clusterLogCantFailover	cluster.c	/^void clusterLogCantFailover(int reason) {$/;"	f
clusterLookupNode	cluster.c	/^clusterNode *clusterLookupNode(char *name) {$/;"	f
clusterNodeAddFailureReport	cluster.c	/^int clusterNodeAddFailureReport(clusterNode *failing, clusterNode *sender) {$/;"	f
clusterNodeAddSlave	cluster.c	/^int clusterNodeAddSlave(clusterNode *master, clusterNode *slave) {$/;"	f
clusterNodeCleanupFailureReports	cluster.c	/^void clusterNodeCleanupFailureReports(clusterNode *node) {$/;"	f
clusterNodeClearSlotBit	cluster.c	/^int clusterNodeClearSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodeDelFailureReport	cluster.c	/^int clusterNodeDelFailureReport(clusterNode *node, clusterNode *sender) {$/;"	f
clusterNodeFailureReportsCount	cluster.c	/^int clusterNodeFailureReportsCount(clusterNode *node) {$/;"	f
clusterNodeGetSlotBit	cluster.c	/^int clusterNodeGetSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodeRemoveSlave	cluster.c	/^int clusterNodeRemoveSlave(clusterNode *master, clusterNode *slave) {$/;"	f
clusterNodeSetSlotBit	cluster.c	/^int clusterNodeSetSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodesBlackListDictType	gateway.c	/^dictType clusterNodesBlackListDictType = {$/;"	v
clusterNodesBlackListDictType	redis-gateway.c	/^dictType clusterNodesBlackListDictType = {$/;"	v
clusterNodesBlackListDictType	redis.c	/^dictType clusterNodesBlackListDictType = {$/;"	v
clusterNodesDictType	gateway.c	/^dictType clusterNodesDictType = {$/;"	v
clusterNodesDictType	redis-gateway.c	/^dictType clusterNodesDictType = {$/;"	v
clusterNodesDictType	redis.c	/^dictType clusterNodesDictType = {$/;"	v
clusterProcessGossipSection	cluster.c	/^void clusterProcessGossipSection(clusterMsg *hdr, clusterLink *link) {$/;"	f
clusterProcessPacket	cluster.c	/^int clusterProcessPacket(clusterLink *link) {$/;"	f
clusterPropagatePublish	cluster.c	/^void clusterPropagatePublish(robj *channel, robj *message) {$/;"	f
clusterReadHandler	cluster.c	/^void clusterReadHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
clusterRedirectBlockedClientIfNeeded	cluster.c	/^int clusterRedirectBlockedClientIfNeeded(redisClient *c) {$/;"	f
clusterRedirectClient	cluster.c	/^void clusterRedirectClient(redisClient *c, clusterNode *n, int hashslot, int error_code) {$/;"	f
clusterRenameNode	cluster.c	/^void clusterRenameNode(clusterNode *node, char *newname) {$/;"	f
clusterReplyMultiBulkSlots	cluster.c	/^void clusterReplyMultiBulkSlots(redisClient *c) {$/;"	f
clusterRequestFailoverAuth	cluster.c	/^void clusterRequestFailoverAuth(void) {$/;"	f
clusterReset	cluster.c	/^void clusterReset(int hard) {$/;"	f
clusterSaveConfig	cluster.c	/^int clusterSaveConfig(int do_fsync) {$/;"	f
clusterSaveConfigOrDie	cluster.c	/^void clusterSaveConfigOrDie(int do_fsync) {$/;"	f
clusterSendFail	cluster.c	/^void clusterSendFail(char *nodename) {$/;"	f
clusterSendFailoverAuth	cluster.c	/^void clusterSendFailoverAuth(clusterNode *node) {$/;"	f
clusterSendFailoverAuthIfNeeded	cluster.c	/^void clusterSendFailoverAuthIfNeeded(clusterNode *node, clusterMsg *request) {$/;"	f
clusterSendMFStart	cluster.c	/^void clusterSendMFStart(clusterNode *node) {$/;"	f
clusterSendMessage	cluster.c	/^void clusterSendMessage(clusterLink *link, unsigned char *msg, size_t msglen) {$/;"	f
clusterSendPing	cluster.c	/^void clusterSendPing(clusterLink *link, int type) {$/;"	f
clusterSendPublish	cluster.c	/^void clusterSendPublish(clusterLink *link, robj *channel, robj *message) {$/;"	f
clusterSendUpdate	cluster.c	/^void clusterSendUpdate(clusterLink *link, clusterNode *node) {$/;"	f
clusterSetMaster	cluster.c	/^void clusterSetMaster(clusterNode *n) {$/;"	f
clusterSetNodeAsMaster	cluster.c	/^void clusterSetNodeAsMaster(clusterNode *n) {$/;"	f
clusterStartHandshake	cluster.c	/^int clusterStartHandshake(char *ip, int port) {$/;"	f
clusterUpdateSlotsConfigWith	cluster.c	/^void clusterUpdateSlotsConfigWith(clusterNode *sender, uint64_t senderConfigEpoch, unsigned char *slots) {$/;"	f
clusterUpdateState	cluster.c	/^void clusterUpdateState(void) {$/;"	f
clusterWriteHandler	cluster.c	/^void clusterWriteHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
cluster_mode	gateway-back.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_mode	gateway-lib.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_mode	redis-cli.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_mode	redis-cli2.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_mode	redis-gateway2.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_reissue_command	gateway-back.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:
cluster_reissue_command	gateway-lib.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:
cluster_reissue_command	redis-cli.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:
cluster_reissue_command	redis-cli2.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:
cluster_reissue_command	redis-gateway2.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:
collateStringObjects	object.c	/^int collateStringObjects(robj *a, robj *b) {$/;"	f
commandCommand	gateway.c	/^void commandCommand(redisClient *c) {$/;"	f
commandCommand	redis-gateway.c	/^void commandCommand(redisClient *c) {$/;"	f
commandCommand	redis.c	/^void commandCommand(redisClient *c) {$/;"	f
commandTableDictType	gateway.c	/^dictType commandTableDictType = {$/;"	v
commandTableDictType	redis-gateway.c	/^dictType commandTableDictType = {$/;"	v
commandTableDictType	redis.c	/^dictType commandTableDictType = {$/;"	v
compareLatency	redis-benchmark.c	/^static int compareLatency(const void *a, const void *b) {$/;"	f	file:
compareSlavesForPromotion	sentinel.c	/^int compareSlavesForPromotion(const void *a, const void *b) {$/;"	f
compareStringObjects	object.c	/^int compareStringObjects(robj *a, robj *b) {$/;"	f
compareStringObjectsForLexRange	t_zset.c	/^int compareStringObjectsForLexRange(robj *a, robj *b) {$/;"	f
compareStringObjectsWithFlags	object.c	/^int compareStringObjectsWithFlags(robj *a, robj *b, int flags) {$/;"	f
completionCallback	gateway-back.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:
completionCallback	gateway-lib.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:
completionCallback	redis-cli.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:
completionCallback	redis-cli2.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:
completionCallback	redis-gateway2.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:
computeDatasetDigest	debug.c	/^void computeDatasetDigest(unsigned char *final) {$/;"	f
compute_something_fast	gateway-back.c	/^unsigned long compute_something_fast(void) {$/;"	f
compute_something_fast	gateway-lib.c	/^unsigned long compute_something_fast(void) {$/;"	f
compute_something_fast	redis-cli.c	/^unsigned long compute_something_fast(void) {$/;"	f
compute_something_fast	redis-cli2.c	/^unsigned long compute_something_fast(void) {$/;"	f
compute_something_fast	redis-gateway2.c	/^unsigned long compute_something_fast(void) {$/;"	f
config	gateway-back.c	/^static struct config {$/;"	s	file:
config	gateway-back.c	/^} config[ALL_SERVER_NUM];$/;"	v	typeref:struct:config	file:
config	gateway-lib.c	/^static struct config {$/;"	s	file:
config	gateway-lib.c	/^} config[ALL_SERVER_NUM];$/;"	v	typeref:struct:config	file:
config	redis-benchmark.c	/^static struct config {$/;"	s	file:
config	redis-benchmark.c	/^} config;$/;"	v	typeref:struct:config	file:
config	redis-cli.c	/^static struct config {$/;"	s	file:
config	redis-cli.c	/^} config;$/;"	v	typeref:struct:config	file:
config	redis-cli2.c	/^static struct config {$/;"	s	file:
config	redis-cli2.c	/^} config, config2, config3, config4, config5, config6;$/;"	v	typeref:struct:config	file:
config	redis-gateway2.c	/^static struct config {$/;"	s	file:
config	redis-gateway2.c	/^} config;$/;"	v	typeref:struct:config	file:
config2	redis-cli2.c	/^} config, config2, config3, config4, config5, config6;$/;"	v	typeref:struct:config	file:
config3	redis-cli2.c	/^} config, config2, config3, config4, config5, config6;$/;"	v	typeref:struct:config	file:
config4	redis-cli2.c	/^} config, config2, config3, config4, config5, config6;$/;"	v	typeref:struct:config	file:
config5	redis-cli2.c	/^} config, config2, config3, config4, config5, config6;$/;"	v	typeref:struct:config	file:
config6	redis-cli2.c	/^} config, config2, config3, config4, config5, config6;$/;"	v	typeref:struct:config	file:
configCommand	config.c	/^void configCommand(redisClient *c) {$/;"	f
configGetCommand	config.c	/^void configGetCommand(redisClient *c) {$/;"	f
configSetCommand	config.c	/^void configSetCommand(redisClient *c) {$/;"	f
config_epoch	sentinel.c	/^    uint64_t config_epoch;  \/* Configuration epoch. *\/$/;"	m	struct:sentinelRedisInstance	file:
config_get_bool_field	config.c	996;"	d	file:
config_get_numerical_field	config.c	1004;"	d	file:
config_get_string_field	config.c	988;"	d	file:
connectWithMaster	replication.c	/^int connectWithMaster(void) {$/;"	f
consumeNewline	redis-check-aof.c	/^int consumeNewline(char *buf) {$/;"	f
context	gateway-back.c	/^static redisContext *context[ALL_SERVER_NUM];$/;"	v	file:
context	gateway-lib.c	/^static redisContext *context[ALL_SERVER_NUM];$/;"	v	file:
context	redis-benchmark.c	/^    redisContext *context;$/;"	m	struct:_client	file:
context	redis-cli.c	/^static redisContext *context;$/;"	v	file:
context	redis-cli2.c	/^static redisContext *context;$/;"	v	file:
context	redis-gateway2.c	/^static redisContext *context;$/;"	v	file:
context	sentinel.c	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	file:
context2	redis-cli2.c	/^static redisContext *context2;$/;"	v	file:
context3	redis-cli2.c	/^static redisContext *context3;$/;"	v	file:
context4	redis-cli2.c	/^static redisContext *context4;$/;"	v	file:
context5	redis-cli2.c	/^static redisContext *context5;$/;"	v	file:
context6	redis-cli2.c	/^static redisContext *context6;$/;"	v	file:
convertToSds	gateway-back.c	/^static char **convertToSds(int count, char** args) {$/;"	f	file:
convertToSds	gateway-lib.c	/^static char **convertToSds(int count, char** args) {$/;"	f	file:
convertToSds	redis-cli.c	/^static char **convertToSds(int count, char** args) {$/;"	f	file:
convertToSds	redis-cli2.c	/^static char **convertToSds(int count, char** args) {$/;"	f	file:
convertToSds	redis-gateway2.c	/^static char **convertToSds(int count, char** args) {$/;"	f	file:
copyClientOutputBuffer	networking.c	/^void copyClientOutputBuffer(redisClient *dst, redisClient *src) {$/;"	f
count	gateway-back.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:
count	gateway-lib.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:
count	redis-cli.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:
count	redis-cli2.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:
count	redis-gateway2.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:
countKeysInSlot	db.c	/^unsigned int countKeysInSlot(unsigned int hashslot) {$/;"	f
crc16	crc16.c	/^uint16_t crc16(const char *buf, int len) {$/;"	f
crc16tab	crc16.c	/^static const uint16_t crc16tab[256]= {$/;"	v	file:
crc64	crc64.c	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l) {$/;"	f
crc64_tab	crc64.c	/^static const uint64_t crc64_tab[256] = {$/;"	v	file:
createClient	networking.c	/^redisClient *createClient(int fd) {$/;"	f
createClient	redis-benchmark.c	/^static client createClient(char *cmd, size_t len, client from) {$/;"	f	file:
createClusterLink	cluster.c	/^clusterLink *createClusterLink(clusterNode *node) {$/;"	f
createClusterNode	cluster.c	/^clusterNode *createClusterNode(char *nodename, int flags) {$/;"	f
createDumpPayload	cluster.c	/^void createDumpPayload(rio *payload, robj *o) {$/;"	f
createEmbeddedStringObject	object.c	/^robj *createEmbeddedStringObject(char *ptr, size_t len) {$/;"	f
createFakeClient	aof.c	/^struct redisClient *createFakeClient(void) {$/;"	f
createHLLObject	hyperloglog.c	/^robj *createHLLObject(void) {$/;"	f
createHashObject	object.c	/^robj *createHashObject(void) {$/;"	f
createIntList	ziplist.c	/^unsigned char *createIntList() {$/;"	f
createIntsetObject	object.c	/^robj *createIntsetObject(void) {$/;"	f
createLatencyReport	latency.c	/^sds createLatencyReport(void) {$/;"	f
createList	ziplist.c	/^unsigned char *createList() {$/;"	f
createListObject	object.c	/^robj *createListObject(void) {$/;"	f
createMissingClients	redis-benchmark.c	/^static void createMissingClients(client c) {$/;"	f	file:
createObject	object.c	/^robj *createObject(int type, void *ptr) {$/;"	f
createPidFile	gateway.c	/^void createPidFile(void) {$/;"	f
createPidFile	redis-gateway.c	/^void createPidFile(void) {$/;"	f
createPidFile	redis.c	/^void createPidFile(void) {$/;"	f
createRawStringObject	object.c	/^robj *createRawStringObject(char *ptr, size_t len) {$/;"	f
createReplicationBacklog	replication.c	/^void createReplicationBacklog(void) {$/;"	f
createSentinelAddr	sentinel.c	/^sentinelAddr *createSentinelAddr(char *hostname, int port) {$/;"	f
createSentinelRedisInstance	sentinel.c	/^sentinelRedisInstance *createSentinelRedisInstance(char *name, int flags, char *hostname, int port, int quorum, sentinelRedisInstance *master) {$/;"	f
createSet	intset.c	/^intset *createSet(int bits, int size) {$/;"	f
createSetObject	object.c	/^robj *createSetObject(void) {$/;"	f
createSharedObjects	gateway.c	/^void createSharedObjects(void) {$/;"	f
createSharedObjects	redis-gateway.c	/^void createSharedObjects(void) {$/;"	f
createSharedObjects	redis.c	/^void createSharedObjects(void) {$/;"	f
createSortOperation	sort.c	/^redisSortOperation *createSortOperation(int type, robj *pattern) {$/;"	f
createSparklineSequence	sparkline.c	/^struct sequence *createSparklineSequence(void) {$/;"	f
createStringObject	object.c	/^robj *createStringObject(char *ptr, size_t len) {$/;"	f
createStringObjectFromLongDouble	object.c	/^robj *createStringObjectFromLongDouble(long double value, int humanfriendly) {$/;"	f
createStringObjectFromLongLong	object.c	/^robj *createStringObjectFromLongLong(long long value) {$/;"	f
createZiplistObject	object.c	/^robj *createZiplistObject(void) {$/;"	f
createZsetObject	object.c	/^robj *createZsetObject(void) {$/;"	f
createZsetZiplistObject	object.c	/^robj *createZsetZiplistObject(void) {$/;"	f
csv	redis-benchmark.c	/^    int csv;$/;"	m	struct:config	file:
current_epoch	sentinel.c	/^    uint64_t current_epoch;     \/* Current epoch. *\/$/;"	m	struct:sentinelState	file:
d2string	util.c	/^int d2string(char *buf, size_t len, double value) {$/;"	f
daemonize	gateway.c	/^void daemonize(void) {$/;"	f
daemonize	redis-gateway.c	/^void daemonize(void) {$/;"	f
daemonize	redis.c	/^void daemonize(void) {$/;"	f
data	redis-check-dump.c	/^    void *data;$/;"	m	struct:__anon4	file:
databasesCron	gateway.c	/^void databasesCron(void) {$/;"	f
databasesCron	redis-gateway.c	/^void databasesCron(void) {$/;"	f
databasesCron	redis.c	/^void databasesCron(void) {$/;"	f
datasize	redis-benchmark.c	/^    int datasize;$/;"	m	struct:config	file:
db	multi.c	/^    redisDb *db;$/;"	m	struct:watchedKey	file:
dbAdd	db.c	/^void dbAdd(redisDb *db, robj *key, robj *val) {$/;"	f
dbDelete	db.c	/^int dbDelete(redisDb *db, robj *key) {$/;"	f
dbDictType	gateway.c	/^dictType dbDictType = {$/;"	v
dbDictType	redis-gateway.c	/^dictType dbDictType = {$/;"	v
dbDictType	redis.c	/^dictType dbDictType = {$/;"	v
dbExists	db.c	/^int dbExists(redisDb *db, robj *key) {$/;"	f
dbOverwrite	db.c	/^void dbOverwrite(redisDb *db, robj *key, robj *val) {$/;"	f
dbRandomKey	db.c	/^robj *dbRandomKey(redisDb *db) {$/;"	f
dbUnshareStringValue	db.c	/^robj *dbUnshareStringValue(redisDb *db, robj *key, robj *o) {$/;"	f
dbnum	gateway-back.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnum	gateway-lib.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnum	redis-benchmark.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnum	redis-cli.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnum	redis-cli2.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnum	redis-gateway2.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnumstr	redis-benchmark.c	/^    sds dbnumstr;$/;"	m	struct:config	file:
dbsizeCommand	db.c	/^void dbsizeCommand(redisClient *c) {$/;"	f
de	t_zset.c	/^                dictEntry *de;$/;"	m	struct:__anon11::__anon12::_iterset::__anon14	file:
deadServer	gateway-back.c	/^static int deadServer = 0;$/;"	v	file:
deadServer	gateway-lib.c	/^static int deadServer = 0;$/;"	v	file:
deadServer	redis-cli2.c	/^static int deadServer = 0;$/;"	v	file:
debug	ziplist.c	960;"	d	file:
debugCommand	debug.c	/^void debugCommand(redisClient *c) {$/;"	f
decrCommand	gateway-front.c	/^void decrCommand(redisClient *c) {$/;"	f
decrCommand	t_string.c	/^void decrCommand(redisClient *c) {$/;"	f
decrRefCount	object.c	/^void decrRefCount(robj *o) {$/;"	f
decrRefCountVoid	object.c	/^void decrRefCountVoid(void *o) {$/;"	f
decrbyCommand	gateway-front.c	/^void decrbyCommand(redisClient *c) {$/;"	f
decrbyCommand	t_string.c	/^void decrbyCommand(redisClient *c) {$/;"	f
delCommand	db.c	/^void delCommand(redisClient *c) {$/;"	f
delKeysInSlot	db.c	/^unsigned int delKeysInSlot(unsigned int hashslot) {$/;"	f
di	t_zset.c	/^                dictIterator *di;$/;"	m	struct:__anon11::__anon12::_iterset::__anon14	file:
dict	t_zset.c	/^                dict *dict;$/;"	m	struct:__anon11::__anon12::_iterset::__anon14	file:
dictAdd	dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictAddRaw	dict.c	/^dictEntry *dictAddRaw(dict *d, void *key)$/;"	f
dictCreate	dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	dict.c	/^void dictEmpty(dict *d, void(callback)(void*)) {$/;"	f
dictEnableResize	dict.c	/^void dictEnableResize(void) {$/;"	f
dictEncObjHash	gateway.c	/^unsigned int dictEncObjHash(const void *key) {$/;"	f
dictEncObjHash	redis-gateway.c	/^unsigned int dictEncObjHash(const void *key) {$/;"	f
dictEncObjHash	redis.c	/^unsigned int dictEncObjHash(const void *key) {$/;"	f
dictEncObjKeyCompare	gateway.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictEncObjKeyCompare	redis-gateway.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictEncObjKeyCompare	redis.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictExpand	dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictFingerprint	dict.c	/^long long dictFingerprint(dict *d) {$/;"	f
dictGenCaseHashFunction	dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	dict.c	/^unsigned int dictGenHashFunction(const void *key, int len) {$/;"	f
dictGenericDelete	dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetHashFunctionSeed	dict.c	/^uint32_t dictGetHashFunctionSeed(void) {$/;"	f
dictGetIterator	dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetRandomKey	dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictGetSomeKeys	dict.c	/^unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count) {$/;"	f
dictInstancesValDestructor	sentinel.c	/^void dictInstancesValDestructor (void *privdata, void *obj) {$/;"	f
dictIntHashFunction	dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictListDestructor	gateway.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictListDestructor	redis-gateway.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictListDestructor	redis.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictNext	dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictObjHash	gateway.c	/^unsigned int dictObjHash(const void *key) {$/;"	f
dictObjHash	redis-gateway.c	/^unsigned int dictObjHash(const void *key) {$/;"	f
dictObjHash	redis.c	/^unsigned int dictObjHash(const void *key) {$/;"	f
dictObjKeyCompare	gateway.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictObjKeyCompare	redis-gateway.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictObjKeyCompare	redis.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictRedisObjectDestructor	gateway.c	/^void dictRedisObjectDestructor(void *privdata, void *val)$/;"	f
dictRedisObjectDestructor	redis-gateway.c	/^void dictRedisObjectDestructor(void *privdata, void *val)$/;"	f
dictRedisObjectDestructor	redis.c	/^void dictRedisObjectDestructor(void *privdata, void *val)$/;"	f
dictRehash	dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictReplaceRaw	dict.c	/^dictEntry *dictReplaceRaw(dict *d, void *key) {$/;"	f
dictResize	dict.c	/^int dictResize(dict *d)$/;"	f
dictScan	dict.c	/^unsigned long dictScan(dict *d,$/;"	f
dictSdsCaseHash	gateway.c	/^unsigned int dictSdsCaseHash(const void *key) {$/;"	f
dictSdsCaseHash	redis-gateway.c	/^unsigned int dictSdsCaseHash(const void *key) {$/;"	f
dictSdsCaseHash	redis.c	/^unsigned int dictSdsCaseHash(const void *key) {$/;"	f
dictSdsDestructor	gateway.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f
dictSdsDestructor	redis-gateway.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f
dictSdsDestructor	redis.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f
dictSdsHash	gateway.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f
dictSdsHash	redis-gateway.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f
dictSdsHash	redis.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f
dictSdsKeyCaseCompare	gateway.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCaseCompare	redis-gateway.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCaseCompare	redis.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCompare	gateway.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCompare	redis-gateway.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCompare	redis.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f
dictSetHashFunctionSeed	dict.c	/^void dictSetHashFunctionSeed(uint32_t seed) {$/;"	f
dictStringHash	latency.c	/^unsigned int dictStringHash(const void *key) {$/;"	f
dictStringKeyCompare	latency.c	/^int dictStringKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f
dictVanillaFree	gateway.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f
dictVanillaFree	redis-gateway.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f
dictVanillaFree	redis.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f
dict_can_resize	dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	dict.c	/^static uint32_t dict_hash_function_seed = 5381;$/;"	v	file:
digits10	util.c	/^uint32_t digits10(uint64_t v) {$/;"	f
disableWatchdog	debug.c	/^void disableWatchdog(void) {$/;"	f
discardCommand	multi.c	/^void discardCommand(redisClient *c) {$/;"	f
discardTransaction	multi.c	/^void discardTransaction(redisClient *c) {$/;"	f
disconnectAllBlockedClients	blocked.c	/^void disconnectAllBlockedClients(void) {$/;"	f
disconnectSlaves	networking.c	/^void disconnectSlaves(void) {$/;"	f
distsamples	gateway-back.c	/^struct distsamples {$/;"	s	file:
distsamples	gateway-lib.c	/^struct distsamples {$/;"	s	file:
distsamples	redis-cli.c	/^struct distsamples {$/;"	s	file:
distsamples	redis-cli2.c	/^struct distsamples {$/;"	s	file:
distsamples	redis-gateway2.c	/^struct distsamples {$/;"	s	file:
down_after_period	sentinel.c	/^    mstime_t down_after_period; \/* Consider it down after that period. *\/$/;"	m	struct:sentinelRedisInstance	file:
dumpCommand	cluster.c	/^void dumpCommand(redisClient *c) {$/;"	f
dupClientReplyValue	networking.c	/^void *dupClientReplyValue(void *o) {$/;"	f
dupLastObjectIfNeeded	networking.c	/^robj *dupLastObjectIfNeeded(list *reply) {$/;"	f
dupSentinelAddr	sentinel.c	/^sentinelAddr *dupSentinelAddr(sentinelAddr *src) {$/;"	f
dupStringObject	object.c	/^robj *dupStringObject(robj *o) {$/;"	f
echoCommand	gateway.c	/^void echoCommand(redisClient *c) {$/;"	f
echoCommand	redis-gateway.c	/^void echoCommand(redisClient *c) {$/;"	f
echoCommand	redis.c	/^void echoCommand(redisClient *c) {$/;"	f
el	redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:config	file:
ele	t_zset.c	/^    robj *ele;$/;"	m	struct:__anon17	file:
elen	t_zset.c	/^    unsigned int elen;$/;"	m	struct:__anon17	file:
ell	t_zset.c	/^    long long ell;$/;"	m	struct:__anon17	file:
emptyDb	db.c	/^long long emptyDb(void(callback)(void*)) {$/;"	f
enableWatchdog	debug.c	/^void enableWatchdog(int period) {$/;"	f
encoding	hyperloglog.c	/^    uint8_t encoding;   \/* HLL_DENSE or HLL_SPARSE. *\/$/;"	m	struct:hllhdr	file:
encoding	t_zset.c	/^    int encoding;$/;"	m	struct:__anon11	file:
encoding	ziplist.c	/^    unsigned char encoding;$/;"	m	struct:zlentry	file:
end	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon10	file:
entry	redis-check-dump.c	/^} entry;$/;"	t	typeref:struct:__anon6	file:
epfd	ae_epoll.c	/^    int epfd;$/;"	m	struct:aeApiState	file:
epos	redis-check-aof.c	/^static off_t epos;$/;"	v	file:
eptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon11::__anon12::_iterzset::__anon15	file:
equalStringObjects	object.c	/^int equalStringObjects(robj *a, robj *b) {$/;"	f
error	intset.c	/^void error(char *err) {$/;"	f
error	redis-check-aof.c	/^static char error[1024];$/;"	v	file:
error	redis-check-dump.c	/^    char error[16][1024];$/;"	m	struct:__anon5	file:
error	setproctitle.c	/^	int error;$/;"	m	struct:__anon10	file:
errors	redis-check-dump.c	/^static errors_t errors;$/;"	v	file:
errors_t	redis-check-dump.c	/^} errors_t;$/;"	t	typeref:struct:__anon5	file:
estimateObjectIdleTime	object.c	/^unsigned long long estimateObjectIdleTime(robj *o) {$/;"	f
estr	t_zset.c	/^    unsigned char *estr;$/;"	m	struct:__anon17	file:
eval	gateway-back.c	/^    char *eval;$/;"	m	struct:config	file:
eval	gateway-lib.c	/^    char *eval;$/;"	m	struct:config	file:
eval	redis-cli.c	/^    char *eval;$/;"	m	struct:config	file:
eval	redis-cli2.c	/^    char *eval;$/;"	m	struct:config	file:
eval	redis-gateway2.c	/^    char *eval;$/;"	m	struct:config	file:
evalCommand	scripting.c	/^void evalCommand(redisClient *c) {$/;"	f
evalGenericCommand	scripting.c	/^void evalGenericCommand(redisClient *c, int evalsha) {$/;"	f
evalGetKeys	db.c	/^int *evalGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
evalMode	gateway-back.c	/^static int evalMode(int argc, char **argv, int sn) {$/;"	f	file:
evalMode	gateway-lib.c	/^static int evalMode(int argc, char **argv, int sn) {$/;"	f	file:
evalMode	redis-cli.c	/^static int evalMode(int argc, char **argv) {$/;"	f	file:
evalMode	redis-cli2.c	/^static int evalMode(int argc, char **argv) {$/;"	f	file:
evalMode	redis-gateway2.c	/^static int evalMode(int argc, char **argv) {$/;"	f	file:
evalShaCommand	scripting.c	/^void evalShaCommand(redisClient *c) {$/;"	f
events	ae_epoll.c	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:
events	ae_kqueue.c	/^    struct kevent *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::kevent	file:
evictionPoolAlloc	gateway.c	/^struct evictionPoolEntry *evictionPoolAlloc(void) {$/;"	f
evictionPoolAlloc	redis-gateway.c	/^struct evictionPoolEntry *evictionPoolAlloc(void) {$/;"	f
evictionPoolAlloc	redis.c	/^struct evictionPoolEntry *evictionPoolAlloc(void) {$/;"	f
evictionPoolPopulate	gateway.c	/^void evictionPoolPopulate(dict *sampledict, dict *keydict, struct evictionPoolEntry *pool) {$/;"	f
evictionPoolPopulate	redis-gateway.c	/^void evictionPoolPopulate(dict *sampledict, dict *keydict, struct evictionPoolEntry *pool) {$/;"	f
evictionPoolPopulate	redis.c	/^void evictionPoolPopulate(dict *sampledict, dict *keydict, struct evictionPoolEntry *pool) {$/;"	f
evport_debug	ae_evport.c	/^static int evport_debug = 0;$/;"	v	file:
execCommand	multi.c	/^void execCommand(redisClient *c) {$/;"	f
execCommandPropagateMulti	multi.c	/^void execCommandPropagateMulti(redisClient *c) {$/;"	f
existsCommand	db.c	/^void existsCommand(redisClient *c) {$/;"	f
exitFromChild	gateway.c	/^void exitFromChild(int retcode) {$/;"	f
exitFromChild	redis-gateway.c	/^void exitFromChild(int retcode) {$/;"	f
exitFromChild	redis.c	/^void exitFromChild(int retcode) {$/;"	f
expect	lzf_c.c	79;"	d	file:
expect	lzf_c.c	82;"	d	file:
expect_false	lzf_c.c	86;"	d	file:
expect_true	lzf_c.c	87;"	d	file:
expireCommand	db.c	/^void expireCommand(redisClient *c) {$/;"	f
expireGenericCommand	db.c	/^void expireGenericCommand(redisClient *c, long long basetime, int unit) {$/;"	f
expireIfNeeded	db.c	/^int expireIfNeeded(redisDb *db, robj *key) {$/;"	f
expireatCommand	db.c	/^void expireatCommand(redisClient *c) {$/;"	f
failover_delay_logged	sentinel.c	/^    mstime_t failover_delay_logged; \/* For what failover_start_time value we$/;"	m	struct:sentinelRedisInstance	file:
failover_epoch	sentinel.c	/^    uint64_t failover_epoch; \/* Epoch of the currently started failover. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_start_time	sentinel.c	/^    mstime_t failover_start_time;   \/* Last failover attempt start time. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_state	sentinel.c	/^    int failover_state; \/* See SENTINEL_FAILOVER_STATE_* defines. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_state_change_time	sentinel.c	/^    mstime_t failover_state_change_time;$/;"	m	struct:sentinelRedisInstance	file:
failover_timeout	sentinel.c	/^    mstime_t failover_timeout;      \/* Max time to refresh failover state. *\/$/;"	m	struct:sentinelRedisInstance	file:
fd	cluster.c	/^    int fd;$/;"	m	struct:migrateCachedSocket	file:
fd	sentinel.c	/^    int fd;$/;"	m	struct:redisAeEvents	file:
feedAppendOnlyFile	aof.c	/^void feedAppendOnlyFile(struct redisCommand *cmd, int dictid, robj **argv, int argc) {$/;"	f
feedReplicationBacklog	replication.c	/^void feedReplicationBacklog(void *ptr, size_t len) {$/;"	f
feedReplicationBacklogWithObject	replication.c	/^void feedReplicationBacklogWithObject(robj *o) {$/;"	f
findBigKeys	gateway-back.c	/^static void findBigKeys(int sn) {$/;"	f	file:
findBigKeys	gateway-lib.c	/^static void findBigKeys(int sn) {$/;"	f	file:
findBigKeys	redis-cli.c	/^static void findBigKeys(void) {$/;"	f	file:
findBigKeys	redis-cli2.c	/^static void findBigKeys(void) {$/;"	f	file:
findBigKeys	redis-gateway2.c	/^static void findBigKeys(void) {$/;"	f	file:
flag	cluster.c	/^    uint16_t flag;$/;"	m	struct:redisNodeFlags	file:
flagTransaction	multi.c	/^void flagTransaction(redisClient *c) {$/;"	f
flags	sentinel.c	/^    int flags;              \/* Script job flags: SENTINEL_SCRIPT_* *\/$/;"	m	struct:sentinelScriptJob	file:
flags	sentinel.c	/^    int flags;      \/* See SRI_... defines *\/$/;"	m	struct:sentinelRedisInstance	file:
flags	t_zset.c	/^    int flags;$/;"	m	struct:__anon17	file:
flushAppendOnlyFile	aof.c	/^void flushAppendOnlyFile(int force) {$/;"	f
flushSlavesOutputBuffers	networking.c	/^void flushSlavesOutputBuffers(void) {$/;"	f
flushallCommand	db.c	/^void flushallCommand(redisClient *c) {$/;"	f
flushdbCommand	db.c	/^void flushdbCommand(redisClient *c) {$/;"	f
forceCommandPropagation	gateway.c	/^void forceCommandPropagation(redisClient *c, int flags) {$/;"	f
forceCommandPropagation	redis-gateway.c	/^void forceCommandPropagation(redisClient *c, int flags) {$/;"	f
forceCommandPropagation	redis.c	/^void forceCommandPropagation(redisClient *c, int flags) {$/;"	f
force_cancel_loop	gateway-back.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
force_cancel_loop	gateway-lib.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
force_cancel_loop	redis-cli.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
force_cancel_loop	redis-cli2.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
force_cancel_loop	redis-gateway2.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
formatPeerId	networking.c	/^void formatPeerId(char *peerid, size_t peerid_len, char *ip, int port) {$/;"	f
free	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:
free	zmalloc.c	62;"	d	file:
free	zmalloc.c	67;"	d	file:
freeAllClients	redis-benchmark.c	/^static void freeAllClients(void) {$/;"	f	file:
freeClient	networking.c	/^void freeClient(redisClient *c) {$/;"	f
freeClient	redis-benchmark.c	/^static void freeClient(client c) {$/;"	f	file:
freeClientArgv	networking.c	/^static void freeClientArgv(redisClient *c) {$/;"	f	file:
freeClientAsync	networking.c	/^void freeClientAsync(redisClient *c) {$/;"	f
freeClientMultiState	multi.c	/^void freeClientMultiState(redisClient *c) {$/;"	f
freeClientsInAsyncFreeQueue	networking.c	/^void freeClientsInAsyncFreeQueue(void) {$/;"	f
freeClusterLink	cluster.c	/^void freeClusterLink(clusterLink *link) {$/;"	f
freeClusterNode	cluster.c	/^void freeClusterNode(clusterNode *n) {$/;"	f
freeFakeClient	aof.c	/^void freeFakeClient(struct redisClient *c) {$/;"	f
freeFakeClientArgv	aof.c	/^void freeFakeClientArgv(struct redisClient *c) {$/;"	f
freeHashObject	object.c	/^void freeHashObject(robj *o) {$/;"	f
freeListObject	object.c	/^void freeListObject(robj *o) {$/;"	f
freeMemoryIfNeeded	gateway.c	/^int freeMemoryIfNeeded(void) {$/;"	f
freeMemoryIfNeeded	redis-gateway.c	/^int freeMemoryIfNeeded(void) {$/;"	f
freeMemoryIfNeeded	redis.c	/^int freeMemoryIfNeeded(void) {$/;"	f
freePubsubPattern	pubsub.c	/^void freePubsubPattern(void *p) {$/;"	f
freeReplicationBacklog	replication.c	/^void freeReplicationBacklog(void) {$/;"	f
freeSetObject	object.c	/^void freeSetObject(robj *o) {$/;"	f
freeSparklineSequence	sparkline.c	/^void freeSparklineSequence(struct sequence *seq) {$/;"	f
freeStringObject	object.c	/^void freeStringObject(robj *o) {$/;"	f
freeZsetObject	object.c	/^void freeZsetObject(robj *o) {$/;"	f
full	gateway-back.c	/^    sds full;$/;"	m	struct:__anon2	file:
full	gateway-lib.c	/^    sds full;$/;"	m	struct:__anon3	file:
full	redis-cli.c	/^    sds full;$/;"	m	struct:__anon8	file:
full	redis-cli2.c	/^    sds full;$/;"	m	struct:__anon7	file:
full	redis-gateway2.c	/^    sds full;$/;"	m	struct:__anon9	file:
genClientPeerId	networking.c	/^int genClientPeerId(redisClient *client, char *peerid, size_t peerid_len) {$/;"	f
genRedisInfoString	gateway.c	/^sds genRedisInfoString(char *section) {$/;"	f
genRedisInfoString	redis-gateway.c	/^sds genRedisInfoString(char *section) {$/;"	f
genRedisInfoString	redis.c	/^sds genRedisInfoString(char *section) {$/;"	f
genericHgetallCommand	t_hash.c	/^void genericHgetallCommand(redisClient *c, int flags) {$/;"	f
genericZrangebylexCommand	t_zset.c	/^void genericZrangebylexCommand(redisClient *c, int reverse) {$/;"	f
genericZrangebyscoreCommand	t_zset.c	/^void genericZrangebyscoreCommand(redisClient *c, int reverse) {$/;"	f
getAbsolutePath	util.c	/^sds getAbsolutePath(char *filename) {$/;"	f
getAllClientsInfoString	networking.c	/^sds getAllClientsInfoString(void) {$/;"	f
getBitOffsetFromArgument	bitops.c	/^static int getBitOffsetFromArgument(redisClient *c, robj *o, size_t *offset) {$/;"	f	file:
getClientOutputBufferMemoryUsage	networking.c	/^unsigned long getClientOutputBufferMemoryUsage(redisClient *c) {$/;"	f
getClientPeerId	networking.c	/^char *getClientPeerId(redisClient *c) {$/;"	f
getClientType	networking.c	/^int getClientType(redisClient *c) {$/;"	f
getClientTypeByName	networking.c	/^int getClientTypeByName(char *name) {$/;"	f
getClientTypeName	networking.c	/^char *getClientTypeName(int class) {$/;"	f
getClientsMaxBuffers	networking.c	/^void getClientsMaxBuffers(unsigned long *longest_output_list,$/;"	f
getCommand	gateway-front.c	/^void getCommand(redisClient *c) {$/;"	f
getCommand	t_string.c	/^void getCommand(redisClient *c) {$/;"	f
getDbSize	gateway-back.c	/^static int getDbSize(int sn) {$/;"	f	file:
getDbSize	gateway-lib.c	/^static int getDbSize(int sn) {$/;"	f	file:
getDbSize	redis-cli.c	/^static int getDbSize(void) {$/;"	f	file:
getDbSize	redis-cli2.c	/^static int getDbSize(void) {$/;"	f	file:
getDbSize	redis-gateway2.c	/^static int getDbSize(void) {$/;"	f	file:
getDecodedObject	object.c	/^robj *getDecodedObject(robj *o) {$/;"	f
getDoubleFromObject	object.c	/^int getDoubleFromObject(robj *o, double *target) {$/;"	f
getDoubleFromObjectOrReply	object.c	/^int getDoubleFromObjectOrReply(redisClient *c, robj *o, double *target, const char *msg) {$/;"	f
getExpire	db.c	/^long long getExpire(redisDb *db, robj *key) {$/;"	f
getGenericCommand	gateway-front.c	/^int getGenericCommand(redisClient *c) {$/;"	f
getGenericCommand	t_string.c	/^int getGenericCommand(redisClient *c) {$/;"	f
getHistoryPath	gateway-back.c	/^static sds getHistoryPath() {$/;"	f	file:
getHistoryPath	gateway-lib.c	/^static sds getHistoryPath() {$/;"	f	file:
getHistoryPath	redis-cli.c	/^static sds getHistoryPath() {$/;"	f	file:
getHistoryPath	redis-cli2.c	/^static sds getHistoryPath() {$/;"	f	file:
getHistoryPath	redis-gateway2.c	/^static sds getHistoryPath() {$/;"	f	file:
getInfoField	gateway-back.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:
getInfoField	gateway-lib.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:
getInfoField	redis-cli.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:
getInfoField	redis-cli2.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:
getInfoField	redis-gateway2.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:
getInstantaneousMetric	gateway.c	/^long long getInstantaneousMetric(int metric) {$/;"	f
getInstantaneousMetric	redis-gateway.c	/^long long getInstantaneousMetric(int metric) {$/;"	f
getInstantaneousMetric	redis.c	/^long long getInstantaneousMetric(int metric) {$/;"	f
getKeySizes	gateway-back.c	/^static void getKeySizes(redisReply *keys, int *types,$/;"	f	file:
getKeySizes	gateway-lib.c	/^static void getKeySizes(redisReply *keys, int *types,$/;"	f	file:
getKeySizes	redis-cli.c	/^static void getKeySizes(redisReply *keys, int *types,$/;"	f	file:
getKeySizes	redis-cli2.c	/^static void getKeySizes(redisReply *keys, int *types,$/;"	f	file:
getKeySizes	redis-gateway2.c	/^static void getKeySizes(redisReply *keys, int *types,$/;"	f	file:
getKeyTypes	gateway-back.c	/^static void getKeyTypes(redisReply *keys, int *types, int sn) {$/;"	f	file:
getKeyTypes	gateway-lib.c	/^static void getKeyTypes(redisReply *keys, int *types, int sn) {$/;"	f	file:
getKeyTypes	redis-cli.c	/^static void getKeyTypes(redisReply *keys, int *types) {$/;"	f	file:
getKeyTypes	redis-cli2.c	/^static void getKeyTypes(redisReply *keys, int *types) {$/;"	f	file:
getKeyTypes	redis-gateway2.c	/^static void getKeyTypes(redisReply *keys, int *types) {$/;"	f	file:
getKeysFreeResult	db.c	/^void getKeysFreeResult(int *result) {$/;"	f
getKeysFromCommand	db.c	/^int *getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
getKeysInSlot	db.c	/^unsigned int getKeysInSlot(unsigned int hashslot, robj **keys, unsigned int count) {$/;"	f
getKeysUsingCommandTable	db.c	/^int *getKeysUsingCommandTable(struct redisCommand *cmd,robj **argv, int argc, int *numkeys) {$/;"	f
getLRUClock	gateway.c	/^unsigned int getLRUClock(void) {$/;"	f
getLRUClock	redis-gateway.c	/^unsigned int getLRUClock(void) {$/;"	f
getLRUClock	redis.c	/^unsigned int getLRUClock(void) {$/;"	f
getLongDoubleFromObject	object.c	/^int getLongDoubleFromObject(robj *o, long double *target) {$/;"	f
getLongDoubleFromObjectOrReply	object.c	/^int getLongDoubleFromObjectOrReply(redisClient *c, robj *o, long double *target, const char *msg) {$/;"	f
getLongFromObjectOrReply	object.c	/^int getLongFromObjectOrReply(redisClient *c, robj *o, long *target, const char *msg) {$/;"	f
getLongInfoField	gateway-back.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:
getLongInfoField	gateway-lib.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:
getLongInfoField	redis-cli.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:
getLongInfoField	redis-cli2.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:
getLongInfoField	redis-gateway2.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:
getLongLongFromObject	object.c	/^int getLongLongFromObject(robj *o, long long *target) {$/;"	f
getLongLongFromObjectOrReply	object.c	/^int getLongLongFromObjectOrReply(redisClient *c, robj *o, long long *target, const char *msg) {$/;"	f
getMcontextEip	debug.c	/^static void *getMcontextEip(ucontext_t *uc) {$/;"	f	file:
getNodeByQuery	cluster.c	/^clusterNode *getNodeByQuery(redisClient *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *error_code) {$/;"	f
getPsyncInitialOffset	replication.c	/^long long getPsyncInitialOffset(void) {$/;"	f
getRDB	gateway-back.c	/^static void getRDB(int sn) {$/;"	f	file:
getRDB	gateway-lib.c	/^static void getRDB(int sn) {$/;"	f	file:
getRDB	redis-cli.c	/^static void getRDB(void) {$/;"	f	file:
getRDB	redis-cli2.c	/^static void getRDB(void) {$/;"	f	file:
getRDB	redis-gateway2.c	/^static void getRDB(void) {$/;"	f	file:
getRandomHexChars	util.c	/^void getRandomHexChars(char *p, unsigned int len) {$/;"	f
getSentinelRedisInstanceByAddrAndRunID	sentinel.c	/^sentinelRedisInstance *getSentinelRedisInstanceByAddrAndRunID(dict *instances, char *ip, int port, char *runid) {$/;"	f
getSlotOrReply	cluster.c	/^int getSlotOrReply(redisClient *c, robj *o) {$/;"	f
getStringObjectSdsUsedMemory	networking.c	/^size_t getStringObjectSdsUsedMemory(robj *o) {$/;"	f
getTimeoutFromObjectOrReply	blocked.c	/^int getTimeoutFromObjectOrReply(redisClient *c, robj *object, mstime_t *timeout, int unit) {$/;"	f
getbitCommand	bitops.c	/^void getbitCommand(redisClient *c) {$/;"	f
getrangeCommand	gateway-front.c	/^void getrangeCommand(redisClient *c) {$/;"	f
getrangeCommand	t_string.c	/^void getrangeCommand(redisClient *c) {$/;"	f
getrdb_mode	gateway-back.c	/^    int getrdb_mode;$/;"	m	struct:config	file:
getrdb_mode	gateway-lib.c	/^    int getrdb_mode;$/;"	m	struct:config	file:
getrdb_mode	redis-cli.c	/^    int getrdb_mode;$/;"	m	struct:config	file:
getrdb_mode	redis-cli2.c	/^    int getrdb_mode;$/;"	m	struct:config	file:
getrdb_mode	redis-gateway2.c	/^    int getrdb_mode;$/;"	m	struct:config	file:
getsetCommand	gateway-front.c	/^void getsetCommand(redisClient *c) {$/;"	f
getsetCommand	t_string.c	/^void getsetCommand(redisClient *c) {$/;"	f
handleClientsBlockedOnLists	t_list.c	/^void handleClientsBlockedOnLists(void) {$/;"	f
handleLinkIOError	cluster.c	/^void handleLinkIOError(clusterLink *link) {$/;"	f
has_tail	config.c	/^    int has_tail;         \/* True if we already added directives that were$/;"	m	struct:rewriteConfigState	file:
hashDictType	gateway.c	/^dictType hashDictType = {$/;"	v
hashDictType	redis-gateway.c	/^dictType hashDictType = {$/;"	v
hashDictType	redis.c	/^dictType hashDictType = {$/;"	v
hashTypeConvert	t_hash.c	/^void hashTypeConvert(robj *o, int enc) {$/;"	f
hashTypeConvertZiplist	t_hash.c	/^void hashTypeConvertZiplist(robj *o, int enc) {$/;"	f
hashTypeCurrentFromHashTable	t_hash.c	/^void hashTypeCurrentFromHashTable(hashTypeIterator *hi, int what, robj **dst) {$/;"	f
hashTypeCurrentFromZiplist	t_hash.c	/^void hashTypeCurrentFromZiplist(hashTypeIterator *hi, int what,$/;"	f
hashTypeCurrentObject	t_hash.c	/^robj *hashTypeCurrentObject(hashTypeIterator *hi, int what) {$/;"	f
hashTypeDelete	t_hash.c	/^int hashTypeDelete(robj *o, robj *field) {$/;"	f
hashTypeExists	t_hash.c	/^int hashTypeExists(robj *o, robj *field) {$/;"	f
hashTypeGetFromHashTable	t_hash.c	/^int hashTypeGetFromHashTable(robj *o, robj *field, robj **value) {$/;"	f
hashTypeGetFromZiplist	t_hash.c	/^int hashTypeGetFromZiplist(robj *o, robj *field,$/;"	f
hashTypeGetObject	t_hash.c	/^robj *hashTypeGetObject(robj *o, robj *field) {$/;"	f
hashTypeInitIterator	t_hash.c	/^hashTypeIterator *hashTypeInitIterator(robj *subject) {$/;"	f
hashTypeLength	t_hash.c	/^unsigned long hashTypeLength(robj *o) {$/;"	f
hashTypeLookupWriteOrCreate	t_hash.c	/^robj *hashTypeLookupWriteOrCreate(redisClient *c, robj *key) {$/;"	f
hashTypeNext	t_hash.c	/^int hashTypeNext(hashTypeIterator *hi) {$/;"	f
hashTypeReleaseIterator	t_hash.c	/^void hashTypeReleaseIterator(hashTypeIterator *hi) {$/;"	f
hashTypeSet	t_hash.c	/^int hashTypeSet(robj *o, robj *field, robj *value) {$/;"	f
hashTypeTryConversion	t_hash.c	/^void hashTypeTryConversion(robj *o, robj **argv, int start, int end) {$/;"	f
hashTypeTryObjectEncoding	t_hash.c	/^void hashTypeTryObjectEncoding(robj *subject, robj **o1, robj **o2) {$/;"	f
hdelCommand	t_hash.c	/^void hdelCommand(redisClient *c) {$/;"	f
headersize	ziplist.c	/^    unsigned int headersize;$/;"	m	struct:zlentry	file:
helpEntries	gateway-back.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntries	gateway-lib.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntries	redis-cli.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntries	redis-cli2.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntries	redis-gateway2.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntriesLen	gateway-back.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntriesLen	gateway-lib.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntriesLen	redis-cli.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntriesLen	redis-cli2.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntriesLen	redis-gateway2.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntry	gateway-back.c	/^} helpEntry;$/;"	t	typeref:struct:__anon2	file:
helpEntry	gateway-lib.c	/^} helpEntry;$/;"	t	typeref:struct:__anon3	file:
helpEntry	redis-cli.c	/^} helpEntry;$/;"	t	typeref:struct:__anon8	file:
helpEntry	redis-cli2.c	/^} helpEntry;$/;"	t	typeref:struct:__anon7	file:
helpEntry	redis-gateway2.c	/^} helpEntry;$/;"	t	typeref:struct:__anon9	file:
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f
hexistsCommand	t_hash.c	/^void hexistsCommand(redisClient *c) {$/;"	f
hgetCommand	t_hash.c	/^void hgetCommand(redisClient *c) {$/;"	f
hgetallCommand	t_hash.c	/^void hgetallCommand(redisClient *c) {$/;"	f
hincrbyCommand	t_hash.c	/^void hincrbyCommand(redisClient *c) {$/;"	f
hincrbyfloatCommand	t_hash.c	/^void hincrbyfloatCommand(redisClient *c) {$/;"	f
hkeysCommand	t_hash.c	/^void hkeysCommand(redisClient *c) {$/;"	f
hlenCommand	t_hash.c	/^void hlenCommand(redisClient *c) {$/;"	f
hllAdd	hyperloglog.c	/^int hllAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f
hllCount	hyperloglog.c	/^uint64_t hllCount(struct hllhdr *hdr, int *invalid) {$/;"	f
hllDenseAdd	hyperloglog.c	/^int hllDenseAdd(uint8_t *registers, unsigned char *ele, size_t elesize) {$/;"	f
hllDenseSum	hyperloglog.c	/^double hllDenseSum(uint8_t *registers, double *PE, int *ezp) {$/;"	f
hllMerge	hyperloglog.c	/^int hllMerge(uint8_t *max, robj *hll) {$/;"	f
hllPatLen	hyperloglog.c	/^int hllPatLen(unsigned char *ele, size_t elesize, long *regp) {$/;"	f
hllRawSum	hyperloglog.c	/^double hllRawSum(uint8_t *registers, double *PE, int *ezp) {$/;"	f
hllSparseAdd	hyperloglog.c	/^int hllSparseAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f
hllSparseSum	hyperloglog.c	/^double hllSparseSum(uint8_t *sparse, int sparselen, double *PE, int *ezp, int *invalid) {$/;"	f
hllSparseToDense	hyperloglog.c	/^int hllSparseToDense(robj *o) {$/;"	f
hllhdr	hyperloglog.c	/^struct hllhdr {$/;"	s	file:
hmgetCommand	t_hash.c	/^void hmgetCommand(redisClient *c) {$/;"	f
hmsetCommand	t_hash.c	/^void hmsetCommand(redisClient *c) {$/;"	f
hostip	gateway-back.c	/^    char *hostip;$/;"	m	struct:config	file:
hostip	gateway-lib.c	/^    char *hostip;$/;"	m	struct:config	file:
hostip	redis-benchmark.c	/^    const char *hostip;$/;"	m	struct:config	file:
hostip	redis-cli.c	/^    char *hostip;$/;"	m	struct:config	file:
hostip	redis-cli2.c	/^    char *hostip;$/;"	m	struct:config	file:
hostip	redis-gateway2.c	/^    char *hostip;$/;"	m	struct:config	file:
hostport	gateway-back.c	/^    int hostport;$/;"	m	struct:config	file:
hostport	gateway-lib.c	/^    int hostport;$/;"	m	struct:config	file:
hostport	redis-benchmark.c	/^    int hostport;$/;"	m	struct:config	file:
hostport	redis-cli.c	/^    int hostport;$/;"	m	struct:config	file:
hostport	redis-cli2.c	/^    int hostport;$/;"	m	struct:config	file:
hostport	redis-gateway2.c	/^    int hostport;$/;"	m	struct:config	file:
hostsocket	gateway-back.c	/^    char *hostsocket;$/;"	m	struct:config	file:
hostsocket	gateway-lib.c	/^    char *hostsocket;$/;"	m	struct:config	file:
hostsocket	redis-benchmark.c	/^    const char *hostsocket;$/;"	m	struct:config	file:
hostsocket	redis-cli.c	/^    char *hostsocket;$/;"	m	struct:config	file:
hostsocket	redis-cli2.c	/^    char *hostsocket;$/;"	m	struct:config	file:
hostsocket	redis-gateway2.c	/^    char *hostsocket;$/;"	m	struct:config	file:
hscanCommand	t_hash.c	/^void hscanCommand(redisClient *c) {$/;"	f
hsetCommand	t_hash.c	/^void hsetCommand(redisClient *c) {$/;"	f
hsetnxCommand	t_hash.c	/^void hsetnxCommand(redisClient *c) {$/;"	f
ht	t_zset.c	/^            } ht;$/;"	m	union:__anon11::__anon12::_iterset	typeref:struct:__anon11::__anon12::_iterset::__anon14	file:
htNeedsResize	gateway.c	/^int htNeedsResize(dict *dict) {$/;"	f
htNeedsResize	redis-gateway.c	/^int htNeedsResize(dict *dict) {$/;"	f
htNeedsResize	redis.c	/^int htNeedsResize(dict *dict) {$/;"	f
hvalsCommand	t_hash.c	/^void hvalsCommand(redisClient *c) {$/;"	f
idlemode	redis-benchmark.c	/^    int idlemode;$/;"	m	struct:config	file:
ii	t_zset.c	/^                int ii;$/;"	m	struct:__anon11::__anon12::_iterset::__anon13	file:
incrCommand	gateway-front.c	/^void incrCommand(redisClient *c) {$/;"	f
incrCommand	t_string.c	/^void incrCommand(redisClient *c) {$/;"	f
incrDecrCommand	gateway-front.c	/^void incrDecrCommand(redisClient *c, long long incr) {$/;"	f
incrDecrCommand	t_string.c	/^void incrDecrCommand(redisClient *c, long long incr) {$/;"	f
incrRefCount	object.c	/^void incrRefCount(robj *o) {$/;"	f
incrbyCommand	gateway-front.c	/^void incrbyCommand(redisClient *c) {$/;"	f
incrbyCommand	t_string.c	/^void incrbyCommand(redisClient *c) {$/;"	f
incrbyfloatCommand	gateway-front.c	/^void incrbyfloatCommand(redisClient *c) {$/;"	f
incrbyfloatCommand	t_string.c	/^void incrbyfloatCommand(redisClient *c) {$/;"	f
incrementallyRehash	gateway.c	/^int incrementallyRehash(int dbid) {$/;"	f
incrementallyRehash	redis-gateway.c	/^int incrementallyRehash(int dbid) {$/;"	f
incrementallyRehash	redis.c	/^int incrementallyRehash(int dbid) {$/;"	f
infoCommand	gateway.c	/^void infoCommand(redisClient *c) {$/;"	f
infoCommand	redis-gateway.c	/^void infoCommand(redisClient *c) {$/;"	f
infoCommand	redis.c	/^void infoCommand(redisClient *c) {$/;"	f
info_refresh	sentinel.c	/^    mstime_t info_refresh;  \/* Time at which we received INFO output from it. *\/$/;"	m	struct:sentinelRedisInstance	file:
initClientMultiState	multi.c	/^void initClientMultiState(redisClient *c) {$/;"	f
initConnectConfig	gateway-back.c	/^void initConnectConfig(int sn)$/;"	f
initConnectConfig	gateway-lib.c	/^void initConnectConfig(int sn)$/;"	f
initSentinel	sentinel.c	/^void initSentinel(void) {$/;"	f
initSentinelConfig	sentinel.c	/^void initSentinelConfig(void) {$/;"	f
initServer	gateway.c	/^void initServer(void) {$/;"	f
initServer	redis-gateway.c	/^void initServer(void) {$/;"	f
initServer	redis.c	/^void initServer(void) {$/;"	f
initServerConfig	gateway.c	/^void initServerConfig(void) {$/;"	f
initServerConfig	redis-gateway.c	/^void initServerConfig(void) {$/;"	f
initServerConfig	redis.c	/^void initServerConfig(void) {$/;"	f
inline	lzf_c.c	80;"	d	file:
inline	lzf_c.c	83;"	d	file:
instancesDictType	sentinel.c	/^dictType instancesDictType = {$/;"	v
interactive	gateway-back.c	/^    int interactive;$/;"	m	struct:config	file:
interactive	gateway-lib.c	/^    int interactive;$/;"	m	struct:config	file:
interactive	redis-cli.c	/^    int interactive;$/;"	m	struct:config	file:
interactive	redis-cli2.c	/^    int interactive;$/;"	m	struct:config	file:
interactive	redis-gateway2.c	/^    int interactive;$/;"	m	struct:config	file:
interval	gateway-back.c	/^    long interval;$/;"	m	struct:config	file:
interval	gateway-lib.c	/^    long interval;$/;"	m	struct:config	file:
interval	redis-cli.c	/^    long interval;$/;"	m	struct:config	file:
interval	redis-cli2.c	/^    long interval;$/;"	m	struct:config	file:
interval	redis-gateway2.c	/^    long interval;$/;"	m	struct:config	file:
intrev16	endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f
intrev32	endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f
intrev64	endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f
intrinsicLatencyMode	gateway-back.c	/^static void intrinsicLatencyMode(int sn) {$/;"	f	file:
intrinsicLatencyMode	gateway-lib.c	/^static void intrinsicLatencyMode(int sn) {$/;"	f	file:
intrinsicLatencyMode	redis-cli.c	/^static void intrinsicLatencyMode(void) {$/;"	f	file:
intrinsicLatencyMode	redis-cli2.c	/^static void intrinsicLatencyMode(void) {$/;"	f	file:
intrinsicLatencyMode	redis-gateway2.c	/^static void intrinsicLatencyMode(void) {$/;"	f	file:
intrinsicLatencyModeStop	gateway-back.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:
intrinsicLatencyModeStop	gateway-lib.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:
intrinsicLatencyModeStop	redis-cli.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:
intrinsicLatencyModeStop	redis-cli2.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:
intrinsicLatencyModeStop	redis-gateway2.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:
intrinsic_latency_duration	gateway-back.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:
intrinsic_latency_duration	gateway-lib.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:
intrinsic_latency_duration	redis-cli.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:
intrinsic_latency_duration	redis-cli2.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:
intrinsic_latency_duration	redis-gateway2.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:
intrinsic_latency_mode	gateway-back.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:
intrinsic_latency_mode	gateway-lib.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:
intrinsic_latency_mode	redis-cli.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:
intrinsic_latency_mode	redis-cli2.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:
intrinsic_latency_mode	redis-gateway2.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:
intsetAdd	intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f
intsetBlobLen	intset.c	/^size_t intsetBlobLen(intset *is) {$/;"	f
intsetFind	intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f
intsetGet	intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f
intsetLen	intset.c	/^uint32_t intsetLen(intset *is) {$/;"	f
intsetMoveTail	intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:
intsetNew	intset.c	/^intset *intsetNew(void) {$/;"	f
intsetRandom	intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f
intsetRemove	intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f
intsetRepr	intset.c	/^void intsetRepr(intset *is) {$/;"	f
intsetResize	intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:
intsetSearch	intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:
intsetUpgradeAndAdd	intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:
invalid_hll_err	hyperloglog.c	/^static char *invalid_hll_err = "-INVALIDOBJ Corrupted HLL object detected\\r\\n";$/;"	v	file:
ip	sentinel.c	/^    char *ip;$/;"	m	struct:sentinelAddr	file:
is	t_zset.c	/^                intset *is;$/;"	m	struct:__anon11::__anon12::_iterset::__anon13	file:
is	t_zset.c	/^            } is;$/;"	m	union:__anon11::__anon12::_iterset	typeref:struct:__anon11::__anon12::_iterset::__anon13	file:
isHLLObjectOrReply	hyperloglog.c	/^int isHLLObjectOrReply(redisClient *c, robj *o) {$/;"	f
isObjectRepresentableAsLongLong	object.c	/^int isObjectRepresentableAsLongLong(robj *o, long long *llval) {$/;"	f
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f
issueCommand	gateway-back.c	/^static int issueCommand(int argc, char **argv, int sn) {$/;"	f	file:
issueCommand	gateway-lib.c	/^static int issueCommand(int argc, char **argv, int sn) {$/;"	f	file:
issueCommand	redis-cli.c	/^static int issueCommand(int argc, char **argv) {$/;"	f	file:
issueCommand	redis-cli2.c	/^static int issueCommand(int argc, char **argv) {$/;"	f	file:
issueCommand	redis-gateway2.c	/^static int issueCommand(int argc, char **argv) {$/;"	f	file:
issueCommandRepeat	gateway-back.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat, int sn) {$/;"	f	file:
issueCommandRepeat	gateway-lib.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat, int sn) {$/;"	f	file:
issueCommandRepeat	redis-cli.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat) {$/;"	f	file:
issueCommandRepeat	redis-cli2.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat, int sn) {$/;"	f	file:
issueCommandRepeat	redis-gateway2.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat) {$/;"	f	file:
iter	t_zset.c	/^    } iter;$/;"	m	struct:__anon11	typeref:union:__anon11::__anon12	file:
iterset	t_zset.c	/^typedef union _iterset iterset;$/;"	t	typeref:union:_iterset	file:
iterzset	t_zset.c	/^typedef union _iterzset iterzset;$/;"	t	typeref:union:_iterzset	file:
keepalive	redis-benchmark.c	/^    int keepalive;$/;"	m	struct:config	file:
key	multi.c	/^    robj *key;$/;"	m	struct:watchedKey	file:
key	redis-check-dump.c	/^    char* key;$/;"	m	struct:__anon6	file:
keyHashSlot	cluster.c	/^unsigned int keyHashSlot(char *key, int keylen) {$/;"	f
keylistDictType	gateway.c	/^dictType keylistDictType = {$/;"	v
keylistDictType	redis-gateway.c	/^dictType keylistDictType = {$/;"	v
keylistDictType	redis.c	/^dictType keylistDictType = {$/;"	v
keyptrDictType	gateway.c	/^dictType keyptrDictType = {$/;"	v
keyptrDictType	redis-gateway.c	/^dictType keyptrDictType = {$/;"	v
keyptrDictType	redis.c	/^dictType keyptrDictType = {$/;"	v
keysCommand	db.c	/^void keysCommand(redisClient *c) {$/;"	f
keysize	redis-benchmark.c	/^    int keysize;$/;"	m	struct:config	file:
keyspaceEventsFlagsToString	notify.c	/^sds keyspaceEventsFlagsToString(int flags) {$/;"	f
keyspaceEventsStringToFlags	notify.c	/^int keyspaceEventsStringToFlags(char *classes) {$/;"	f
kqfd	ae_kqueue.c	/^    int kqfd;$/;"	m	struct:aeApiState	file:
label_margin_top	sparkline.c	/^static int label_margin_top = 1;$/;"	v	file:
last_avail_time	sentinel.c	/^    mstime_t last_avail_time; \/* Last time the instance replied to ping with$/;"	m	struct:sentinelRedisInstance	file:
last_cmd_type	gateway-back.c	/^    int last_cmd_type;$/;"	m	struct:config	file:
last_cmd_type	gateway-lib.c	/^    int last_cmd_type;$/;"	m	struct:config	file:
last_cmd_type	redis-cli.c	/^    int last_cmd_type;$/;"	m	struct:config	file:
last_cmd_type	redis-cli2.c	/^    int last_cmd_type;$/;"	m	struct:config	file:
last_cmd_type	redis-gateway2.c	/^    int last_cmd_type;$/;"	m	struct:config	file:
last_dbid	cluster.c	/^    long last_dbid;$/;"	m	struct:migrateCachedSocket	file:
last_hello_time	sentinel.c	/^    mstime_t last_hello_time; \/* Only used if SRI_SENTINEL is set. Last time$/;"	m	struct:sentinelRedisInstance	file:
last_master_down_reply_time	sentinel.c	/^    mstime_t last_master_down_reply_time; \/* Time of last reply to$/;"	m	struct:sentinelRedisInstance	file:
last_ping_time	sentinel.c	/^    mstime_t last_ping_time;  \/* Last time a pending ping was sent in the$/;"	m	struct:sentinelRedisInstance	file:
last_pong_time	sentinel.c	/^    mstime_t last_pong_time;  \/* Last time the instance replied to ping,$/;"	m	struct:sentinelRedisInstance	file:
last_pub_time	sentinel.c	/^    mstime_t last_pub_time;   \/* Last time we sent hello via Pub\/Sub. *\/$/;"	m	struct:sentinelRedisInstance	file:
last_use_time	cluster.c	/^    time_t last_use_time;$/;"	m	struct:migrateCachedSocket	file:
lastsaveCommand	db.c	/^void lastsaveCommand(redisClient *c) {$/;"	f
latency	redis-benchmark.c	/^    long long *latency;$/;"	m	struct:config	file:
latency	redis-benchmark.c	/^    long long latency;      \/* Request latency *\/$/;"	m	struct:_client	file:
latencyAddSample	latency.c	/^void latencyAddSample(char *event, mstime_t latency) {$/;"	f
latencyCommand	latency.c	/^void latencyCommand(redisClient *c) {$/;"	f
latencyCommandGenSparkeline	latency.c	/^sds latencyCommandGenSparkeline(char *event, struct latencyTimeSeries *ts) {$/;"	f
latencyCommandReplyWithLatestEvents	latency.c	/^void latencyCommandReplyWithLatestEvents(redisClient *c) {$/;"	f
latencyCommandReplyWithSamples	latency.c	/^void latencyCommandReplyWithSamples(redisClient *c, struct latencyTimeSeries *ts) {$/;"	f
latencyDistMode	gateway-back.c	/^static void latencyDistMode(int sn) {$/;"	f	file:
latencyDistMode	gateway-lib.c	/^static void latencyDistMode(int sn) {$/;"	f	file:
latencyDistMode	redis-cli.c	/^static void latencyDistMode(void) {$/;"	f	file:
latencyDistMode	redis-cli2.c	/^static void latencyDistMode(void) {$/;"	f	file:
latencyDistMode	redis-gateway2.c	/^static void latencyDistMode(void) {$/;"	f	file:
latencyMode	gateway-back.c	/^static void latencyMode(int sn) {$/;"	f	file:
latencyMode	gateway-lib.c	/^static void latencyMode(int sn) {$/;"	f	file:
latencyMode	redis-cli.c	/^static void latencyMode(void) {$/;"	f	file:
latencyMode	redis-cli2.c	/^static void latencyMode(void) {$/;"	f	file:
latencyMode	redis-gateway2.c	/^static void latencyMode(void) {$/;"	f	file:
latencyMonitorInit	latency.c	/^void latencyMonitorInit(void) {$/;"	f
latencyResetEvent	latency.c	/^int latencyResetEvent(char *event_to_reset) {$/;"	f
latencyTimeSeriesDictType	latency.c	/^dictType latencyTimeSeriesDictType = {$/;"	v
latency_dist_mode	gateway-back.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:
latency_dist_mode	gateway-lib.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:
latency_dist_mode	redis-cli.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:
latency_dist_mode	redis-cli2.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:
latency_dist_mode	redis-gateway2.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:
latency_history	gateway-back.c	/^    int latency_history;$/;"	m	struct:config	file:
latency_history	gateway-lib.c	/^    int latency_history;$/;"	m	struct:config	file:
latency_history	redis-cli.c	/^    int latency_history;$/;"	m	struct:config	file:
latency_history	redis-cli2.c	/^    int latency_history;$/;"	m	struct:config	file:
latency_history	redis-gateway2.c	/^    int latency_history;$/;"	m	struct:config	file:
latency_mode	gateway-back.c	/^    int latency_mode;$/;"	m	struct:config	file:
latency_mode	gateway-lib.c	/^    int latency_mode;$/;"	m	struct:config	file:
latency_mode	redis-cli.c	/^    int latency_mode;$/;"	m	struct:config	file:
latency_mode	redis-cli2.c	/^    int latency_mode;$/;"	m	struct:config	file:
latency_mode	redis-gateway2.c	/^    int latency_mode;$/;"	m	struct:config	file:
leader	sentinel.c	/^    char *leader;       \/* If this is a master instance, this is the runid of$/;"	m	struct:sentinelRedisInstance	file:
leaderVotesDictType	sentinel.c	/^dictType leaderVotesDictType = {$/;"	v
leader_epoch	sentinel.c	/^    uint64_t leader_epoch; \/* Epoch of the 'leader' field. *\/$/;"	m	struct:sentinelRedisInstance	file:
len	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
lensize	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
level	redis-check-dump.c	/^    size_t level;$/;"	m	struct:__anon5	file:
level	redis-check-dump.c	/^static unsigned char level = 0;$/;"	v	file:
lindexCommand	t_list.c	/^void lindexCommand(redisClient *c) {$/;"	f
lines	config.c	/^    sds *lines;           \/* Current lines as an array of sds strings *\/$/;"	m	struct:rewriteConfigState	file:
linsertCommand	t_list.c	/^void linsertCommand(redisClient *c) {$/;"	f
linuxMemoryWarnings	gateway.c	/^void linuxMemoryWarnings(void) {$/;"	f
linuxMemoryWarnings	redis-gateway.c	/^void linuxMemoryWarnings(void) {$/;"	f
linuxMemoryWarnings	redis.c	/^void linuxMemoryWarnings(void) {$/;"	f
linuxOvercommitMemoryValue	gateway.c	/^int linuxOvercommitMemoryValue(void) {$/;"	f
linuxOvercommitMemoryValue	redis-gateway.c	/^int linuxOvercommitMemoryValue(void) {$/;"	f
linuxOvercommitMemoryValue	redis.c	/^int linuxOvercommitMemoryValue(void) {$/;"	f
listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	adlist.c	/^list *listDup(list *orig)$/;"	f
listGetIterator	adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listIndex	adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f
listInsertNode	adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listMatchObjects	networking.c	/^int listMatchObjects(void *a, void *b) {$/;"	f
listMatchPubsubPattern	pubsub.c	/^int listMatchPubsubPattern(void *a, void *b) {$/;"	f
listNext	adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listRelease	adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listRotate	adlist.c	/^void listRotate(list *list) {$/;"	f
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listTypeConvert	t_list.c	/^void listTypeConvert(robj *subject, int enc) {$/;"	f
listTypeDelete	t_list.c	/^void listTypeDelete(listTypeEntry *entry) {$/;"	f
listTypeEqual	t_list.c	/^int listTypeEqual(listTypeEntry *entry, robj *o) {$/;"	f
listTypeGet	t_list.c	/^robj *listTypeGet(listTypeEntry *entry) {$/;"	f
listTypeInitIterator	t_list.c	/^listTypeIterator *listTypeInitIterator(robj *subject, long index, unsigned char direction) {$/;"	f
listTypeInsert	t_list.c	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where) {$/;"	f
listTypeLength	t_list.c	/^unsigned long listTypeLength(robj *subject) {$/;"	f
listTypeNext	t_list.c	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry) {$/;"	f
listTypePop	t_list.c	/^robj *listTypePop(robj *subject, int where) {$/;"	f
listTypePush	t_list.c	/^void listTypePush(robj *subject, robj *value, int where) {$/;"	f
listTypeReleaseIterator	t_list.c	/^void listTypeReleaseIterator(listTypeIterator *li) {$/;"	f
listTypeTryConversion	t_list.c	/^void listTypeTryConversion(robj *subject, robj *value) {$/;"	f
listenToPort	gateway.c	/^int listenToPort(int port, int *fds, int *count) {$/;"	f
listenToPort	redis-gateway.c	/^int listenToPort(int port, int *fds, int *count) {$/;"	f
listenToPort	redis.c	/^int listenToPort(int port, int *fds, int *count) {$/;"	f
liveclients	redis-benchmark.c	/^    int liveclients;$/;"	m	struct:config	file:
ll2string	util.c	/^int ll2string(char* dst, size_t dstlen, long long svalue) {$/;"	f
llenCommand	t_list.c	/^void llenCommand(redisClient *c) {$/;"	f
loadAppendOnlyFile	aof.c	/^int loadAppendOnlyFile(char *filename) {$/;"	f
loadDataFromDisk	gateway.c	/^void loadDataFromDisk(void) {$/;"	f
loadDataFromDisk	redis-gateway.c	/^void loadDataFromDisk(void) {$/;"	f
loadDataFromDisk	redis.c	/^void loadDataFromDisk(void) {$/;"	f
loadDoubleValue	redis-check-dump.c	/^double* loadDoubleValue() {$/;"	f
loadEntry	redis-check-dump.c	/^entry loadEntry() {$/;"	f
loadIntegerObject	redis-check-dump.c	/^char *loadIntegerObject(int enctype) {$/;"	f
loadLength	redis-check-dump.c	/^uint32_t loadLength(int *isencoded) {$/;"	f
loadLzfStringObject	redis-check-dump.c	/^char* loadLzfStringObject() {$/;"	f
loadPair	redis-check-dump.c	/^int loadPair(entry *e) {$/;"	f
loadServerConfig	config.c	/^void loadServerConfig(char *filename, char *options) {$/;"	f
loadServerConfigFromString	config.c	/^void loadServerConfigFromString(char *config) {$/;"	f
loadStringObject	redis-check-dump.c	/^char* loadStringObject() {$/;"	f
loadType	redis-check-dump.c	/^int loadType(entry *e) {$/;"	f
loadingProgress	rdb.c	/^void loadingProgress(off_t pos) {$/;"	f
logCurrentClient	debug.c	/^void logCurrentClient(void) {$/;"	f
logRegisters	debug.c	/^void logRegisters(ucontext_t *uc) {$/;"	f
logStackContent	debug.c	/^void logStackContent(void **sp) {$/;"	f
logStackTrace	debug.c	/^void logStackTrace(ucontext_t *uc) {$/;"	f
lookupCommand	gateway.c	/^struct redisCommand *lookupCommand(sds name) {$/;"	f
lookupCommand	redis-gateway.c	/^struct redisCommand *lookupCommand(sds name) {$/;"	f
lookupCommand	redis.c	/^struct redisCommand *lookupCommand(sds name) {$/;"	f
lookupCommandByCString	gateway.c	/^struct redisCommand *lookupCommandByCString(char *s) {$/;"	f
lookupCommandByCString	redis-gateway.c	/^struct redisCommand *lookupCommandByCString(char *s) {$/;"	f
lookupCommandByCString	redis.c	/^struct redisCommand *lookupCommandByCString(char *s) {$/;"	f
lookupCommandOrOriginal	gateway.c	/^struct redisCommand *lookupCommandOrOriginal(sds name) {$/;"	f
lookupCommandOrOriginal	redis-gateway.c	/^struct redisCommand *lookupCommandOrOriginal(sds name) {$/;"	f
lookupCommandOrOriginal	redis.c	/^struct redisCommand *lookupCommandOrOriginal(sds name) {$/;"	f
lookupKey	db.c	/^robj *lookupKey(redisDb *db, robj *key) {$/;"	f
lookupKeyByPattern	sort.c	/^robj *lookupKeyByPattern(redisDb *db, robj *pattern, robj *subst) {$/;"	f
lookupKeyRead	db.c	/^robj *lookupKeyRead(redisDb *db, robj *key) {$/;"	f
lookupKeyReadOrReply	db.c	/^robj *lookupKeyReadOrReply(redisClient *c, robj *key, robj *reply) {$/;"	f
lookupKeyWrite	db.c	/^robj *lookupKeyWrite(redisDb *db, robj *key) {$/;"	f
lookupKeyWriteOrReply	db.c	/^robj *lookupKeyWriteOrReply(redisClient *c, robj *key, robj *reply) {$/;"	f
loop	redis-benchmark.c	/^    int loop;$/;"	m	struct:config	file:
loop	sentinel.c	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	file:
lpopCommand	t_list.c	/^void lpopCommand(redisClient *c) {$/;"	f
lpushCommand	t_list.c	/^void lpushCommand(redisClient *c) {$/;"	f
lpushxCommand	t_list.c	/^void lpushxCommand(redisClient *c) {$/;"	f
lrangeCommand	t_list.c	/^void lrangeCommand(redisClient *c) {$/;"	f
lremCommand	t_list.c	/^void lremCommand(redisClient *c) {$/;"	f
lru_test_mode	gateway-back.c	/^    int lru_test_mode;$/;"	m	struct:config	file:
lru_test_mode	gateway-lib.c	/^    int lru_test_mode;$/;"	m	struct:config	file:
lru_test_mode	redis-cli.c	/^    int lru_test_mode;$/;"	m	struct:config	file:
lru_test_mode	redis-cli2.c	/^    int lru_test_mode;$/;"	m	struct:config	file:
lru_test_mode	redis-gateway2.c	/^    int lru_test_mode;$/;"	m	struct:config	file:
lru_test_sample_size	gateway-back.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:
lru_test_sample_size	gateway-lib.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:
lru_test_sample_size	redis-cli.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:
lru_test_sample_size	redis-cli2.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:
lru_test_sample_size	redis-gateway2.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:
lsetCommand	t_list.c	/^void lsetCommand(redisClient *c) {$/;"	f
ltrimCommand	t_list.c	/^void ltrimCommand(redisClient *c) {$/;"	f
luaCreateFunction	scripting.c	/^int luaCreateFunction(redisClient *c, lua_State *lua, char *funcname, robj *body) {$/;"	f
luaLoadLib	scripting.c	/^void luaLoadLib(lua_State *lua, const char *libname, lua_CFunction luafunc) {$/;"	f
luaLoadLibraries	scripting.c	/^void luaLoadLibraries(lua_State *lua) {$/;"	f
luaLogCommand	scripting.c	/^int luaLogCommand(lua_State *lua) {$/;"	f
luaMaskCountHook	scripting.c	/^void luaMaskCountHook(lua_State *lua, lua_Debug *ar) {$/;"	f
luaPushError	scripting.c	/^void luaPushError(lua_State *lua, char *error) {$/;"	f
luaRedisCallCommand	scripting.c	/^int luaRedisCallCommand(lua_State *lua) {$/;"	f
luaRedisErrorReplyCommand	scripting.c	/^int luaRedisErrorReplyCommand(lua_State *lua) {$/;"	f
luaRedisGenericCommand	scripting.c	/^int luaRedisGenericCommand(lua_State *lua, int raise_error) {$/;"	f
luaRedisPCallCommand	scripting.c	/^int luaRedisPCallCommand(lua_State *lua) {$/;"	f
luaRedisReturnSingleFieldTable	scripting.c	/^int luaRedisReturnSingleFieldTable(lua_State *lua, char *field) {$/;"	f
luaRedisSha1hexCommand	scripting.c	/^int luaRedisSha1hexCommand(lua_State *lua) {$/;"	f
luaRedisStatusReplyCommand	scripting.c	/^int luaRedisStatusReplyCommand(lua_State *lua) {$/;"	f
luaRemoveUnsupportedFunctions	scripting.c	/^void luaRemoveUnsupportedFunctions(lua_State *lua) {$/;"	f
luaReplyToRedisReply	scripting.c	/^void luaReplyToRedisReply(redisClient *c, lua_State *lua) {$/;"	f
luaSetGlobalArray	scripting.c	/^void luaSetGlobalArray(lua_State *lua, char *var, robj **elev, int elec) {$/;"	f
luaSortArray	scripting.c	/^void luaSortArray(lua_State *lua) {$/;"	f
lzf_compress	lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f
lzf_decompress	lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f
magic	hyperloglog.c	/^    char magic[4];      \/* "HYLL" *\/$/;"	m	struct:hllhdr	file:
main	crc64.c	/^int main(void) {$/;"	f
main	endianconv.c	/^int main(void) {$/;"	f
main	gateway-back.c	/^int main(int argc, char **argv) {$/;"	f
main	gateway-lib.c	/^int main(int argc, char **argv) {$/;"	f
main	gateway.c	/^int main(int argc, char **argv) {$/;"	f
main	intset.c	/^int main(int argc, char **argv) {$/;"	f
main	redis-benchmark.c	/^int main(int argc, const char **argv) {$/;"	f
main	redis-check-aof.c	/^int main(int argc, char **argv) {$/;"	f
main	redis-check-dump.c	/^int main(int argc, char **argv) {$/;"	f
main	redis-cli.c	/^int main(int argc, char **argv) {$/;"	f
main	redis-cli2.c	/^int main(int argc, char **argv) {$/;"	f
main	redis-gateway.c	/^int main(int argc, char **argv) {$/;"	f
main	redis-gateway2.c	/^int main(int argc, char **argv) {$/;"	f
main	redis.c	/^int main(int argc, char **argv) {$/;"	f
main	sds.c	/^int main(void) {$/;"	f
main	util.c	/^int main(int argc, char **argv) {$/;"	f
main	ziplist.c	/^int main(int argc, char **argv) {$/;"	f
main	zipmap.c	/^int main(void) {$/;"	f
malloc	zmalloc.c	59;"	d	file:
malloc	zmalloc.c	64;"	d	file:
manualFailoverCheckTimeout	cluster.c	/^void manualFailoverCheckTimeout(void) {$/;"	f
markNodeAsFailingIfNeeded	cluster.c	/^void markNodeAsFailingIfNeeded(clusterNode *node) {$/;"	f
master	sentinel.c	/^    struct sentinelRedisInstance *master; \/* Master instance if it's slave. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:
masterTryPartialResynchronization	replication.c	/^int masterTryPartialResynchronization(redisClient *c) {$/;"	f
master_link_down_time	sentinel.c	/^    mstime_t master_link_down_time; \/* Slave replication link down time. *\/$/;"	m	struct:sentinelRedisInstance	file:
masters	sentinel.c	/^    dict *masters;      \/* Dictionary of master sentinelRedisInstances.$/;"	m	struct:sentinelState	file:
max	gateway-back.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:
max	gateway-lib.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:
max	redis-cli.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:
max	redis-cli2.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:
max	redis-gateway2.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:
mb_delim	gateway-back.c	/^    sds mb_delim;$/;"	m	struct:config	file:
mb_delim	gateway-lib.c	/^    sds mb_delim;$/;"	m	struct:config	file:
mb_delim	redis-cli.c	/^    sds mb_delim;$/;"	m	struct:config	file:
mb_delim	redis-cli2.c	/^    sds mb_delim;$/;"	m	struct:config	file:
mb_delim	redis-gateway2.c	/^    sds mb_delim;$/;"	m	struct:config	file:
med3	pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	file:
memrev16	endianconv.c	/^void memrev16(void *p) {$/;"	f
memrev32	endianconv.c	/^void memrev32(void *p) {$/;"	f
memrev64	endianconv.c	/^void memrev64(void *p) {$/;"	f
memtest	memtest.c	/^void memtest(size_t megabytes, int passes) {$/;"	f
memtest_addressing	memtest.c	/^void memtest_addressing(unsigned long *l, size_t bytes) {$/;"	f
memtest_compare	memtest.c	/^void memtest_compare(unsigned long *l, size_t bytes) {$/;"	f
memtest_compare_times	memtest.c	/^void memtest_compare_times(unsigned long *m, size_t bytes, int pass, int times) {$/;"	f
memtest_fill_random	memtest.c	/^void memtest_fill_random(unsigned long *l, size_t bytes) {$/;"	f
memtest_fill_value	memtest.c	/^void memtest_fill_value(unsigned long *l, size_t bytes, unsigned long v1,$/;"	f
memtest_non_destructive_invert	memtest.c	/^void memtest_non_destructive_invert(void *addr, size_t size) {$/;"	f
memtest_non_destructive_swap	memtest.c	/^void memtest_non_destructive_swap(void *addr, size_t size) {$/;"	f
memtest_progress_end	memtest.c	/^void memtest_progress_end(void) {$/;"	f
memtest_progress_start	memtest.c	/^void memtest_progress_start(char *title, int pass) {$/;"	f
memtest_progress_step	memtest.c	/^void memtest_progress_step(size_t curr, size_t size, char c) {$/;"	f
memtest_test	memtest.c	/^void memtest_test(size_t megabytes, int passes) {$/;"	f
memtest_test_linux_anonymous_maps	debug.c	/^int memtest_test_linux_anonymous_maps(void) {$/;"	f
memtoll	util.c	/^long long memtoll(const char *p, int *err) {$/;"	f
mgetCommand	gateway-front.c	/^void mgetCommand(redisClient *c) {$/;"	f
mgetCommand	t_string.c	/^void mgetCommand(redisClient *c) {$/;"	f
migrateCacheDictType	gateway.c	/^dictType migrateCacheDictType = {$/;"	v
migrateCacheDictType	redis-gateway.c	/^dictType migrateCacheDictType = {$/;"	v
migrateCacheDictType	redis.c	/^dictType migrateCacheDictType = {$/;"	v
migrateCachedSocket	cluster.c	/^typedef struct migrateCachedSocket {$/;"	s	file:
migrateCachedSocket	cluster.c	/^} migrateCachedSocket;$/;"	t	typeref:struct:migrateCachedSocket	file:
migrateCloseSocket	cluster.c	/^void migrateCloseSocket(robj *host, robj *port) {$/;"	f
migrateCloseTimedoutSockets	cluster.c	/^void migrateCloseTimedoutSockets(void) {$/;"	f
migrateCommand	cluster.c	/^void migrateCommand(redisClient *c) {$/;"	f
migrateGetKeys	db.c	/^int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
migrateGetSocket	cluster.c	/^migrateCachedSocket* migrateGetSocket(redisClient *c, robj *host, robj *port, long timeout) {$/;"	f
min	pqsort.c	49;"	d	file:
mixDigest	debug.c	/^void mixDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f
mixObjectDigest	debug.c	/^void mixObjectDigest(unsigned char *digest, robj *o) {$/;"	f
monitorCommand	gateway.c	/^void monitorCommand(redisClient *c) {$/;"	f
monitorCommand	redis-gateway.c	/^void monitorCommand(redisClient *c) {$/;"	f
monitorCommand	redis.c	/^void monitorCommand(redisClient *c) {$/;"	f
monitor_mode	gateway-back.c	/^    int monitor_mode;$/;"	m	struct:config	file:
monitor_mode	gateway-lib.c	/^    int monitor_mode;$/;"	m	struct:config	file:
monitor_mode	redis-cli.c	/^    int monitor_mode;$/;"	m	struct:config	file:
monitor_mode	redis-cli2.c	/^    int monitor_mode;$/;"	m	struct:config	file:
monitor_mode	redis-gateway2.c	/^    int monitor_mode;$/;"	m	struct:config	file:
moveCommand	db.c	/^void moveCommand(redisClient *c) {$/;"	f
msetCommand	gateway-front.c	/^void msetCommand(redisClient *c) {$/;"	f
msetCommand	t_string.c	/^void msetCommand(redisClient *c) {$/;"	f
msetGenericCommand	gateway-front.c	/^void msetGenericCommand(redisClient *c, int nx) {$/;"	f
msetGenericCommand	t_string.c	/^void msetGenericCommand(redisClient *c, int nx) {$/;"	f
msetnxCommand	gateway-front.c	/^void msetnxCommand(redisClient *c) {$/;"	f
msetnxCommand	t_string.c	/^void msetnxCommand(redisClient *c) {$/;"	f
mstime	gateway-back.c	/^static long long mstime(void) {$/;"	f	file:
mstime	gateway-lib.c	/^static long long mstime(void) {$/;"	f	file:
mstime	gateway.c	/^long long mstime(void) {$/;"	f
mstime	redis-benchmark.c	/^static long long mstime(void) {$/;"	f	file:
mstime	redis-cli.c	/^static long long mstime(void) {$/;"	f	file:
mstime	redis-cli2.c	/^static long long mstime(void) {$/;"	f	file:
mstime	redis-gateway.c	/^long long mstime(void) {$/;"	f
mstime	redis-gateway2.c	/^static long long mstime(void) {$/;"	f	file:
mstime	redis.c	/^long long mstime(void) {$/;"	f
multiCommand	multi.c	/^void multiCommand(redisClient *c) {$/;"	f
myself	cluster.c	/^clusterNode *myself = NULL;$/;"	v
name	cluster.c	/^    char *name;$/;"	m	struct:redisNodeFlags	file:
name	config.c	/^    const char     *name;$/;"	m	struct:__anon1	file:
name	sentinel.c	/^    char *name;     \/* Master name from the point of view of this sentinel. *\/$/;"	m	struct:sentinelRedisInstance	file:
next	rand.c	/^static void next(void) {$/;"	f	file:
node	t_zset.c	/^                zskiplistNode *node;$/;"	m	struct:__anon11::__anon12::_iterzset::__anon16	file:
nodeIp2String	cluster.c	/^void nodeIp2String(char *buf, clusterLink *link) {$/;"	f
nodeUpdateAddressIfNeeded	cluster.c	/^int nodeUpdateAddressIfNeeded(clusterNode *node, clusterLink *link, int port) {$/;"	f
noninteractive	gateway-back.c	/^static int noninteractive(int argc, char **argv, int sn) {$/;"	f	file:
noninteractive	gateway-lib.c	/^static int noninteractive(int argc, char **argv, int sn) {$/;"	f	file:
noninteractive	redis-cli.c	/^static int noninteractive(int argc, char **argv) {$/;"	f	file:
noninteractive	redis-cli2.c	/^static int noninteractive(int argc, char **argv) {$/;"	f	file:
noninteractive	redis-gateway2.c	/^static int noninteractive(int argc, char **argv) {$/;"	f	file:
notification_script	sentinel.c	/^    char *notification_script;$/;"	m	struct:sentinelRedisInstance	file:
notifyKeyspaceEvent	notify.c	/^void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid) {$/;"	f
notused	hyperloglog.c	/^    uint8_t notused[3]; \/* Reserved for future use, must be zero. *\/$/;"	m	struct:hllhdr	file:
npending	ae_evport.c	/^    int     npending;                           \/* # of pending fds *\/$/;"	m	struct:aeApiState	file:
nul	setproctitle.c	/^	char *nul;$/;"	m	struct:__anon10	file:
numclients	redis-benchmark.c	/^    int numclients;$/;"	m	struct:config	file:
numlines	config.c	/^    int numlines;         \/* Number of lines in current config *\/$/;"	m	struct:rewriteConfigState	file:
o_down_since_time	sentinel.c	/^    mstime_t o_down_since_time; \/* Objectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:
objectCommand	object.c	/^void objectCommand(redisClient *c) {$/;"	f
objectCommandLookup	object.c	/^robj *objectCommandLookup(redisClient *c, robj *key) {$/;"	f
objectCommandLookupOrReply	object.c	/^robj *objectCommandLookupOrReply(redisClient *c, robj *key, robj *reply) {$/;"	f
obuf	redis-benchmark.c	/^    sds obuf;$/;"	m	struct:_client	file:
offset	redis-check-dump.c	/^    size_t offset;$/;"	m	struct:__anon4	file:
offset	redis-check-dump.c	/^    size_t offset[16];$/;"	m	struct:__anon5	file:
ok	intset.c	/^void ok(void) {$/;"	f
optionSetDictType	config.c	/^dictType optionSetDictType = {$/;"	v
optionToLineDictType	config.c	/^dictType optionToLineDictType = {$/;"	v
option_to_line	config.c	/^    dict *option_to_line; \/* Option -> list of config file lines map *\/$/;"	m	struct:rewriteConfigState	file:
org	gateway-back.c	/^    struct commandHelp *org;$/;"	m	struct:__anon2	typeref:struct:__anon2::commandHelp	file:
org	gateway-lib.c	/^    struct commandHelp *org;$/;"	m	struct:__anon3	typeref:struct:__anon3::commandHelp	file:
org	redis-cli.c	/^    struct commandHelp *org;$/;"	m	struct:__anon8	typeref:struct:__anon8::commandHelp	file:
org	redis-cli2.c	/^    struct commandHelp *org;$/;"	m	struct:__anon7	typeref:struct:__anon7::commandHelp	file:
org	redis-gateway2.c	/^    struct commandHelp *org;$/;"	m	struct:__anon9	typeref:struct:__anon9::commandHelp	file:
output	gateway-back.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:
output	gateway-lib.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:
output	redis-cli.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:
output	redis-cli2.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:
output	redis-gateway2.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:
p	ziplist.c	/^    unsigned char *p;$/;"	m	struct:zlentry	file:
parallel_syncs	sentinel.c	/^    int parallel_syncs; \/* How many slaves to reconfigure at same time. *\/$/;"	m	struct:sentinelRedisInstance	file:
parseOptions	gateway-back.c	/^static int parseOptions(int argc, char **argv, int sn) {$/;"	f	file:
parseOptions	gateway-lib.c	/^static int parseOptions(int argc, char **argv, int sn) {$/;"	f	file:
parseOptions	redis-benchmark.c	/^int parseOptions(int argc, const char **argv) {$/;"	f
parseOptions	redis-cli.c	/^static int parseOptions(int argc, char **argv) {$/;"	f	file:
parseOptions	redis-cli2.c	/^static int parseOptions(int argc, char **argv) {$/;"	f	file:
parseOptions	redis-gateway2.c	/^static int parseOptions(int argc, char **argv) {$/;"	f	file:
parseScanCursorOrReply	db.c	/^int parseScanCursorOrReply(redisClient *c, robj *o, unsigned long *cursor) {$/;"	f
pathIsBaseName	util.c	/^int pathIsBaseName(char *path) {$/;"	f
pattern	gateway-back.c	/^    char *pattern;$/;"	m	struct:config	file:
pattern	gateway-lib.c	/^    char *pattern;$/;"	m	struct:config	file:
pattern	redis-cli.c	/^    char *pattern;$/;"	m	struct:config	file:
pattern	redis-cli2.c	/^    char *pattern;$/;"	m	struct:config	file:
pattern	redis-gateway2.c	/^    char *pattern;$/;"	m	struct:config	file:
pauseClients	networking.c	/^void pauseClients(mstime_t end) {$/;"	f
pc	sentinel.c	/^    redisAsyncContext *pc; \/* Hiredis context for Pub \/ Sub. *\/$/;"	m	struct:sentinelRedisInstance	file:
pc_conn_time	sentinel.c	/^    mstime_t pc_conn_time; \/* pc connection time. *\/$/;"	m	struct:sentinelRedisInstance	file:
pc_last_activity	sentinel.c	/^    mstime_t pc_last_activity; \/* Last time we received any message. *\/$/;"	m	struct:sentinelRedisInstance	file:
peekType	redis-check-dump.c	/^int peekType() {$/;"	f
pending	redis-benchmark.c	/^    int pending;            \/* Number of pending requests (replies to consume) *\/$/;"	m	struct:_client	file:
pending_commands	sentinel.c	/^    int pending_commands;   \/* Number of commands sent waiting for a reply. *\/$/;"	m	struct:sentinelRedisInstance	file:
pending_fds	ae_evport.c	/^    int     pending_fds[MAX_EVENT_BATCHSZ];     \/* pending fds *\/$/;"	m	struct:aeApiState	file:
pending_masks	ae_evport.c	/^    int     pending_masks[MAX_EVENT_BATCHSZ];   \/* pending fds' masks *\/$/;"	m	struct:aeApiState	file:
persistCommand	db.c	/^void persistCommand(redisClient *c) {$/;"	f
pexpireCommand	db.c	/^void pexpireCommand(redisClient *c) {$/;"	f
pexpireatCommand	db.c	/^void pexpireatCommand(redisClient *c) {$/;"	f
pfaddCommand	hyperloglog.c	/^void pfaddCommand(redisClient *c) {$/;"	f
pfcountCommand	hyperloglog.c	/^void pfcountCommand(redisClient *c) {$/;"	f
pfdebugCommand	hyperloglog.c	/^void pfdebugCommand(redisClient *c) {$/;"	f
pfmergeCommand	hyperloglog.c	/^void pfmergeCommand(redisClient *c) {$/;"	f
pfselftestCommand	hyperloglog.c	/^void pfselftestCommand(redisClient *c) {$/;"	f
pid	sentinel.c	/^    pid_t pid;              \/* Script execution pid. *\/$/;"	m	struct:sentinelScriptJob	file:
pingCommand	gateway.c	/^void pingCommand(redisClient *c) {$/;"	f
pingCommand	redis-gateway.c	/^void pingCommand(redisClient *c) {$/;"	f
pingCommand	redis.c	/^void pingCommand(redisClient *c) {$/;"	f
pipeMode	gateway-back.c	/^static void pipeMode(int sn) {$/;"	f	file:
pipeMode	gateway-lib.c	/^static void pipeMode(int sn) {$/;"	f	file:
pipeMode	redis-cli.c	/^static void pipeMode(void) {$/;"	f	file:
pipeMode	redis-cli2.c	/^static void pipeMode(void) {$/;"	f	file:
pipeMode	redis-gateway2.c	/^static void pipeMode(void) {$/;"	f	file:
pipe_mode	gateway-back.c	/^    int pipe_mode;$/;"	m	struct:config	file:
pipe_mode	gateway-lib.c	/^    int pipe_mode;$/;"	m	struct:config	file:
pipe_mode	redis-cli.c	/^    int pipe_mode;$/;"	m	struct:config	file:
pipe_mode	redis-cli2.c	/^    int pipe_mode;$/;"	m	struct:config	file:
pipe_mode	redis-gateway2.c	/^    int pipe_mode;$/;"	m	struct:config	file:
pipe_timeout	gateway-back.c	/^    int pipe_timeout;$/;"	m	struct:config	file:
pipe_timeout	gateway-lib.c	/^    int pipe_timeout;$/;"	m	struct:config	file:
pipe_timeout	redis-cli.c	/^    int pipe_timeout;$/;"	m	struct:config	file:
pipe_timeout	redis-cli2.c	/^    int pipe_timeout;$/;"	m	struct:config	file:
pipe_timeout	redis-gateway2.c	/^    int pipe_timeout;$/;"	m	struct:config	file:
pipeline	redis-benchmark.c	/^    int pipeline;$/;"	m	struct:config	file:
pop	ziplist.c	/^void pop(unsigned char *zl, int where) {$/;"	f
popGenericCommand	t_list.c	/^void popGenericCommand(redisClient *c, int where) {$/;"	f
populateCommandTable	gateway.c	/^void populateCommandTable(void) {$/;"	f
populateCommandTable	redis-gateway.c	/^void populateCommandTable(void) {$/;"	f
populateCommandTable	redis.c	/^void populateCommandTable(void) {$/;"	f
port	sentinel.c	/^    int port;$/;"	m	struct:sentinelAddr	file:
portfd	ae_evport.c	/^    int     portfd;                             \/* event port *\/$/;"	m	struct:aeApiState	file:
pos	redis-check-dump.c	/^} pos;$/;"	t	typeref:struct:__anon4	file:
positions	redis-check-dump.c	/^static pos positions[16];$/;"	v	file:
powerLawRand	gateway-back.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f
powerLawRand	gateway-lib.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f
powerLawRand	redis-cli.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f
powerLawRand	redis-cli2.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f
powerLawRand	redis-gateway2.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f
pqsort	pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f
prefix_pending	redis-benchmark.c	/^    int prefix_pending;     \/* If non-zero, number of pending prefix commands. Commands$/;"	m	struct:_client	file:
prefixlen	redis-benchmark.c	/^    int prefixlen;          \/* Size in bytes of the pending prefix commands *\/$/;"	m	struct:_client	file:
prepareClientToWrite	networking.c	/^int prepareClientToWrite(redisClient *c) {$/;"	f
prepareForShutdown	gateway.c	/^int prepareForShutdown(int flags) {$/;"	f
prepareForShutdown	redis-gateway.c	/^int prepareForShutdown(int flags) {$/;"	f
prepareForShutdown	redis.c	/^int prepareForShutdown(int flags) {$/;"	f
previous_time	sentinel.c	/^    mstime_t previous_time;     \/* Last time we ran the time handler. *\/$/;"	m	struct:sentinelState	file:
prevrawlen	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
prevrawlensize	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
printCentered	redis-check-dump.c	/^void printCentered(int indent, int width, char* body) {$/;"	f
printErrorStack	redis-check-dump.c	/^void printErrorStack(entry *e) {$/;"	f
printSkipped	redis-check-dump.c	/^void printSkipped(uint64_t bytes, uint64_t offset) {$/;"	f
printValid	redis-check-dump.c	/^void printValid(uint64_t ops, uint64_t bytes) {$/;"	f
process	redis-check-aof.c	/^off_t process(FILE *fp) {$/;"	f
process	redis-check-dump.c	/^void process(void) {$/;"	f
processClientsWaitingReplicas	replication.c	/^void processClientsWaitingReplicas(void) {$/;"	f
processCommand	gateway.c	/^int processCommand(redisClient *c) {$/;"	f
processCommand	redis-gateway.c	/^int processCommand(redisClient *c) {$/;"	f
processCommand	redis.c	/^int processCommand(redisClient *c) {$/;"	f
processDoubleValue	redis-check-dump.c	/^int processDoubleValue(double** store) {$/;"	f
processEventsWhileBlocked	networking.c	/^int processEventsWhileBlocked(void) {$/;"	f
processHeader	redis-check-dump.c	/^int processHeader(void) {$/;"	f
processInlineBuffer	networking.c	/^int processInlineBuffer(redisClient *c) {$/;"	f
processInputBuffer	networking.c	/^void processInputBuffer(redisClient *c) {$/;"	f
processMultibulkBuffer	networking.c	/^int processMultibulkBuffer(redisClient *c) {$/;"	f
processStringObject	redis-check-dump.c	/^int processStringObject(char** store) {$/;"	f
processTime	redis-check-dump.c	/^int processTime(int type) {$/;"	f
processTimeEvents	ae.c	/^static int processTimeEvents(aeEventLoop *eventLoop) {$/;"	f	file:
processUnblockedClients	blocked.c	/^void processUnblockedClients(void) {$/;"	f
progress_full	memtest.c	/^size_t progress_full; \/* How many chars to write to fill the progress bar. *\/$/;"	v
progress_printed	memtest.c	/^size_t progress_printed; \/* Printed chars in screen-wide progress bar. *\/$/;"	v
promoted_slave	sentinel.c	/^    struct sentinelRedisInstance *promoted_slave; \/* Promoted slave instance. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:
prompt	gateway-back.c	/^    char prompt[128];$/;"	m	struct:config	file:
prompt	gateway-lib.c	/^    char prompt[128];$/;"	m	struct:config	file:
prompt	redis-cli.c	/^    char prompt[128];$/;"	m	struct:config	file:
prompt	redis-cli2.c	/^    char prompt[128];$/;"	m	struct:config	file:
prompt	redis-gateway2.c	/^    char prompt[128];$/;"	m	struct:config	file:
propagate	gateway.c	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
propagate	redis-gateway.c	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
propagate	redis.c	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
propagateExpire	db.c	/^void propagateExpire(redisDb *db, robj *key) {$/;"	f
psetexCommand	gateway-front.c	/^void psetexCommand(redisClient *c) {$/;"	f
psetexCommand	t_string.c	/^void psetexCommand(redisClient *c) {$/;"	f
psubscribeCommand	pubsub.c	/^void psubscribeCommand(redisClient *c) {$/;"	f
pttlCommand	db.c	/^void pttlCommand(redisClient *c) {$/;"	f
publishCommand	pubsub.c	/^void publishCommand(redisClient *c) {$/;"	f
pubsubCommand	pubsub.c	/^void pubsubCommand(redisClient *c) {$/;"	f
pubsubPublishMessage	pubsub.c	/^int pubsubPublishMessage(robj *channel, robj *message) {$/;"	f
pubsubSubscribeChannel	pubsub.c	/^int pubsubSubscribeChannel(redisClient *c, robj *channel) {$/;"	f
pubsubSubscribePattern	pubsub.c	/^int pubsubSubscribePattern(redisClient *c, robj *pattern) {$/;"	f
pubsubUnsubscribeAllChannels	pubsub.c	/^int pubsubUnsubscribeAllChannels(redisClient *c, int notify) {$/;"	f
pubsubUnsubscribeAllPatterns	pubsub.c	/^int pubsubUnsubscribeAllPatterns(redisClient *c, int notify) {$/;"	f
pubsubUnsubscribeChannel	pubsub.c	/^int pubsubUnsubscribeChannel(redisClient *c, robj *channel, int notify) {$/;"	f
pubsubUnsubscribePattern	pubsub.c	/^int pubsubUnsubscribePattern(redisClient *c, robj *pattern, int notify) {$/;"	f
pubsub_mode	gateway-back.c	/^    int pubsub_mode;$/;"	m	struct:config	file:
pubsub_mode	gateway-lib.c	/^    int pubsub_mode;$/;"	m	struct:config	file:
pubsub_mode	redis-cli.c	/^    int pubsub_mode;$/;"	m	struct:config	file:
pubsub_mode	redis-cli2.c	/^    int pubsub_mode;$/;"	m	struct:config	file:
pubsub_mode	redis-gateway2.c	/^    int pubsub_mode;$/;"	m	struct:config	file:
punsubscribeCommand	pubsub.c	/^void punsubscribeCommand(redisClient *c) {$/;"	f
pushGenericCommand	t_list.c	/^void pushGenericCommand(redisClient *c, int where) {$/;"	f
pushxGenericCommand	t_list.c	/^void pushxGenericCommand(redisClient *c, robj *refval, robj *val, int where) {$/;"	f
putSlaveOnline	replication.c	/^void putSlaveOnline(redisClient *slave) {$/;"	f
qsortCompareSetsByCardinality	t_set.c	/^int qsortCompareSetsByCardinality(const void *s1, const void *s2) {$/;"	f
qsortCompareSetsByRevCardinality	t_set.c	/^int qsortCompareSetsByRevCardinality(const void *s1, const void *s2) {$/;"	f
queueMultiCommand	multi.c	/^void queueMultiCommand(redisClient *c) {$/;"	f
quiet	redis-benchmark.c	/^    int quiet;$/;"	m	struct:config	file:
quorum	sentinel.c	/^    unsigned int quorum;\/* Number of sentinels that need to agree on failure. *\/$/;"	m	struct:sentinelRedisInstance	file:
randfree	redis-benchmark.c	/^    size_t randfree;        \/* Number of unused pointers in client->randptr *\/$/;"	m	struct:_client	file:
randlen	redis-benchmark.c	/^    size_t randlen;         \/* Number of pointers in client->randptr *\/$/;"	m	struct:_client	file:
randomizeClientKey	redis-benchmark.c	/^static void randomizeClientKey(client c) {$/;"	f	file:
randomkeyCommand	db.c	/^void randomkeyCommand(redisClient *c) {$/;"	f
randomkeys	redis-benchmark.c	/^    int randomkeys;$/;"	m	struct:config	file:
randomkeys_keyspacelen	redis-benchmark.c	/^    int randomkeys_keyspacelen;$/;"	m	struct:config	file:
randptr	redis-benchmark.c	/^    char **randptr;         \/* Pointers to :rand: strings inside the command buf *\/$/;"	m	struct:_client	file:
randstring	ziplist.c	/^int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f
rdbEncodeInteger	rdb.c	/^int rdbEncodeInteger(long long value, unsigned char *enc) {$/;"	f
rdbGenericLoadStringObject	rdb.c	/^robj *rdbGenericLoadStringObject(rio *rdb, int encode) {$/;"	f
rdbLoad	rdb.c	/^int rdbLoad(char *filename) {$/;"	f
rdbLoadDoubleValue	rdb.c	/^int rdbLoadDoubleValue(rio *rdb, double *val) {$/;"	f
rdbLoadEncodedStringObject	rdb.c	/^robj *rdbLoadEncodedStringObject(rio *rdb) {$/;"	f
rdbLoadIntegerObject	rdb.c	/^robj *rdbLoadIntegerObject(rio *rdb, int enctype, int encode) {$/;"	f
rdbLoadLen	rdb.c	/^uint32_t rdbLoadLen(rio *rdb, int *isencoded) {$/;"	f
rdbLoadLzfStringObject	rdb.c	/^robj *rdbLoadLzfStringObject(rio *rdb) {$/;"	f
rdbLoadMillisecondTime	rdb.c	/^long long rdbLoadMillisecondTime(rio *rdb) {$/;"	f
rdbLoadObject	rdb.c	/^robj *rdbLoadObject(int rdbtype, rio *rdb) {$/;"	f
rdbLoadObjectType	rdb.c	/^int rdbLoadObjectType(rio *rdb) {$/;"	f
rdbLoadProgressCallback	rdb.c	/^void rdbLoadProgressCallback(rio *r, const void *buf, size_t len) {$/;"	f
rdbLoadStringObject	rdb.c	/^robj *rdbLoadStringObject(rio *rdb) {$/;"	f
rdbLoadTime	rdb.c	/^time_t rdbLoadTime(rio *rdb) {$/;"	f
rdbLoadType	rdb.c	/^int rdbLoadType(rio *rdb) {$/;"	f
rdbRemoveTempFile	rdb.c	/^void rdbRemoveTempFile(pid_t childpid) {$/;"	f
rdbSave	rdb.c	/^int rdbSave(char *filename) {$/;"	f
rdbSaveBackground	rdb.c	/^int rdbSaveBackground(char *filename) {$/;"	f
rdbSaveDoubleValue	rdb.c	/^int rdbSaveDoubleValue(rio *rdb, double val) {$/;"	f
rdbSaveKeyValuePair	rdb.c	/^int rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,$/;"	f
rdbSaveLen	rdb.c	/^int rdbSaveLen(rio *rdb, uint32_t len) {$/;"	f
rdbSaveLongLongAsStringObject	rdb.c	/^int rdbSaveLongLongAsStringObject(rio *rdb, long long value) {$/;"	f
rdbSaveLzfStringObject	rdb.c	/^int rdbSaveLzfStringObject(rio *rdb, unsigned char *s, size_t len) {$/;"	f
rdbSaveMillisecondTime	rdb.c	/^int rdbSaveMillisecondTime(rio *rdb, long long t) {$/;"	f
rdbSaveObject	rdb.c	/^int rdbSaveObject(rio *rdb, robj *o) {$/;"	f
rdbSaveObjectType	rdb.c	/^int rdbSaveObjectType(rio *rdb, robj *o) {$/;"	f
rdbSaveRawString	rdb.c	/^int rdbSaveRawString(rio *rdb, unsigned char *s, size_t len) {$/;"	f
rdbSaveRio	rdb.c	/^int rdbSaveRio(rio *rdb, int *error) {$/;"	f
rdbSaveRioWithEOFMark	rdb.c	/^int rdbSaveRioWithEOFMark(rio *rdb, int *error) {$/;"	f
rdbSaveStringObject	rdb.c	/^int rdbSaveStringObject(rio *rdb, robj *obj) {$/;"	f
rdbSaveToSlavesSockets	rdb.c	/^int rdbSaveToSlavesSockets(void) {$/;"	f
rdbSaveType	rdb.c	/^int rdbSaveType(rio *rdb, unsigned char type) {$/;"	f
rdbSavedObjectLen	rdb.c	/^off_t rdbSavedObjectLen(robj *o) {$/;"	f
rdbTryIntegerEncoding	rdb.c	/^int rdbTryIntegerEncoding(char *s, size_t len, unsigned char *enc) {$/;"	f
rdbWriteRaw	rdb.c	/^static int rdbWriteRaw(rio *rdb, void *p, size_t len) {$/;"	f	file:
rdb_filename	gateway-back.c	/^    char *rdb_filename;$/;"	m	struct:config	file:
rdb_filename	gateway-lib.c	/^    char *rdb_filename;$/;"	m	struct:config	file:
rdb_filename	redis-cli.c	/^    char *rdb_filename;$/;"	m	struct:config	file:
rdb_filename	redis-cli2.c	/^    char *rdb_filename;$/;"	m	struct:config	file:
rdb_filename	redis-gateway2.c	/^    char *rdb_filename;$/;"	m	struct:config	file:
readArgFromStdin	gateway-back.c	/^static sds readArgFromStdin(void) {$/;"	f	file:
readArgFromStdin	gateway-lib.c	/^static sds readArgFromStdin(void) {$/;"	f	file:
readArgFromStdin	redis-cli.c	/^static sds readArgFromStdin(void) {$/;"	f	file:
readArgFromStdin	redis-cli2.c	/^static sds readArgFromStdin(void) {$/;"	f	file:
readArgFromStdin	redis-gateway2.c	/^static sds readArgFromStdin(void) {$/;"	f	file:
readArgc	redis-check-aof.c	/^int readArgc(FILE *fp, long *target) {$/;"	f
readBytes	redis-check-aof.c	/^int readBytes(FILE *fp, char *target, long length) {$/;"	f
readBytes	redis-check-dump.c	/^int readBytes(void *target, long num) {$/;"	f
readHandler	redis-benchmark.c	/^static void readHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
readLong	redis-check-aof.c	/^int readLong(FILE *fp, char prefix, long *target) {$/;"	f
readQueryFromClient	networking.c	/^void readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
readString	redis-check-aof.c	/^int readString(FILE *fp, char** target) {$/;"	f
readSyncBulkPayload	replication.c	/^void readSyncBulkPayload(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
reading	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:
readonlyCommand	cluster.c	/^void readonlyCommand(redisClient *c) {$/;"	f
readwriteCommand	cluster.c	/^void readwriteCommand(redisClient *c) {$/;"	f
realloc	zmalloc.c	61;"	d	file:
realloc	zmalloc.c	66;"	d	file:
reconnectingRedisCommand	gateway-back.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, int sn, const char *fmt, ...) {$/;"	f	file:
reconnectingRedisCommand	gateway-lib.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, int sn, const char *fmt, ...) {$/;"	f	file:
reconnectingRedisCommand	redis-cli.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, const char *fmt, ...) {$/;"	f	file:
reconnectingRedisCommand	redis-cli2.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, const char *fmt, ...) {$/;"	f	file:
reconnectingRedisCommand	redis-gateway2.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, const char *fmt, ...) {$/;"	f	file:
redisAeAddRead	sentinel.c	/^static void redisAeAddRead(void *privdata) {$/;"	f	file:
redisAeAddWrite	sentinel.c	/^static void redisAeAddWrite(void *privdata) {$/;"	f	file:
redisAeAttach	sentinel.c	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f	file:
redisAeCleanup	sentinel.c	/^static void redisAeCleanup(void *privdata) {$/;"	f	file:
redisAeDelRead	sentinel.c	/^static void redisAeDelRead(void *privdata) {$/;"	f	file:
redisAeDelWrite	sentinel.c	/^static void redisAeDelWrite(void *privdata) {$/;"	f	file:
redisAeEvents	sentinel.c	/^typedef struct redisAeEvents {$/;"	s	file:
redisAeEvents	sentinel.c	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents	file:
redisAeReadEvent	sentinel.c	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
redisAeWriteEvent	sentinel.c	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
redisAsciiArt	gateway.c	/^void redisAsciiArt(void) {$/;"	f
redisAsciiArt	redis-gateway.c	/^void redisAsciiArt(void) {$/;"	f
redisAsciiArt	redis.c	/^void redisAsciiArt(void) {$/;"	f
redisBitpos	bitops.c	/^long redisBitpos(void *s, unsigned long count, int bit) {$/;"	f
redisBuildId	release.c	/^uint64_t redisBuildId(void) {$/;"	f
redisCommandTable	gateway.c	/^struct redisCommand redisCommandTable[] = {$/;"	v	typeref:struct:redisCommand
redisCommandTable	redis-gateway.c	/^struct redisCommand redisCommandTable[] = {$/;"	v	typeref:struct:redisCommand
redisCommandTable	redis.c	/^struct redisCommand redisCommandTable[] = {$/;"	v	typeref:struct:redisCommand
redisGitDirty	release.c	/^char *redisGitDirty(void) {$/;"	f
redisGitSHA1	release.c	/^char *redisGitSHA1(void) {$/;"	f
redisLog	gateway.c	/^void redisLog(int level, const char *fmt, ...) {$/;"	f
redisLog	redis-gateway.c	/^void redisLog(int level, const char *fmt, ...) {$/;"	f
redisLog	redis.c	/^void redisLog(int level, const char *fmt, ...) {$/;"	f
redisLogFromHandler	gateway.c	/^void redisLogFromHandler(int level, const char *msg) {$/;"	f
redisLogFromHandler	redis-gateway.c	/^void redisLogFromHandler(int level, const char *msg) {$/;"	f
redisLogFromHandler	redis.c	/^void redisLogFromHandler(int level, const char *msg) {$/;"	f
redisLogHexDump	debug.c	/^void redisLogHexDump(int level, char *descr, void *value, size_t len) {$/;"	f
redisLogObjectDebugInfo	debug.c	/^void redisLogObjectDebugInfo(robj *o) {$/;"	f
redisLogRaw	gateway.c	/^void redisLogRaw(int level, const char *msg) {$/;"	f
redisLogRaw	redis-gateway.c	/^void redisLogRaw(int level, const char *msg) {$/;"	f
redisLogRaw	redis.c	/^void redisLogRaw(int level, const char *msg) {$/;"	f
redisLrand48	rand.c	/^int32_t redisLrand48() {$/;"	f
redisNodeFlags	cluster.c	/^struct redisNodeFlags {$/;"	s	file:
redisNodeFlagsTable	cluster.c	/^static struct redisNodeFlags redisNodeFlagsTable[] = {$/;"	v	typeref:struct:redisNodeFlags	file:
redisOpArrayAppend	gateway.c	/^int redisOpArrayAppend(redisOpArray *oa, struct redisCommand *cmd, int dbid,$/;"	f
redisOpArrayAppend	redis-gateway.c	/^int redisOpArrayAppend(redisOpArray *oa, struct redisCommand *cmd, int dbid,$/;"	f
redisOpArrayAppend	redis.c	/^int redisOpArrayAppend(redisOpArray *oa, struct redisCommand *cmd, int dbid,$/;"	f
redisOpArrayFree	gateway.c	/^void redisOpArrayFree(redisOpArray *oa) {$/;"	f
redisOpArrayFree	redis-gateway.c	/^void redisOpArrayFree(redisOpArray *oa) {$/;"	f
redisOpArrayFree	redis.c	/^void redisOpArrayFree(redisOpArray *oa) {$/;"	f
redisOpArrayInit	gateway.c	/^void redisOpArrayInit(redisOpArray *oa) {$/;"	f
redisOpArrayInit	redis-gateway.c	/^void redisOpArrayInit(redisOpArray *oa) {$/;"	f
redisOpArrayInit	redis.c	/^void redisOpArrayInit(redisOpArray *oa) {$/;"	f
redisOutOfMemoryHandler	gateway.c	/^void redisOutOfMemoryHandler(size_t allocation_size) {$/;"	f
redisOutOfMemoryHandler	redis-gateway.c	/^void redisOutOfMemoryHandler(size_t allocation_size) {$/;"	f
redisOutOfMemoryHandler	redis.c	/^void redisOutOfMemoryHandler(size_t allocation_size) {$/;"	f
redisPopcount	bitops.c	/^size_t redisPopcount(void *s, long count) {$/;"	f
redisProtocolToLuaType	scripting.c	/^char *redisProtocolToLuaType(lua_State *lua, char* reply) {$/;"	f
redisProtocolToLuaType_Bulk	scripting.c	/^char *redisProtocolToLuaType_Bulk(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Error	scripting.c	/^char *redisProtocolToLuaType_Error(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Int	scripting.c	/^char *redisProtocolToLuaType_Int(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_MultiBulk	scripting.c	/^char *redisProtocolToLuaType_MultiBulk(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Status	scripting.c	/^char *redisProtocolToLuaType_Status(lua_State *lua, char *reply) {$/;"	f
redisSetProcTitle	gateway.c	/^void redisSetProcTitle(char *title) {$/;"	f
redisSetProcTitle	redis-gateway.c	/^void redisSetProcTitle(char *title) {$/;"	f
redisSetProcTitle	redis.c	/^void redisSetProcTitle(char *title) {$/;"	f
redisSrand48	rand.c	/^void redisSrand48(int32_t seedval) {$/;"	f
redis_math_random	scripting.c	/^int redis_math_random (lua_State *L) {$/;"	f
redis_math_randomseed	scripting.c	/^int redis_math_randomseed (lua_State *L) {$/;"	f
refreshGoodSlavesCount	replication.c	/^void refreshGoodSlavesCount(void) {$/;"	f
registers	hyperloglog.c	/^    uint8_t registers[]; \/* Data bytes. *\/$/;"	m	struct:hllhdr	file:
releaseSentinelAddr	sentinel.c	/^void releaseSentinelAddr(sentinelAddr *sa) {$/;"	f
releaseSentinelRedisInstance	sentinel.c	/^void releaseSentinelRedisInstance(sentinelRedisInstance *ri) {$/;"	f
removeExpire	db.c	/^int removeExpire(redisDb *db, robj *key) {$/;"	f
removeMatchingSentinelsFromMaster	sentinel.c	/^int removeMatchingSentinelsFromMaster(sentinelRedisInstance *master, char *ip, int port, char *runid) {$/;"	f
renameCommand	db.c	/^void renameCommand(redisClient *c) {$/;"	f
renameGenericCommand	db.c	/^void renameGenericCommand(redisClient *c, int nx) {$/;"	f
renamenxCommand	db.c	/^void renamenxCommand(redisClient *c) {$/;"	f
repeat	gateway-back.c	/^    long repeat;$/;"	m	struct:config	file:
repeat	gateway-lib.c	/^    long repeat;$/;"	m	struct:config	file:
repeat	redis-cli.c	/^    long repeat;$/;"	m	struct:config	file:
repeat	redis-cli2.c	/^    long repeat;$/;"	m	struct:config	file:
repeat	redis-gateway2.c	/^    long repeat;$/;"	m	struct:config	file:
repl	gateway-back.c	/^static void repl(int sn) {$/;"	f	file:
repl	gateway-lib.c	/^static void repl(int sn) {$/;"	f	file:
repl	redis-cli.c	/^static void repl(void) {$/;"	f	file:
repl	redis-cli2.c	/^static void repl(int sn) {$/;"	f	file:
repl	redis-gateway2.c	/^static void repl(void) {$/;"	f	file:
replScriptCacheDictType	gateway.c	/^dictType replScriptCacheDictType = {$/;"	v
replScriptCacheDictType	redis-gateway.c	/^dictType replScriptCacheDictType = {$/;"	v
replScriptCacheDictType	redis.c	/^dictType replScriptCacheDictType = {$/;"	v
replaceClientCommandVector	networking.c	/^void replaceClientCommandVector(redisClient *c, int argc, robj **argv) {$/;"	f
replconfCommand	replication.c	/^void replconfCommand(redisClient *c) {$/;"	f
replicationAbortSyncTransfer	replication.c	/^void replicationAbortSyncTransfer(void) {$/;"	f
replicationCacheMaster	replication.c	/^void replicationCacheMaster(redisClient *c) {$/;"	f
replicationCountAcksByOffset	replication.c	/^int replicationCountAcksByOffset(long long offset) {$/;"	f
replicationCron	replication.c	/^void replicationCron(void) {$/;"	f
replicationDiscardCachedMaster	replication.c	/^void replicationDiscardCachedMaster(void) {$/;"	f
replicationEmptyDbCallback	replication.c	/^void replicationEmptyDbCallback(void *privdata) {$/;"	f
replicationFeedMonitors	replication.c	/^void replicationFeedMonitors(redisClient *c, list *monitors, int dictid, robj **argv, int argc) {$/;"	f
replicationFeedSlaves	replication.c	/^void replicationFeedSlaves(list *slaves, int dictid, robj **argv, int argc) {$/;"	f
replicationGetSlaveName	replication.c	/^char *replicationGetSlaveName(redisClient *c) {$/;"	f
replicationGetSlaveOffset	replication.c	/^long long replicationGetSlaveOffset(void) {$/;"	f
replicationHandleMasterDisconnection	replication.c	/^void replicationHandleMasterDisconnection(void) {$/;"	f
replicationRequestAckFromSlaves	replication.c	/^void replicationRequestAckFromSlaves(void) {$/;"	f
replicationResurrectCachedMaster	replication.c	/^void replicationResurrectCachedMaster(int newfd) {$/;"	f
replicationScriptCacheAdd	replication.c	/^void replicationScriptCacheAdd(sds sha1) {$/;"	f
replicationScriptCacheExists	replication.c	/^int replicationScriptCacheExists(sds sha1) {$/;"	f
replicationScriptCacheFlush	replication.c	/^void replicationScriptCacheFlush(void) {$/;"	f
replicationScriptCacheInit	replication.c	/^void replicationScriptCacheInit(void) {$/;"	f
replicationSendAck	replication.c	/^void replicationSendAck(void) {$/;"	f
replicationSendNewlineToMaster	replication.c	/^void replicationSendNewlineToMaster(void) {$/;"	f
replicationSetMaster	replication.c	/^void replicationSetMaster(char *ip, int port) {$/;"	f
replicationSetupSlaveForFullResync	replication.c	/^int replicationSetupSlaveForFullResync(redisClient *slave, long long offset) {$/;"	f
replicationUnsetMaster	replication.c	/^void replicationUnsetMaster(void) {$/;"	f
replyToBlockedClientTimedOut	blocked.c	/^void replyToBlockedClientTimedOut(redisClient *c) {$/;"	f
representRedisNodeFlags	cluster.c	/^sds representRedisNodeFlags(sds ci, uint16_t flags) {$/;"	f
requests	redis-benchmark.c	/^    int requests;$/;"	m	struct:config	file:
requests_finished	redis-benchmark.c	/^    int requests_finished;$/;"	m	struct:config	file:
requests_issued	redis-benchmark.c	/^    int requests_issued;$/;"	m	struct:config	file:
reset	setproctitle.c	/^	_Bool reset;$/;"	m	struct:__anon10	file:
resetClient	networking.c	/^void resetClient(redisClient *c) {$/;"	f
resetClient	redis-benchmark.c	/^static void resetClient(client c) {$/;"	f	file:
resetCommandTableStats	gateway.c	/^void resetCommandTableStats(void) {$/;"	f
resetCommandTableStats	redis-gateway.c	/^void resetCommandTableStats(void) {$/;"	f
resetCommandTableStats	redis.c	/^void resetCommandTableStats(void) {$/;"	f
resetManualFailover	cluster.c	/^void resetManualFailover(void) {$/;"	f
resetRefCount	object.c	/^robj *resetRefCount(robj *obj) {$/;"	f
resetServerSaveParams	config.c	/^void resetServerSaveParams(void) {$/;"	f
resetServerStats	gateway.c	/^void resetServerStats(void) {$/;"	f
resetServerStats	redis-gateway.c	/^void resetServerStats(void) {$/;"	f
resetServerStats	redis.c	/^void resetServerStats(void) {$/;"	f
resizeReplicationBacklog	replication.c	/^void resizeReplicationBacklog(long long newsize) {$/;"	f
restoreCommand	cluster.c	/^void restoreCommand(redisClient *c) {$/;"	f
retry_num	sentinel.c	/^    int retry_num;          \/* Number of times we tried to execute it. *\/$/;"	m	struct:sentinelScriptJob	file:
rev	dict.c	/^static unsigned long rev(unsigned long v) {$/;"	f	file:
rewriteAppendOnlyFile	aof.c	/^int rewriteAppendOnlyFile(char *filename) {$/;"	f
rewriteAppendOnlyFileBackground	aof.c	/^int rewriteAppendOnlyFileBackground(void) {$/;"	f
rewriteClientCommandArgument	networking.c	/^void rewriteClientCommandArgument(redisClient *c, int i, robj *newval) {$/;"	f
rewriteClientCommandVector	networking.c	/^void rewriteClientCommandVector(redisClient *c, int argc, ...) {$/;"	f
rewriteConfig	config.c	/^int rewriteConfig(char *path) {$/;"	f
rewriteConfigAddLineNumberToOption	config.c	/^void rewriteConfigAddLineNumberToOption(struct rewriteConfigState *state, sds option, int linenum) {$/;"	f
rewriteConfigAppendLine	config.c	/^void rewriteConfigAppendLine(struct rewriteConfigState *state, sds line) {$/;"	f
rewriteConfigBindOption	config.c	/^void rewriteConfigBindOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigBytesOption	config.c	/^void rewriteConfigBytesOption(struct rewriteConfigState *state, char *option, long long value, long long defvalue) {$/;"	f
rewriteConfigClientoutputbufferlimitOption	config.c	/^void rewriteConfigClientoutputbufferlimitOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigDirOption	config.c	/^void rewriteConfigDirOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigEnumOption	config.c	/^void rewriteConfigEnumOption(struct rewriteConfigState *state, char *option, int value, ...) {$/;"	f
rewriteConfigFormatMemory	config.c	/^int rewriteConfigFormatMemory(char *buf, size_t len, long long bytes) {$/;"	f
rewriteConfigGetContentFromState	config.c	/^sds rewriteConfigGetContentFromState(struct rewriteConfigState *state) {$/;"	f
rewriteConfigMarkAsProcessed	config.c	/^void rewriteConfigMarkAsProcessed(struct rewriteConfigState *state, char *option) {$/;"	f
rewriteConfigNotifykeyspaceeventsOption	config.c	/^void rewriteConfigNotifykeyspaceeventsOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigNumericalOption	config.c	/^void rewriteConfigNumericalOption(struct rewriteConfigState *state, char *option, long long value, long long defvalue) {$/;"	f
rewriteConfigOctalOption	config.c	/^void rewriteConfigOctalOption(struct rewriteConfigState *state, char *option, int value, int defvalue) {$/;"	f
rewriteConfigOverwriteFile	config.c	/^int rewriteConfigOverwriteFile(char *configfile, sds content) {$/;"	f
rewriteConfigReadOldFile	config.c	/^struct rewriteConfigState *rewriteConfigReadOldFile(char *path) {$/;"	f
rewriteConfigReleaseState	config.c	/^void rewriteConfigReleaseState(struct rewriteConfigState *state) {$/;"	f
rewriteConfigRemoveOrphaned	config.c	/^void rewriteConfigRemoveOrphaned(struct rewriteConfigState *state) {$/;"	f
rewriteConfigRewriteLine	config.c	/^void rewriteConfigRewriteLine(struct rewriteConfigState *state, char *option, sds line, int force) {$/;"	f
rewriteConfigSaveOption	config.c	/^void rewriteConfigSaveOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigSentinelOption	sentinel.c	/^void rewriteConfigSentinelOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigSlaveofOption	config.c	/^void rewriteConfigSlaveofOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigState	config.c	/^struct rewriteConfigState {$/;"	s	file:
rewriteConfigStringOption	config.c	/^void rewriteConfigStringOption(struct rewriteConfigState *state, char *option, char *value, char *defvalue) {$/;"	f
rewriteConfigSyslogfacilityOption	config.c	/^void rewriteConfigSyslogfacilityOption(struct rewriteConfigState *state) {$/;"	f
rewriteConfigYesNoOption	config.c	/^void rewriteConfigYesNoOption(struct rewriteConfigState *state, char *option, int value, int defvalue) {$/;"	f
rewriteHashObject	aof.c	/^int rewriteHashObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteListObject	aof.c	/^int rewriteListObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteSetObject	aof.c	/^int rewriteSetObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteSortedSetObject	aof.c	/^int rewriteSortedSetObject(rio *r, robj *key, robj *o) {$/;"	f
rewritten	config.c	/^    dict *rewritten;      \/* Dictionary of already processed options *\/$/;"	m	struct:rewriteConfigState	file:
rfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
rioBufferFlush	rio.c	/^static int rioBufferFlush(rio *r) {$/;"	f	file:
rioBufferIO	rio.c	/^static const rio rioBufferIO = {$/;"	v	file:
rioBufferRead	rio.c	/^static size_t rioBufferRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioBufferTell	rio.c	/^static off_t rioBufferTell(rio *r) {$/;"	f	file:
rioBufferWrite	rio.c	/^static size_t rioBufferWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFdsetFlush	rio.c	/^static int rioFdsetFlush(rio *r) {$/;"	f	file:
rioFdsetIO	rio.c	/^static const rio rioFdsetIO = {$/;"	v	file:
rioFdsetRead	rio.c	/^static size_t rioFdsetRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioFdsetTell	rio.c	/^static off_t rioFdsetTell(rio *r) {$/;"	f	file:
rioFdsetWrite	rio.c	/^static size_t rioFdsetWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFileFlush	rio.c	/^static int rioFileFlush(rio *r) {$/;"	f	file:
rioFileIO	rio.c	/^static const rio rioFileIO = {$/;"	v	file:
rioFileRead	rio.c	/^static size_t rioFileRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioFileTell	rio.c	/^static off_t rioFileTell(rio *r) {$/;"	f	file:
rioFileWrite	rio.c	/^static size_t rioFileWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFreeFdset	rio.c	/^void rioFreeFdset(rio *r) {$/;"	f
rioGenericUpdateChecksum	rio.c	/^void rioGenericUpdateChecksum(rio *r, const void *buf, size_t len) {$/;"	f
rioInitWithBuffer	rio.c	/^void rioInitWithBuffer(rio *r, sds s) {$/;"	f
rioInitWithFdset	rio.c	/^void rioInitWithFdset(rio *r, int *fds, int numfds) {$/;"	f
rioInitWithFile	rio.c	/^void rioInitWithFile(rio *r, FILE *fp) {$/;"	f
rioSetAutoSync	rio.c	/^void rioSetAutoSync(rio *r, off_t bytes) {$/;"	f
rioWriteBulkCount	rio.c	/^size_t rioWriteBulkCount(rio *r, char prefix, int count) {$/;"	f
rioWriteBulkDouble	rio.c	/^size_t rioWriteBulkDouble(rio *r, double d) {$/;"	f
rioWriteBulkLongLong	rio.c	/^size_t rioWriteBulkLongLong(rio *r, long long l) {$/;"	f
rioWriteBulkObject	aof.c	/^int rioWriteBulkObject(rio *r, robj *obj) {$/;"	f
rioWriteBulkString	rio.c	/^size_t rioWriteBulkString(rio *r, const char *buf, size_t len) {$/;"	f
rioWriteHashIteratorCursor	aof.c	/^static int rioWriteHashIteratorCursor(rio *r, hashTypeIterator *hi, int what) {$/;"	f	file:
rol	sha1.c	31;"	d	file:
roleCommand	replication.c	/^void roleCommand(redisClient *c) {$/;"	f
role_reported	sentinel.c	/^    int role_reported;$/;"	m	struct:sentinelRedisInstance	file:
role_reported_time	sentinel.c	/^    mstime_t role_reported_time;$/;"	m	struct:sentinelRedisInstance	file:
rpopCommand	t_list.c	/^void rpopCommand(redisClient *c) {$/;"	f
rpoplpushCommand	t_list.c	/^void rpoplpushCommand(redisClient *c) {$/;"	f
rpoplpushHandlePush	t_list.c	/^void rpoplpushHandlePush(redisClient *c, robj *dstkey, robj *dstobj, robj *value) {$/;"	f
rpushCommand	t_list.c	/^void rpushCommand(redisClient *c) {$/;"	f
rpushxCommand	t_list.c	/^void rpushxCommand(redisClient *c) {$/;"	f
runid	sentinel.c	/^    char *runid;    \/* run ID of this instance. *\/$/;"	m	struct:sentinelRedisInstance	file:
runid	sentinel.c	/^    char *runid;$/;"	m	struct:sentinelLeader	file:
running_scripts	sentinel.c	/^    int running_scripts;    \/* Number of scripts in execution right now. *\/$/;"	m	struct:sentinelState	file:
s_down_since_time	sentinel.c	/^    mstime_t s_down_since_time; \/* Subjectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:
saddCommand	t_set.c	/^void saddCommand(redisClient *c) {$/;"	f
saveCommand	rdb.c	/^void saveCommand(redisClient *c) {$/;"	f
scanCallback	db.c	/^void scanCallback(void *privdata, const dictEntry *de) {$/;"	f
scanCommand	db.c	/^void scanCommand(redisClient *c) {$/;"	f
scanGenericCommand	db.c	/^void scanGenericCommand(redisClient *c, robj *o, unsigned long cursor) {$/;"	f
scanMode	gateway-back.c	/^static void scanMode(int sn) {$/;"	f	file:
scanMode	gateway-lib.c	/^static void scanMode(int sn) {$/;"	f	file:
scanMode	redis-cli.c	/^static void scanMode(void) {$/;"	f	file:
scanMode	redis-cli2.c	/^static void scanMode(void) {$/;"	f	file:
scanMode	redis-gateway2.c	/^static void scanMode(void) {$/;"	f	file:
scan_mode	gateway-back.c	/^    int scan_mode;$/;"	m	struct:config	file:
scan_mode	gateway-lib.c	/^    int scan_mode;$/;"	m	struct:config	file:
scan_mode	redis-cli.c	/^    int scan_mode;$/;"	m	struct:config	file:
scan_mode	redis-cli2.c	/^    int scan_mode;$/;"	m	struct:config	file:
scan_mode	redis-gateway2.c	/^    int scan_mode;$/;"	m	struct:config	file:
scardCommand	t_set.c	/^void scardCommand(redisClient *c) {$/;"	f
score	t_zset.c	/^    double score;$/;"	m	struct:__anon17	file:
scriptCommand	scripting.c	/^void scriptCommand(redisClient *c) {$/;"	f
scriptingEnableGlobalsProtection	scripting.c	/^void scriptingEnableGlobalsProtection(lua_State *lua) {$/;"	f
scriptingInit	scripting.c	/^void scriptingInit(void) {$/;"	f
scriptingRelease	scripting.c	/^void scriptingRelease(void) {$/;"	f
scriptingReset	scripting.c	/^void scriptingReset(void) {$/;"	f
scripts_queue	sentinel.c	/^    list *scripts_queue;    \/* Queue of user scripts to execute. *\/$/;"	m	struct:sentinelState	file:
sdiffCommand	t_set.c	/^void sdiffCommand(redisClient *c) {$/;"	f
sdiffstoreCommand	t_set.c	/^void sdiffstoreCommand(redisClient *c) {$/;"	f
sdsAllocSize	sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsIncrLen	sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsMakeRoomFor	sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatfmt	sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdsjoin	sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f
sdsll2str	sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f
sdsmapchars	sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsull2str	sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
selectCommand	db.c	/^void selectCommand(redisClient *c) {$/;"	f
selectDb	db.c	/^int selectDb(redisClient *c, int id) {$/;"	f
sendBulkToSlave	replication.c	/^void sendBulkToSlave(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
sendReplyToClient	networking.c	/^void sendReplyToClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
sendScan	gateway-back.c	/^static redisReply *sendScan(unsigned long long *it, int sn) {$/;"	f	file:
sendScan	gateway-lib.c	/^static redisReply *sendScan(unsigned long long *it, int sn) {$/;"	f	file:
sendScan	redis-cli.c	/^static redisReply *sendScan(unsigned long long *it) {$/;"	f	file:
sendScan	redis-cli2.c	/^static redisReply *sendScan(unsigned long long *it) {$/;"	f	file:
sendScan	redis-gateway2.c	/^static redisReply *sendScan(unsigned long long *it) {$/;"	f	file:
sendSync	gateway-back.c	/^unsigned long long sendSync(int fd) {$/;"	f
sendSync	gateway-lib.c	/^unsigned long long sendSync(int fd) {$/;"	f
sendSync	redis-cli.c	/^unsigned long long sendSync(int fd) {$/;"	f
sendSync	redis-cli2.c	/^unsigned long long sendSync(int fd) {$/;"	f
sendSync	redis-gateway2.c	/^unsigned long long sendSync(int fd) {$/;"	f
sendSynchronousCommand	replication.c	/^char *sendSynchronousCommand(int flags, int fd, ...) {$/;"	f
sentinel	sentinel.c	/^} sentinel;$/;"	v	typeref:struct:sentinelState
sentinelAbortFailover	sentinel.c	/^void sentinelAbortFailover(sentinelRedisInstance *ri) {$/;"	f
sentinelAddFlagsToDictOfRedisInstances	sentinel.c	/^void sentinelAddFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f
sentinelAddr	sentinel.c	/^typedef struct sentinelAddr {$/;"	s	file:
sentinelAddr	sentinel.c	/^} sentinelAddr;$/;"	t	typeref:struct:sentinelAddr	file:
sentinelAddrIsEqual	sentinel.c	/^int sentinelAddrIsEqual(sentinelAddr *a, sentinelAddr *b) {$/;"	f
sentinelAskMasterStateToOtherSentinels	sentinel.c	/^void sentinelAskMasterStateToOtherSentinels(sentinelRedisInstance *master, int flags) {$/;"	f
sentinelCallClientReconfScript	sentinel.c	/^void sentinelCallClientReconfScript(sentinelRedisInstance *master, int role, char *state, sentinelAddr *from, sentinelAddr *to) {$/;"	f
sentinelCheckObjectivelyDown	sentinel.c	/^void sentinelCheckObjectivelyDown(sentinelRedisInstance *master) {$/;"	f
sentinelCheckSubjectivelyDown	sentinel.c	/^void sentinelCheckSubjectivelyDown(sentinelRedisInstance *ri) {$/;"	f
sentinelCheckTiltCondition	sentinel.c	/^void sentinelCheckTiltCondition(void) {$/;"	f
sentinelCollectTerminatedScripts	sentinel.c	/^void sentinelCollectTerminatedScripts(void) {$/;"	f
sentinelCommand	sentinel.c	/^void sentinelCommand(redisClient *c) {$/;"	f
sentinelDelFlagsToDictOfRedisInstances	sentinel.c	/^void sentinelDelFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f
sentinelDiscardReplyCallback	sentinel.c	/^void sentinelDiscardReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelDisconnectCallback	sentinel.c	/^void sentinelDisconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
sentinelDisconnectInstanceFromContext	sentinel.c	/^void sentinelDisconnectInstanceFromContext(const redisAsyncContext *c) {$/;"	f
sentinelEvent	sentinel.c	/^void sentinelEvent(int level, char *type, sentinelRedisInstance *ri,$/;"	f
sentinelFailoverDetectEnd	sentinel.c	/^void sentinelFailoverDetectEnd(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverReconfNextSlave	sentinel.c	/^void sentinelFailoverReconfNextSlave(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverSelectSlave	sentinel.c	/^void sentinelFailoverSelectSlave(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverSendSlaveOfNoOne	sentinel.c	/^void sentinelFailoverSendSlaveOfNoOne(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverStateMachine	sentinel.c	/^void sentinelFailoverStateMachine(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverStateStr	sentinel.c	/^const char *sentinelFailoverStateStr(int state) {$/;"	f
sentinelFailoverSwitchToPromotedSlave	sentinel.c	/^void sentinelFailoverSwitchToPromotedSlave(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverWaitPromotion	sentinel.c	/^void sentinelFailoverWaitPromotion(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverWaitStart	sentinel.c	/^void sentinelFailoverWaitStart(sentinelRedisInstance *ri) {$/;"	f
sentinelFlushConfig	sentinel.c	/^void sentinelFlushConfig(void) {$/;"	f
sentinelForceHelloUpdateDictOfRedisInstances	sentinel.c	/^void sentinelForceHelloUpdateDictOfRedisInstances(dict *instances) {$/;"	f
sentinelForceHelloUpdateForMaster	sentinel.c	/^int sentinelForceHelloUpdateForMaster(sentinelRedisInstance *master) {$/;"	f
sentinelGenerateInitialMonitorEvents	sentinel.c	/^void sentinelGenerateInitialMonitorEvents(void) {$/;"	f
sentinelGetCurrentMasterAddress	sentinel.c	/^sentinelAddr *sentinelGetCurrentMasterAddress(sentinelRedisInstance *master) {$/;"	f
sentinelGetLeader	sentinel.c	/^char *sentinelGetLeader(sentinelRedisInstance *master, uint64_t epoch) {$/;"	f
sentinelGetMasterByName	sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByName(char *name) {$/;"	f
sentinelGetMasterByNameOrReplyError	sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByNameOrReplyError(redisClient *c,$/;"	f
sentinelGetScriptListNodeByPid	sentinel.c	/^listNode *sentinelGetScriptListNodeByPid(pid_t pid) {$/;"	f
sentinelHandleConfiguration	sentinel.c	/^char *sentinelHandleConfiguration(char **argv, int argc) {$/;"	f
sentinelHandleDictOfRedisInstances	sentinel.c	/^void sentinelHandleDictOfRedisInstances(dict *instances) {$/;"	f
sentinelHandleRedisInstance	sentinel.c	/^void sentinelHandleRedisInstance(sentinelRedisInstance *ri) {$/;"	f
sentinelInfoCommand	sentinel.c	/^void sentinelInfoCommand(redisClient *c) {$/;"	f
sentinelInfoReplyCallback	sentinel.c	/^void sentinelInfoReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelIsQuorumReachable	sentinel.c	/^int sentinelIsQuorumReachable(sentinelRedisInstance *master, int *usableptr) {$/;"	f
sentinelIsRunning	sentinel.c	/^void sentinelIsRunning(void) {$/;"	f
sentinelKillLink	sentinel.c	/^void sentinelKillLink(sentinelRedisInstance *ri, redisAsyncContext *c) {$/;"	f
sentinelKillTimedoutScripts	sentinel.c	/^void sentinelKillTimedoutScripts(void) {$/;"	f
sentinelLeader	sentinel.c	/^struct sentinelLeader {$/;"	s	file:
sentinelLeaderIncr	sentinel.c	/^int sentinelLeaderIncr(dict *counters, char *runid) {$/;"	f
sentinelLinkEstablishedCallback	sentinel.c	/^void sentinelLinkEstablishedCallback(const redisAsyncContext *c, int status) {$/;"	f
sentinelMasterLooksSane	sentinel.c	/^int sentinelMasterLooksSane(sentinelRedisInstance *master) {$/;"	f
sentinelPendingScriptsCommand	sentinel.c	/^void sentinelPendingScriptsCommand(redisClient *c) {$/;"	f
sentinelPingReplyCallback	sentinel.c	/^void sentinelPingReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelProcessHelloMessage	sentinel.c	/^void sentinelProcessHelloMessage(char *hello, int hello_len) {$/;"	f
sentinelPropagateDownAfterPeriod	sentinel.c	/^void sentinelPropagateDownAfterPeriod(sentinelRedisInstance *master) {$/;"	f
sentinelPublishCommand	sentinel.c	/^void sentinelPublishCommand(redisClient *c) {$/;"	f
sentinelPublishReplyCallback	sentinel.c	/^void sentinelPublishReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReceiveHelloMessages	sentinel.c	/^void sentinelReceiveHelloMessages(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReceiveIsMasterDownReply	sentinel.c	/^void sentinelReceiveIsMasterDownReply(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReconnectInstance	sentinel.c	/^void sentinelReconnectInstance(sentinelRedisInstance *ri) {$/;"	f
sentinelRedisInstance	sentinel.c	/^typedef struct sentinelRedisInstance {$/;"	s	file:
sentinelRedisInstance	sentinel.c	/^} sentinelRedisInstance;$/;"	t	typeref:struct:sentinelRedisInstance	file:
sentinelRedisInstanceLookupSlave	sentinel.c	/^sentinelRedisInstance *sentinelRedisInstanceLookupSlave($/;"	f
sentinelRedisInstanceNoDownFor	sentinel.c	/^int sentinelRedisInstanceNoDownFor(sentinelRedisInstance *ri, mstime_t ms) {$/;"	f
sentinelRedisInstanceTypeStr	sentinel.c	/^const char *sentinelRedisInstanceTypeStr(sentinelRedisInstance *ri) {$/;"	f
sentinelRefreshInstanceInfo	sentinel.c	/^void sentinelRefreshInstanceInfo(sentinelRedisInstance *ri, const char *info) {$/;"	f
sentinelReleaseScriptJob	sentinel.c	/^void sentinelReleaseScriptJob(sentinelScriptJob *sj) {$/;"	f
sentinelResetMaster	sentinel.c	/^void sentinelResetMaster(sentinelRedisInstance *ri, int flags) {$/;"	f
sentinelResetMasterAndChangeAddress	sentinel.c	/^int sentinelResetMasterAndChangeAddress(sentinelRedisInstance *master, char *ip, int port) {$/;"	f
sentinelResetMastersByPattern	sentinel.c	/^int sentinelResetMastersByPattern(char *pattern, int flags) {$/;"	f
sentinelRoleCommand	sentinel.c	/^void sentinelRoleCommand(redisClient *c) {$/;"	f
sentinelRunPendingScripts	sentinel.c	/^void sentinelRunPendingScripts(void) {$/;"	f
sentinelScheduleScriptExecution	sentinel.c	/^void sentinelScheduleScriptExecution(char *path, ...) {$/;"	f
sentinelScriptJob	sentinel.c	/^typedef struct sentinelScriptJob {$/;"	s	file:
sentinelScriptJob	sentinel.c	/^} sentinelScriptJob;$/;"	t	typeref:struct:sentinelScriptJob	file:
sentinelScriptRetryDelay	sentinel.c	/^mstime_t sentinelScriptRetryDelay(int retry_num) {$/;"	f
sentinelSelectSlave	sentinel.c	/^sentinelRedisInstance *sentinelSelectSlave(sentinelRedisInstance *master) {$/;"	f
sentinelSendAuthIfNeeded	sentinel.c	/^void sentinelSendAuthIfNeeded(sentinelRedisInstance *ri, redisAsyncContext *c) {$/;"	f
sentinelSendHello	sentinel.c	/^int sentinelSendHello(sentinelRedisInstance *ri) {$/;"	f
sentinelSendPeriodicCommands	sentinel.c	/^void sentinelSendPeriodicCommands(sentinelRedisInstance *ri) {$/;"	f
sentinelSendPing	sentinel.c	/^int sentinelSendPing(sentinelRedisInstance *ri) {$/;"	f
sentinelSendSlaveOf	sentinel.c	/^int sentinelSendSlaveOf(sentinelRedisInstance *ri, char *host, int port) {$/;"	f
sentinelSetClientName	sentinel.c	/^void sentinelSetClientName(sentinelRedisInstance *ri, redisAsyncContext *c, char *type) {$/;"	f
sentinelSetCommand	sentinel.c	/^void sentinelSetCommand(redisClient *c) {$/;"	f
sentinelStartFailover	sentinel.c	/^void sentinelStartFailover(sentinelRedisInstance *master) {$/;"	f
sentinelStartFailoverIfNeeded	sentinel.c	/^int sentinelStartFailoverIfNeeded(sentinelRedisInstance *master) {$/;"	f
sentinelState	sentinel.c	/^struct sentinelState {$/;"	s	file:
sentinelTimer	sentinel.c	/^void sentinelTimer(void) {$/;"	f
sentinelVoteLeader	sentinel.c	/^char *sentinelVoteLeader(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch) {$/;"	f
sentinelcmds	sentinel.c	/^struct redisCommand sentinelcmds[] = {$/;"	v	typeref:struct:redisCommand
sentinels	sentinel.c	/^    dict *sentinels;    \/* Other sentinels monitoring the same master. *\/$/;"	m	struct:sentinelRedisInstance	file:
serveClientBlockedOnList	t_list.c	/^int serveClientBlockedOnList(redisClient *receiver, robj *key, robj *dstkey, redisDb *db, robj *value, int where)$/;"	f
server	gateway.c	/^struct redisServer server; \/* server global state *\/$/;"	v	typeref:struct:redisServer
server	redis-gateway.c	/^struct redisServer server; \/* server global state *\/$/;"	v	typeref:struct:redisServer
server	redis.c	/^struct redisServer server; \/* server global state *\/$/;"	v	typeref:struct:redisServer
serverCron	gateway.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
serverCron	redis-gateway.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
serverCron	redis.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
set	t_zset.c	/^        } set;$/;"	m	union:__anon11::__anon12	typeref:union:__anon11::__anon12::_iterset	file:
setCommand	gateway-front.c	/^void setCommand(redisClient *c) {$/;"	f
setCommand	t_string.c	/^void setCommand(redisClient *c) {$/;"	f
setDeferredMultiBulkLength	networking.c	/^void setDeferredMultiBulkLength(redisClient *c, void *node, long length) {$/;"	f
setDictType	gateway.c	/^dictType setDictType = {$/;"	v
setDictType	redis-gateway.c	/^dictType setDictType = {$/;"	v
setDictType	redis.c	/^dictType setDictType = {$/;"	v
setExpire	db.c	/^void setExpire(redisDb *db, robj *key, long long when) {$/;"	f
setGenericCommand	gateway-front.c	/^void setGenericCommand(redisClient *c, int flags, robj *key, robj *val, robj *expire, int unit, robj *ok_reply, robj *abort_reply) {$/;"	f
setGenericCommand	t_string.c	/^void setGenericCommand(redisClient *c, int flags, robj *key, robj *val, robj *expire, int unit, robj *ok_reply, robj *abort_reply) {$/;"	f
setKey	db.c	/^void setKey(redisDb *db, robj *key, robj *val) {$/;"	f
setProtocolError	networking.c	/^static void setProtocolError(redisClient *c, int pos) {$/;"	f	file:
setTypeAdd	t_set.c	/^int setTypeAdd(robj *subject, robj *value) {$/;"	f
setTypeConvert	t_set.c	/^void setTypeConvert(robj *setobj, int enc) {$/;"	f
setTypeCreate	t_set.c	/^robj *setTypeCreate(robj *value) {$/;"	f
setTypeInitIterator	t_set.c	/^setTypeIterator *setTypeInitIterator(robj *subject) {$/;"	f
setTypeIsMember	t_set.c	/^int setTypeIsMember(robj *subject, robj *value) {$/;"	f
setTypeNext	t_set.c	/^int setTypeNext(setTypeIterator *si, robj **objele, int64_t *llele) {$/;"	f
setTypeNextObject	t_set.c	/^robj *setTypeNextObject(setTypeIterator *si) {$/;"	f
setTypeRandomElement	t_set.c	/^int setTypeRandomElement(robj *setobj, robj **objele, int64_t *llele) {$/;"	f
setTypeReleaseIterator	t_set.c	/^void setTypeReleaseIterator(setTypeIterator *si) {$/;"	f
setTypeRemove	t_set.c	/^int setTypeRemove(robj *setobj, robj *value) {$/;"	f
setTypeSize	t_set.c	/^unsigned long setTypeSize(robj *subject) {$/;"	f
setbitCommand	bitops.c	/^void setbitCommand(redisClient *c) {$/;"	f
setexCommand	gateway-front.c	/^void setexCommand(redisClient *c) {$/;"	f
setexCommand	t_string.c	/^void setexCommand(redisClient *c) {$/;"	f
setnxCommand	gateway-front.c	/^void setnxCommand(redisClient *c) {$/;"	f
setnxCommand	t_string.c	/^void setnxCommand(redisClient *c) {$/;"	f
setproctitle	setproctitle.c	/^void setproctitle(const char *fmt, ...) {$/;"	f
setrangeCommand	gateway-front.c	/^void setrangeCommand(redisClient *c) {$/;"	f
setrangeCommand	t_string.c	/^void setrangeCommand(redisClient *c) {$/;"	f
setupSignalHandlers	gateway.c	/^void setupSignalHandlers(void) {$/;"	f
setupSignalHandlers	redis-gateway.c	/^void setupSignalHandlers(void) {$/;"	f
setupSignalHandlers	redis.c	/^void setupSignalHandlers(void) {$/;"	f
sha1hex	scripting.c	/^void sha1hex(char *digest, char *script, size_t len) {$/;"	f
shaScriptObjectDictType	gateway.c	/^dictType shaScriptObjectDictType = {$/;"	v
shaScriptObjectDictType	redis-gateway.c	/^dictType shaScriptObjectDictType = {$/;"	v
shaScriptObjectDictType	redis.c	/^dictType shaScriptObjectDictType = {$/;"	v
shared	gateway.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
shared	redis-gateway.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
shared	redis.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
showLatencyDistLegend	gateway-back.c	/^void showLatencyDistLegend(void) {$/;"	f
showLatencyDistLegend	gateway-lib.c	/^void showLatencyDistLegend(void) {$/;"	f
showLatencyDistLegend	redis-cli.c	/^void showLatencyDistLegend(void) {$/;"	f
showLatencyDistLegend	redis-cli2.c	/^void showLatencyDistLegend(void) {$/;"	f
showLatencyDistLegend	redis-gateway2.c	/^void showLatencyDistLegend(void) {$/;"	f
showLatencyDistSamples	gateway-back.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f
showLatencyDistSamples	gateway-lib.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f
showLatencyDistSamples	redis-cli.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f
showLatencyDistSamples	redis-cli2.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f
showLatencyDistSamples	redis-gateway2.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f
showLatencyReport	redis-benchmark.c	/^static void showLatencyReport(void) {$/;"	f	file:
showThroughput	redis-benchmark.c	/^int showThroughput(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
shutdown	gateway-back.c	/^    int shutdown;$/;"	m	struct:config	file:
shutdown	gateway-lib.c	/^    int shutdown;$/;"	m	struct:config	file:
shutdown	redis-cli.c	/^    int shutdown;$/;"	m	struct:config	file:
shutdown	redis-cli2.c	/^    int shutdown;$/;"	m	struct:config	file:
shutdown	redis-gateway2.c	/^    int shutdown;$/;"	m	struct:config	file:
shutdownCommand	db.c	/^void shutdownCommand(redisClient *c) {$/;"	f
sigShutdownHandler	gateway.c	/^static void sigShutdownHandler(int sig) {$/;"	f	file:
sigShutdownHandler	redis-gateway.c	/^static void sigShutdownHandler(int sig) {$/;"	f	file:
sigShutdownHandler	redis.c	/^static void sigShutdownHandler(int sig) {$/;"	f	file:
signalFlushedDb	db.c	/^void signalFlushedDb(int dbid) {$/;"	f
signalListAsReady	t_list.c	/^void signalListAsReady(redisDb *db, robj *key) {$/;"	f
signalModifiedKey	db.c	/^void signalModifiedKey(redisDb *db, robj *key) {$/;"	f
sigsegvHandler	debug.c	/^void sigsegvHandler(int sig, siginfo_t *info, void *secret) {$/;"	f
sinterCommand	t_set.c	/^void sinterCommand(redisClient *c) {$/;"	f
sinterGenericCommand	t_set.c	/^void sinterGenericCommand(redisClient *c, robj **setkeys, unsigned long setnum, robj *dstkey) {$/;"	f
sinterstoreCommand	t_set.c	/^void sinterstoreCommand(redisClient *c) {$/;"	f
sismemberCommand	t_set.c	/^void sismemberCommand(redisClient *c) {$/;"	f
size	redis-check-dump.c	/^    size_t size;$/;"	m	struct:__anon4	file:
sl	t_zset.c	/^            } sl;$/;"	m	union:__anon11::__anon12::_iterzset	typeref:struct:__anon11::__anon12::_iterzset::__anon16	file:
slaveIsInHandshakeState	replication.c	/^int slaveIsInHandshakeState(void) {$/;"	f
slaveMode	gateway-back.c	/^static void slaveMode(int sn) {$/;"	f	file:
slaveMode	gateway-lib.c	/^static void slaveMode(int sn) {$/;"	f	file:
slaveMode	redis-cli.c	/^static void slaveMode(void) {$/;"	f	file:
slaveMode	redis-cli2.c	/^static void slaveMode(void) {$/;"	f	file:
slaveMode	redis-gateway2.c	/^static void slaveMode(void) {$/;"	f	file:
slaveTryPartialResynchronization	replication.c	/^int slaveTryPartialResynchronization(int fd, int read_reply) {$/;"	f
slave_conf_change_time	sentinel.c	/^    mstime_t slave_conf_change_time; \/* Last time slave master addr changed. *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_host	sentinel.c	/^    char *slave_master_host;    \/* Master host as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_link_status	sentinel.c	/^    int slave_master_link_status; \/* Master link status as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_port	sentinel.c	/^    int slave_master_port;      \/* Master port as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_mode	gateway-back.c	/^    int slave_mode;$/;"	m	struct:config	file:
slave_mode	gateway-lib.c	/^    int slave_mode;$/;"	m	struct:config	file:
slave_mode	redis-cli.c	/^    int slave_mode;$/;"	m	struct:config	file:
slave_mode	redis-cli2.c	/^    int slave_mode;$/;"	m	struct:config	file:
slave_mode	redis-gateway2.c	/^    int slave_mode;$/;"	m	struct:config	file:
slave_priority	sentinel.c	/^    int slave_priority; \/* Slave priority according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_reconf_sent_time	sentinel.c	/^    mstime_t slave_reconf_sent_time; \/* Time at which we sent SLAVE OF <new> *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_repl_offset	sentinel.c	/^    unsigned long long slave_repl_offset; \/* Slave replication offset. *\/$/;"	m	struct:sentinelRedisInstance	file:
slaveofCommand	replication.c	/^void slaveofCommand(redisClient *c) {$/;"	f
slaves	sentinel.c	/^    dict *slaves;       \/* Slaves for this master instance. *\/$/;"	m	struct:sentinelRedisInstance	file:
slotToKeyAdd	db.c	/^void slotToKeyAdd(robj *key) {$/;"	f
slotToKeyDel	db.c	/^void slotToKeyDel(robj *key) {$/;"	f
slotToKeyFlush	db.c	/^void slotToKeyFlush(void) {$/;"	f
slowlogCommand	slowlog.c	/^void slowlogCommand(redisClient *c) {$/;"	f
slowlogCreateEntry	slowlog.c	/^slowlogEntry *slowlogCreateEntry(robj **argv, int argc, long long duration) {$/;"	f
slowlogFreeEntry	slowlog.c	/^void slowlogFreeEntry(void *septr) {$/;"	f
slowlogInit	slowlog.c	/^void slowlogInit(void) {$/;"	f
slowlogPushEntryIfNeeded	slowlog.c	/^void slowlogPushEntryIfNeeded(robj **argv, int argc, long long duration) {$/;"	f
slowlogReset	slowlog.c	/^void slowlogReset(void) {$/;"	f
smoveCommand	t_set.c	/^void smoveCommand(redisClient *c) {$/;"	f
sortCommand	sort.c	/^void sortCommand(redisClient *c) {$/;"	f
sortCompare	sort.c	/^int sortCompare(const void *s1, const void *s2) {$/;"	f
sortGetKeys	db.c	/^int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
sparklineRender	sparkline.c	/^sds sparklineRender(sds output, struct sequence *seq, int columns, int rows, int flags) {$/;"	f
sparklineRenderRange	sparkline.c	/^sds sparklineRenderRange(sds output, struct sequence *seq, int rows, int offset, int len, int flags) {$/;"	f
sparklineSequenceAddSample	sparkline.c	/^void sparklineSequenceAddSample(struct sequence *seq, double value, char *label) {$/;"	f
spectrum_palette	gateway-back.c	/^int *spectrum_palette;$/;"	v
spectrum_palette	gateway-lib.c	/^int *spectrum_palette;$/;"	v
spectrum_palette	redis-cli.c	/^int *spectrum_palette;$/;"	v
spectrum_palette	redis-cli2.c	/^int *spectrum_palette;$/;"	v
spectrum_palette	redis-gateway2.c	/^int *spectrum_palette;$/;"	v
spectrum_palette_color	gateway-back.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color	gateway-lib.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color	redis-cli.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color	redis-cli2.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color	redis-gateway2.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color_size	gateway-back.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_color_size	gateway-lib.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_color_size	redis-cli.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_color_size	redis-cli2.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_color_size	redis-gateway2.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_mono	gateway-back.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono	gateway-lib.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono	redis-cli.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono	redis-cli2.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono	redis-gateway2.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono_size	gateway-back.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_mono_size	gateway-lib.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_mono_size	redis-cli.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_mono_size	redis-cli2.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_mono_size	redis-gateway2.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_size	gateway-back.c	/^int spectrum_palette_size;$/;"	v
spectrum_palette_size	gateway-lib.c	/^int spectrum_palette_size;$/;"	v
spectrum_palette_size	redis-cli.c	/^int spectrum_palette_size;$/;"	v
spectrum_palette_size	redis-cli2.c	/^int spectrum_palette_size;$/;"	v
spectrum_palette_size	redis-gateway2.c	/^int spectrum_palette_size;$/;"	v
spopCommand	t_set.c	/^void spopCommand(redisClient *c) {$/;"	f
spt_clearenv	setproctitle.c	/^static int spt_clearenv(void) {$/;"	f	file:
spt_copyargs	setproctitle.c	/^static int spt_copyargs(int argc, char *argv[]) {$/;"	f	file:
spt_copyenv	setproctitle.c	/^static int spt_copyenv(char *oldenv[]) {$/;"	f	file:
spt_init	setproctitle.c	/^void spt_init(int argc, char *argv[]) {$/;"	f
spt_min	setproctitle.c	/^static inline size_t spt_min(size_t a, size_t b) {$/;"	f	file:
sptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon11::__anon12::_iterzset::__anon15	file:
srandmemberCommand	t_set.c	/^void srandmemberCommand(redisClient *c) {$/;"	f
srandmemberWithCountCommand	t_set.c	/^void srandmemberWithCountCommand(redisClient *c) {$/;"	f
sremCommand	t_set.c	/^void sremCommand(redisClient *c) {$/;"	f
sscanCommand	t_set.c	/^void sscanCommand(redisClient *c) {$/;"	f
start	redis-benchmark.c	/^    long long start;        \/* Start time of a request *\/$/;"	m	struct:_client	file:
start	redis-benchmark.c	/^    long long start;$/;"	m	struct:config	file:
startAppendOnly	aof.c	/^int startAppendOnly(void) {$/;"	f
startBgsaveForReplication	replication.c	/^int startBgsaveForReplication(int mincapa) {$/;"	f
startLoading	rdb.c	/^void startLoading(FILE *fp) {$/;"	f
start_time	sentinel.c	/^    mstime_t start_time;    \/* Script execution time if the script is running,$/;"	m	struct:sentinelScriptJob	file:
statMode	gateway-back.c	/^static void statMode(int sn) {$/;"	f	file:
statMode	gateway-lib.c	/^static void statMode(int sn) {$/;"	f	file:
statMode	redis-cli.c	/^static void statMode(void) {$/;"	f	file:
statMode	redis-cli2.c	/^static void statMode(void) {$/;"	f	file:
statMode	redis-gateway2.c	/^static void statMode(void) {$/;"	f	file:
stat_mode	gateway-back.c	/^    int stat_mode;$/;"	m	struct:config	file:
stat_mode	gateway-lib.c	/^    int stat_mode;$/;"	m	struct:config	file:
stat_mode	redis-cli.c	/^    int stat_mode;$/;"	m	struct:config	file:
stat_mode	redis-cli2.c	/^    int stat_mode;$/;"	m	struct:config	file:
stat_mode	redis-gateway2.c	/^    int stat_mode;$/;"	m	struct:config	file:
stdinarg	gateway-back.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:
stdinarg	gateway-lib.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:
stdinarg	redis-cli.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:
stdinarg	redis-cli2.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:
stdinarg	redis-gateway2.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:
stopAppendOnly	aof.c	/^void stopAppendOnly(void) {$/;"	f
stopLoading	rdb.c	/^void stopLoading(void) {$/;"	f
strEncoding	object.c	/^char *strEncoding(int encoding) {$/;"	f
stress	ziplist.c	/^void stress(int pos, int num, int maxsize, int dnum) {$/;"	f
string2l	util.c	/^int string2l(const char *s, size_t slen, long *lval) {$/;"	f
string2ll	util.c	/^int string2ll(const char *s, size_t slen, long long *value) {$/;"	f
stringObjectLen	object.c	/^size_t stringObjectLen(robj *o) {$/;"	f
stringmatch	util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f
stringmatchlen	util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
strlenCommand	gateway-front.c	/^void strlenCommand(redisClient *c) {$/;"	f
strlenCommand	t_string.c	/^void strlenCommand(redisClient *c) {$/;"	f
strtold	object.c	36;"	d	file:
subject	t_zset.c	/^    robj *subject;$/;"	m	struct:__anon11	file:
subscribeCommand	pubsub.c	/^void subscribeCommand(redisClient *c) {$/;"	f
success	redis-check-dump.c	/^    char success;$/;"	m	struct:__anon6	file:
sunionCommand	t_set.c	/^void sunionCommand(redisClient *c) {$/;"	f
sunionDiffGenericCommand	t_set.c	/^void sunionDiffGenericCommand(redisClient *c, robj **setkeys, int setnum, robj *dstkey, int op) {$/;"	f
sunionstoreCommand	t_set.c	/^void sunionstoreCommand(redisClient *c) {$/;"	f
swap	pqsort.c	78;"	d	file:
swapcode	pqsort.c	54;"	d	file:
swapfunc	pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	file:
syncCommand	replication.c	/^void syncCommand(redisClient *c) {$/;"	f
syncRead	syncio.c	/^ssize_t syncRead(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
syncReadLine	syncio.c	/^ssize_t syncReadLine(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
syncWithMaster	replication.c	/^void syncWithMaster(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
syncWrite	syncio.c	/^ssize_t syncWrite(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
test_is_selected	redis-benchmark.c	/^int test_is_selected(char *name) {$/;"	f
test_string2l	util.c	/^void test_string2l(void) {$/;"	f
test_string2ll	util.c	/^void test_string2ll(void) {$/;"	f
tests	redis-benchmark.c	/^    char *tests;$/;"	m	struct:config	file:
tilt	sentinel.c	/^    int tilt;           \/* Are we in TILT mode? *\/$/;"	m	struct:sentinelState	file:
tilt_start_time	sentinel.c	/^    mstime_t tilt_start_time;   \/* When TITL started. *\/$/;"	m	struct:sentinelState	file:
time	bio.c	/^    time_t time; \/* Time at which the job was created. *\/$/;"	m	struct:bio_job	file:
timeCommand	gateway.c	/^void timeCommand(redisClient *c) {$/;"	f
timeCommand	redis-gateway.c	/^void timeCommand(redisClient *c) {$/;"	f
timeCommand	redis.c	/^void timeCommand(redisClient *c) {$/;"	f
timeInMilliseconds	dict.c	/^long long timeInMilliseconds(void) {$/;"	f
time_independent_strcmp	gateway.c	/^int time_independent_strcmp(char *a, char *b) {$/;"	f
time_independent_strcmp	redis-gateway.c	/^int time_independent_strcmp(char *a, char *b) {$/;"	f
time_independent_strcmp	redis.c	/^int time_independent_strcmp(char *a, char *b) {$/;"	f
title	redis-benchmark.c	/^    const char *title;$/;"	m	struct:config	file:
toIntType	gateway-back.c	/^static int toIntType(char *key, char *type) {$/;"	f	file:
toIntType	gateway-lib.c	/^static int toIntType(char *key, char *type) {$/;"	f	file:
toIntType	redis-cli.c	/^static int toIntType(char *key, char *type) {$/;"	f	file:
toIntType	redis-cli2.c	/^static int toIntType(char *key, char *type) {$/;"	f	file:
toIntType	redis-gateway2.c	/^static int toIntType(char *key, char *type) {$/;"	f	file:
totlatency	redis-benchmark.c	/^    long long totlatency;$/;"	m	struct:config	file:
touchWatchedKey	multi.c	/^void touchWatchedKey(redisDb *db, robj *key) {$/;"	f
touchWatchedKeysOnFlush	multi.c	/^void touchWatchedKeysOnFlush(int dbid) {$/;"	f
trackInstantaneousMetric	gateway.c	/^void trackInstantaneousMetric(int metric, long long current_reading) {$/;"	f
trackInstantaneousMetric	redis-gateway.c	/^void trackInstantaneousMetric(int metric, long long current_reading) {$/;"	f
trackInstantaneousMetric	redis.c	/^void trackInstantaneousMetric(int metric, long long current_reading) {$/;"	f
tryObjectEncoding	object.c	/^robj *tryObjectEncoding(robj *o) {$/;"	f
tryResizeHashTables	gateway.c	/^void tryResizeHashTables(int dbid) {$/;"	f
tryResizeHashTables	redis-gateway.c	/^void tryResizeHashTables(int dbid) {$/;"	f
tryResizeHashTables	redis.c	/^void tryResizeHashTables(int dbid) {$/;"	f
ttlCommand	db.c	/^void ttlCommand(redisClient *c) {$/;"	f
ttlGenericCommand	db.c	/^void ttlGenericCommand(redisClient *c, int output_ms) {$/;"	f
type	gateway-back.c	/^    int type;$/;"	m	struct:__anon2	file:
type	gateway-lib.c	/^    int type;$/;"	m	struct:__anon3	file:
type	redis-check-dump.c	/^    int type;$/;"	m	struct:__anon6	file:
type	redis-cli.c	/^    int type;$/;"	m	struct:__anon8	file:
type	redis-cli2.c	/^    int type;$/;"	m	struct:__anon7	file:
type	redis-gateway2.c	/^    int type;$/;"	m	struct:__anon9	file:
type	t_zset.c	/^    int type; \/* Set, sorted set *\/$/;"	m	struct:__anon11	file:
typeCommand	db.c	/^void typeCommand(redisClient *c) {$/;"	f
types	redis-check-dump.c	/^static char types[MAX_TYPES_NUM][MAX_TYPE_NAME_LEN];$/;"	v	file:
unblockClient	blocked.c	/^void unblockClient(redisClient *c) {$/;"	f
unblockClientWaitingData	t_list.c	/^void unblockClientWaitingData(redisClient *c) {$/;"	f
unblockClientWaitingReplicas	replication.c	/^void unblockClientWaitingReplicas(redisClient *c) {$/;"	f
undoConnectWithMaster	replication.c	/^void undoConnectWithMaster(void) {$/;"	f
unsubscribeCommand	pubsub.c	/^void unsubscribeCommand(redisClient *c) {$/;"	f
unwatchAllKeys	multi.c	/^void unwatchAllKeys(redisClient *c) {$/;"	f
unwatchCommand	multi.c	/^void unwatchCommand(redisClient *c) {$/;"	f
updateCachedTime	gateway.c	/^void updateCachedTime(void) {$/;"	f
updateCachedTime	redis-gateway.c	/^void updateCachedTime(void) {$/;"	f
updateCachedTime	redis.c	/^void updateCachedTime(void) {$/;"	f
updateDictResizePolicy	gateway.c	/^void updateDictResizePolicy(void) {$/;"	f
updateDictResizePolicy	redis-gateway.c	/^void updateDictResizePolicy(void) {$/;"	f
updateDictResizePolicy	redis.c	/^void updateDictResizePolicy(void) {$/;"	f
updateSlavesWaitingBgsave	replication.c	/^void updateSlavesWaitingBgsave(int bgsaveerr, int type) {$/;"	f
update_zmalloc_stat_add	zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	zmalloc.c	74;"	d	file:
update_zmalloc_stat_add	zmalloc.c	77;"	d	file:
update_zmalloc_stat_alloc	zmalloc.c	91;"	d	file:
update_zmalloc_stat_free	zmalloc.c	101;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	75;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	83;"	d	file:
usage	gateway-back.c	/^static void usage(void) {$/;"	f	file:
usage	gateway-lib.c	/^static void usage(void) {$/;"	f	file:
usage	gateway.c	/^void usage(void) {$/;"	f
usage	redis-cli.c	/^static void usage(void) {$/;"	f	file:
usage	redis-cli2.c	/^static void usage(void) {$/;"	f	file:
usage	redis-gateway.c	/^void usage(void) {$/;"	f
usage	redis-gateway2.c	/^static void usage(void) {$/;"	f	file:
usage	redis.c	/^void usage(void) {$/;"	f
usec	intset.c	/^long long usec(void) {$/;"	f
usec	ziplist.c	/^long long usec(void) {$/;"	f
used	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:
used_memory	zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
ustime	gateway-back.c	/^static long long ustime(void) {$/;"	f	file:
ustime	gateway-lib.c	/^static long long ustime(void) {$/;"	f	file:
ustime	gateway.c	/^long long ustime(void) {$/;"	f
ustime	redis-benchmark.c	/^static long long ustime(void) {$/;"	f	file:
ustime	redis-cli.c	/^static long long ustime(void) {$/;"	f	file:
ustime	redis-cli2.c	/^static long long ustime(void) {$/;"	f	file:
ustime	redis-gateway.c	/^long long ustime(void) {$/;"	f
ustime	redis-gateway2.c	/^static long long ustime(void) {$/;"	f	file:
ustime	redis.c	/^long long ustime(void) {$/;"	f
validSyslogFacilities	config.c	/^} validSyslogFacilities[] = {$/;"	v	typeref:struct:__anon1	file:
value	config.c	/^    const int       value;$/;"	m	struct:__anon1	file:
vecswap	pqsort.c	86;"	d	file:
verify	ziplist.c	/^void verify(unsigned char *zl, zlentry *e) {$/;"	f
verifyClusterConfigWithData	cluster.c	/^int verifyClusterConfigWithData(void) {$/;"	f
verifyDumpPayload	cluster.c	/^int verifyDumpPayload(unsigned char *p, size_t len) {$/;"	f
version	gateway.c	/^void version(void) {$/;"	f
version	redis-gateway.c	/^void version(void) {$/;"	f
version	redis.c	/^void version(void) {$/;"	f
votes	sentinel.c	/^    unsigned long votes;$/;"	m	struct:sentinelLeader	file:
waitCommand	replication.c	/^void waitCommand(redisClient *c) {$/;"	f
watchCommand	multi.c	/^void watchCommand(redisClient *c) {$/;"	f
watchForKey	multi.c	/^void watchForKey(redisClient *c, robj *key) {$/;"	f
watchdogScheduleSignal	debug.c	/^void watchdogScheduleSignal(int period) {$/;"	f
watchdogSignalHandler	debug.c	/^void watchdogSignalHandler(int sig, siginfo_t *info, void *secret) {$/;"	f
watchedKey	multi.c	/^typedef struct watchedKey {$/;"	s	file:
watchedKey	multi.c	/^} watchedKey;$/;"	t	typeref:struct:watchedKey	file:
weight	t_zset.c	/^    double weight;$/;"	m	struct:__anon11	file:
wfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
writeHandler	redis-benchmark.c	/^static void writeHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
writing	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:
written	redis-benchmark.c	/^    unsigned int written;   \/* Bytes of 'obuf' already written *\/$/;"	m	struct:_client	file:
ws	memtest.c	/^static struct winsize ws;$/;"	v	typeref:struct:winsize	file:
x	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
xorDigest	debug.c	/^void xorDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f
xorObjectDigest	debug.c	/^void xorObjectDigest(unsigned char *digest, robj *o) {$/;"	f
yesnotoi	config.c	/^int yesnotoi(char *s) {$/;"	f
zaddCommand	t_zset.c	/^void zaddCommand(redisClient *c) {$/;"	f
zaddGenericCommand	t_zset.c	/^void zaddGenericCommand(redisClient *c, int flags) {$/;"	f
zcalloc	zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zcardCommand	t_zset.c	/^void zcardCommand(redisClient *c) {$/;"	f
zcountCommand	t_zset.c	/^void zcountCommand(redisClient *c) {$/;"	f
zfree	zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zincrbyCommand	t_zset.c	/^void zincrbyCommand(redisClient *c) {$/;"	f
zinterstoreCommand	t_zset.c	/^void zinterstoreCommand(redisClient *c) {$/;"	f
zipEncodeLength	ziplist.c	/^static unsigned int zipEncodeLength(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f	file:
zipEntry	ziplist.c	/^static zlentry zipEntry(unsigned char *p) {$/;"	f	file:
zipIntSize	ziplist.c	/^static unsigned int zipIntSize(unsigned char encoding) {$/;"	f	file:
zipLoadInteger	ziplist.c	/^static int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f	file:
zipPrevEncodeLength	ziplist.c	/^static unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevEncodeLengthForceLarge	ziplist.c	/^static void zipPrevEncodeLengthForceLarge(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevLenByteDiff	ziplist.c	/^static int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f	file:
zipRawEntryLength	ziplist.c	/^static unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	file:
zipSaveInteger	ziplist.c	/^static void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f	file:
zipTryEncoding	ziplist.c	/^static int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f	file:
ziplistBlobLen	ziplist.c	/^size_t ziplistBlobLen(unsigned char *zl) {$/;"	f
ziplistCompare	ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f
ziplistDelete	ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f
ziplistDeleteRange	ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, unsigned int index, unsigned int num) {$/;"	f
ziplistFind	ziplist.c	/^unsigned char *ziplistFind(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip) {$/;"	f
ziplistGet	ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f
ziplistGetObject	t_zset.c	/^robj *ziplistGetObject(unsigned char *sptr) {$/;"	f
ziplistIndex	ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f
ziplistInsert	ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistLen	ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f
ziplistNew	ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f
ziplistNext	ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPrev	ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPush	ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f
ziplistRepr	ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f
ziplistResize	ziplist.c	/^static unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f	file:
zipmapBlobLen	zipmap.c	/^size_t zipmapBlobLen(unsigned char *zm) {$/;"	f
zipmapDecodeLength	zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	file:
zipmapDel	zipmap.c	/^unsigned char *zipmapDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted) {$/;"	f
zipmapEncodeLength	zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipmapExists	zipmap.c	/^int zipmapExists(unsigned char *zm, unsigned char *key, unsigned int klen) {$/;"	f
zipmapGet	zipmap.c	/^int zipmapGet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapLen	zipmap.c	/^unsigned int zipmapLen(unsigned char *zm) {$/;"	f
zipmapLookupRaw	zipmap.c	/^static unsigned char *zipmapLookupRaw(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned int *totlen) {$/;"	f	file:
zipmapNew	zipmap.c	/^unsigned char *zipmapNew(void) {$/;"	f
zipmapNext	zipmap.c	/^unsigned char *zipmapNext(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapRawEntryLength	zipmap.c	/^static unsigned int zipmapRawEntryLength(unsigned char *p) {$/;"	f	file:
zipmapRawKeyLength	zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	file:
zipmapRawValueLength	zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	file:
zipmapRepr	zipmap.c	/^void zipmapRepr(unsigned char *p) {$/;"	f
zipmapRequiredLength	zipmap.c	/^static unsigned long zipmapRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	file:
zipmapResize	zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	file:
zipmapRewind	zipmap.c	/^unsigned char *zipmapRewind(unsigned char *zm) {$/;"	f
zipmapSet	zipmap.c	/^unsigned char *zipmapSet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update) {$/;"	f
zl	t_zset.c	/^                unsigned char *zl;$/;"	m	struct:__anon11::__anon12::_iterzset::__anon15	file:
zl	t_zset.c	/^            } zl;$/;"	m	union:__anon11::__anon12::_iterzset	typeref:struct:__anon11::__anon12::_iterzset::__anon15	file:
zlentry	ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
zlexcountCommand	t_zset.c	/^void zlexcountCommand(redisClient *c) {$/;"	f
zlibc_free	zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zmalloc	zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_default_oom	zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_enable_thread_safeness	zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	zmalloc.c	/^float zmalloc_get_fragmentation_ratio(size_t rss) {$/;"	f
zmalloc_get_private_dirty	zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_rss	zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_get_smap_bytes_by_field	zmalloc.c	/^size_t zmalloc_get_smap_bytes_by_field(char *field) {$/;"	f
zmalloc_oom_handler	zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_size	zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size_sds	networking.c	/^size_t zmalloc_size_sds(sds s) {$/;"	f
zmalloc_thread_safe	zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_used_memory	zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrangeCommand	t_zset.c	/^void zrangeCommand(redisClient *c) {$/;"	f
zrangeGenericCommand	t_zset.c	/^void zrangeGenericCommand(redisClient *c, int reverse) {$/;"	f
zrangebylexCommand	t_zset.c	/^void zrangebylexCommand(redisClient *c) {$/;"	f
zrangebyscoreCommand	t_zset.c	/^void zrangebyscoreCommand(redisClient *c) {$/;"	f
zrankCommand	t_zset.c	/^void zrankCommand(redisClient *c) {$/;"	f
zrankGenericCommand	t_zset.c	/^void zrankGenericCommand(redisClient *c, int reverse) {$/;"	f
zrealloc	zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zremCommand	t_zset.c	/^void zremCommand(redisClient *c) {$/;"	f
zremrangeGenericCommand	t_zset.c	/^void zremrangeGenericCommand(redisClient *c, int rangetype) {$/;"	f
zremrangebylexCommand	t_zset.c	/^void zremrangebylexCommand(redisClient *c) {$/;"	f
zremrangebyrankCommand	t_zset.c	/^void zremrangebyrankCommand(redisClient *c) {$/;"	f
zremrangebyscoreCommand	t_zset.c	/^void zremrangebyscoreCommand(redisClient *c) {$/;"	f
zrevrangeCommand	t_zset.c	/^void zrevrangeCommand(redisClient *c) {$/;"	f
zrevrangebylexCommand	t_zset.c	/^void zrevrangebylexCommand(redisClient *c) {$/;"	f
zrevrangebyscoreCommand	t_zset.c	/^void zrevrangebyscoreCommand(redisClient *c) {$/;"	f
zrevrankCommand	t_zset.c	/^void zrevrankCommand(redisClient *c) {$/;"	f
zs	t_zset.c	/^                zset *zs;$/;"	m	struct:__anon11::__anon12::_iterzset::__anon16	file:
zscanCommand	t_zset.c	/^void zscanCommand(redisClient *c) {$/;"	f
zscoreCommand	t_zset.c	/^void zscoreCommand(redisClient *c) {$/;"	f
zset	t_zset.c	/^        } zset;$/;"	m	union:__anon11::__anon12	typeref:union:__anon11::__anon12::_iterzset	file:
zsetConvert	t_zset.c	/^void zsetConvert(robj *zobj, int encoding) {$/;"	f
zsetDictType	gateway.c	/^dictType zsetDictType = {$/;"	v
zsetDictType	redis-gateway.c	/^dictType zsetDictType = {$/;"	v
zsetDictType	redis.c	/^dictType zsetDictType = {$/;"	v
zsetLength	t_zset.c	/^unsigned int zsetLength(robj *zobj) {$/;"	f
zsetopsrc	t_zset.c	/^} zsetopsrc;$/;"	t	typeref:struct:__anon11	file:
zsetopval	t_zset.c	/^} zsetopval;$/;"	t	typeref:struct:__anon17	file:
zslCreate	t_zset.c	/^zskiplist *zslCreate(void) {$/;"	f
zslCreateNode	t_zset.c	/^zskiplistNode *zslCreateNode(int level, double score, robj *obj) {$/;"	f
zslDelete	t_zset.c	/^int zslDelete(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslDeleteNode	t_zset.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f
zslDeleteRangeByLex	t_zset.c	/^unsigned long zslDeleteRangeByLex(zskiplist *zsl, zlexrangespec *range, dict *dict) {$/;"	f
zslDeleteRangeByRank	t_zset.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict) {$/;"	f
zslDeleteRangeByScore	t_zset.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec *range, dict *dict) {$/;"	f
zslFirstInLexRange	t_zset.c	/^zskiplistNode *zslFirstInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslFirstInRange	t_zset.c	/^zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslFree	t_zset.c	/^void zslFree(zskiplist *zsl) {$/;"	f
zslFreeLexRange	t_zset.c	/^void zslFreeLexRange(zlexrangespec *spec) {$/;"	f
zslFreeNode	t_zset.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f
zslGetElementByRank	t_zset.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f
zslGetRank	t_zset.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, robj *o) {$/;"	f
zslInsert	t_zset.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslIsInLexRange	t_zset.c	/^int zslIsInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslIsInRange	t_zset.c	/^int zslIsInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslLastInLexRange	t_zset.c	/^zskiplistNode *zslLastInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslLastInRange	t_zset.c	/^zskiplistNode *zslLastInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslLexValueGteMin	t_zset.c	/^static int zslLexValueGteMin(robj *value, zlexrangespec *spec) {$/;"	f	file:
zslLexValueLteMax	t_zset.c	/^static int zslLexValueLteMax(robj *value, zlexrangespec *spec) {$/;"	f	file:
zslParseLexRange	t_zset.c	/^static int zslParseLexRange(robj *min, robj *max, zlexrangespec *spec) {$/;"	f	file:
zslParseLexRangeItem	t_zset.c	/^int zslParseLexRangeItem(robj *item, robj **dest, int *ex) {$/;"	f
zslParseRange	t_zset.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	file:
zslRandomLevel	t_zset.c	/^int zslRandomLevel(void) {$/;"	f
zslValueGteMin	t_zset.c	/^static int zslValueGteMin(double value, zrangespec *spec) {$/;"	f	file:
zslValueLteMax	t_zset.c	/^static int zslValueLteMax(double value, zrangespec *spec) {$/;"	f	file:
zstrdup	zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
zuiBufferFromValue	t_zset.c	/^int zuiBufferFromValue(zsetopval *val) {$/;"	f
zuiClearIterator	t_zset.c	/^void zuiClearIterator(zsetopsrc *op) {$/;"	f
zuiCompareByCardinality	t_zset.c	/^int zuiCompareByCardinality(const void *s1, const void *s2) {$/;"	f
zuiFind	t_zset.c	/^int zuiFind(zsetopsrc *op, zsetopval *val, double *score) {$/;"	f
zuiInitIterator	t_zset.c	/^void zuiInitIterator(zsetopsrc *op) {$/;"	f
zuiLength	t_zset.c	/^int zuiLength(zsetopsrc *op) {$/;"	f
zuiLongLongFromValue	t_zset.c	/^int zuiLongLongFromValue(zsetopval *val) {$/;"	f
zuiNext	t_zset.c	/^int zuiNext(zsetopsrc *op, zsetopval *val) {$/;"	f
zuiObjectFromValue	t_zset.c	/^robj *zuiObjectFromValue(zsetopval *val) {$/;"	f
zunionInterAggregate	t_zset.c	/^inline static void zunionInterAggregate(double *target, double val, int aggregate) {$/;"	f	file:
zunionInterDictValue	t_zset.c	1886;"	d	file:
zunionInterGenericCommand	t_zset.c	/^void zunionInterGenericCommand(redisClient *c, robj *dstkey, int op) {$/;"	f
zunionInterGetKeys	db.c	/^int *zunionInterGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
zunionstoreCommand	t_zset.c	/^void zunionstoreCommand(redisClient *c) {$/;"	f
zzlCompareElements	t_zset.c	/^int zzlCompareElements(unsigned char *eptr, unsigned char *cstr, unsigned int clen) {$/;"	f
zzlDelete	t_zset.c	/^unsigned char *zzlDelete(unsigned char *zl, unsigned char *eptr) {$/;"	f
zzlDeleteRangeByLex	t_zset.c	/^unsigned char *zzlDeleteRangeByLex(unsigned char *zl, zlexrangespec *range, unsigned long *deleted) {$/;"	f
zzlDeleteRangeByRank	t_zset.c	/^unsigned char *zzlDeleteRangeByRank(unsigned char *zl, unsigned int start, unsigned int end, unsigned long *deleted) {$/;"	f
zzlDeleteRangeByScore	t_zset.c	/^unsigned char *zzlDeleteRangeByScore(unsigned char *zl, zrangespec *range, unsigned long *deleted) {$/;"	f
zzlFind	t_zset.c	/^unsigned char *zzlFind(unsigned char *zl, robj *ele, double *score) {$/;"	f
zzlFirstInLexRange	t_zset.c	/^unsigned char *zzlFirstInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlFirstInRange	t_zset.c	/^unsigned char *zzlFirstInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlGetScore	t_zset.c	/^double zzlGetScore(unsigned char *sptr) {$/;"	f
zzlInsert	t_zset.c	/^unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score) {$/;"	f
zzlInsertAt	t_zset.c	/^unsigned char *zzlInsertAt(unsigned char *zl, unsigned char *eptr, robj *ele, double score) {$/;"	f
zzlIsInLexRange	t_zset.c	/^int zzlIsInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlIsInRange	t_zset.c	/^int zzlIsInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlLastInLexRange	t_zset.c	/^unsigned char *zzlLastInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlLastInRange	t_zset.c	/^unsigned char *zzlLastInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlLength	t_zset.c	/^unsigned int zzlLength(unsigned char *zl) {$/;"	f
zzlLexValueGteMin	t_zset.c	/^static int zzlLexValueGteMin(unsigned char *p, zlexrangespec *spec) {$/;"	f	file:
zzlLexValueLteMax	t_zset.c	/^static int zzlLexValueLteMax(unsigned char *p, zlexrangespec *spec) {$/;"	f	file:
zzlNext	t_zset.c	/^void zzlNext(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f
zzlPrev	t_zset.c	/^void zzlPrev(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f
